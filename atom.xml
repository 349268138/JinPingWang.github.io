<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[Quick notes]]></title>
  <subtitle><![CDATA[等风来]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://jinpingwang.github.io/"/>
  <updated>2016-05-24T01:27:23.620Z</updated>
  <id>http://jinpingwang.github.io/</id>
  
  <author>
    <name><![CDATA[等风来]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[基于TCP协议的RPC]]></title>
    <link href="http://jinpingwang.github.io/2016/05/21/web/%E5%9F%BA%E4%BA%8ETCP%E5%8D%8F%E8%AE%AE%E7%9A%84RPC/"/>
    <id>http://jinpingwang.github.io/2016/05/21/web/基于TCP协议的RPC/</id>
    <published>2016-05-21T00:10:38.000Z</published>
    <updated>2016-05-24T01:27:23.620Z</updated>
    <content type="html"><![CDATA[<p>RPC（Remote Procedure Call Protocol），即远程过程调用协议，是一种通过网络从远程计算机程序上请求服务，而不需要了解底层网络技术协议。基于TCP协议的RPC能够更灵活地对协议字段进行定制，减少网络传输字节数，降低网络开销，提高性能，但需要关注底层复杂的细节，且所定义的协议自身局限性，难以得到平台厂商和开源社区的支持，较难实现跨平台调用。如不同平台的移动终端应用程序，像Android, HTML5, IOS等，需要重新开发不同的工具包来进行请求发送和响应解析，工作量大。另外基于TCP协议的RPC的实现，程序需要考虑多线程并发，锁，I/O等复杂的底层细节现实。<br><a id="more"></a></p>
<h3 id="u6E90_u7801"><a href="#u6E90_u7801" class="headerlink" title="源码"></a>源码</h3><h4 id="Server"><a href="#Server" class="headerlink" title="Server"></a>Server</h4><figure class="highlight nimrod"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.<span class="type">IOException</span>;</span><br><span class="line"><span class="keyword">import</span> java.io.<span class="type">ObjectInputStream</span>;</span><br><span class="line"><span class="keyword">import</span> java.io.<span class="type">ObjectOutputStream</span>;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.<span class="type">InvocationTargetException</span>;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.<span class="type">Method</span>;</span><br><span class="line"><span class="keyword">import</span> java.net.<span class="type">ServerSocket</span>;</span><br><span class="line"><span class="keyword">import</span> java.net.<span class="type">Socket</span>;</span><br><span class="line"><span class="keyword">import</span> java.util.<span class="type">HashMap</span>;</span><br><span class="line"></span><br><span class="line">public class <span class="type">Server</span> &#123;</span><br><span class="line">    public <span class="keyword">static</span> <span class="type">void</span> main(<span class="type">String</span>[] args) throws <span class="type">IOException</span>, <span class="type">ClassNotFoundException</span>, <span class="type">NoSuchMethodException</span>, <span class="type">SecurityException</span>, <span class="type">IllegalAccessException</span>, <span class="type">IllegalArgumentException</span>, <span class="type">InvocationTargetException</span>, <span class="type">InterruptedException</span> &#123;</span><br><span class="line">        // <span class="type">TODO</span> <span class="type">Auto</span>-generated <span class="keyword">method</span> stub</span><br><span class="line">    </span><br><span class="line">        //启用服务，监听<span class="number">52000</span></span><br><span class="line">        <span class="type">ServerSocket</span> server = new <span class="type">ServerSocket</span>(<span class="number">52000</span>);</span><br><span class="line">        //将接口与对应具体实现，使用map进行匹配</span><br><span class="line">        <span class="type">HashMap</span>&lt;<span class="type">String</span>, <span class="type">Object</span>&gt; services = new <span class="type">HashMap</span>&lt;<span class="type">String</span>, <span class="type">Object</span>&gt;();</span><br><span class="line">        <span class="type">SayHelloServiceImpl</span> shsi = new <span class="type">SayHelloServiceImpl</span>();</span><br><span class="line">        services.put(<span class="string">"SayHelloService"</span>, shsi);</span><br><span class="line">    </span><br><span class="line">        <span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">                //获取一个socket</span><br><span class="line">                <span class="type">Socket</span> socket = server.accept();</span><br><span class="line">    </span><br><span class="line">                //读取客户端需要服务器调用的接口名，调用方法，使用实际参数</span><br><span class="line">                <span class="type">ObjectInputStream</span> input = new <span class="type">ObjectInputStream</span>(socket.getInputStream());</span><br><span class="line">                <span class="type">String</span> interfacename = input.readUTF();</span><br><span class="line">                <span class="type">String</span> methodName = input.readUTF();</span><br><span class="line">                <span class="type">Class</span>&lt;?&gt;[] parameterTypes = (<span class="type">Class</span>&lt;?&gt;[])input.readObject();</span><br><span class="line">                <span class="type">Object</span> arguments[] = (<span class="type">Object</span>[])input.readObject();</span><br><span class="line">    </span><br><span class="line">                //得到<span class="type">Class</span>对象，从map中取得实现接口的对象，</span><br><span class="line">                //创建<span class="type">Method</span>，使用<span class="type">Method</span>的invoke方法调用对象中的函数</span><br><span class="line">                <span class="type">Class</span> serviceinterfaceclass = <span class="type">Class</span>.forName(interfacename);</span><br><span class="line">                <span class="type">Object</span> service = services.get(interfacename);</span><br><span class="line">                <span class="type">Method</span> <span class="keyword">method</span> = service.getClass().getMethod(methodName, parameterTypes);</span><br><span class="line">                <span class="type">Object</span> <span class="literal">result</span> = <span class="keyword">method</span>.invoke(service, arguments);</span><br><span class="line">    </span><br><span class="line">                //将结果返回给客户端</span><br><span class="line">                <span class="type">ObjectOutputStream</span> output = new <span class="type">ObjectOutputStream</span>(socket.getOutputStream());</span><br><span class="line">                output.writeObject(<span class="literal">result</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="Client"><a href="#Client" class="headerlink" title="Client"></a>Client</h4><figure class="highlight nimrod"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.<span class="type">IOException</span>;</span><br><span class="line"><span class="keyword">import</span> java.io.<span class="type">ObjectInputStream</span>;</span><br><span class="line"><span class="keyword">import</span> java.io.<span class="type">ObjectOutputStream</span>;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.<span class="type">Method</span>;</span><br><span class="line"><span class="keyword">import</span> java.net.<span class="type">Socket</span>;</span><br><span class="line"><span class="keyword">import</span> java.net.<span class="type">UnknownHostException</span>;</span><br><span class="line"></span><br><span class="line">public class <span class="type">Client</span> &#123;</span><br><span class="line"></span><br><span class="line">        public <span class="keyword">static</span> <span class="type">void</span> main(<span class="type">String</span>[] args) throws <span class="type">NoSuchMethodException</span>,</span><br><span class="line">                <span class="type">SecurityException</span>, <span class="type">UnknownHostException</span>, <span class="type">IOException</span>, <span class="type">ClassNotFoundException</span> &#123;</span><br><span class="line">                // <span class="type">TODO</span> <span class="type">Auto</span>-generated <span class="keyword">method</span> stub</span><br><span class="line"></span><br><span class="line">                //此次需要的服务器调用的接口名，调用方法，使用实际参数</span><br><span class="line">                <span class="type">String</span> interfaceName = <span class="type">SayHelloService</span>.class.getName();</span><br><span class="line">                <span class="type">Method</span> <span class="keyword">method</span> = <span class="type">SayHelloService</span>.class.getMethod(<span class="string">"sayHello"</span>, java.lang.<span class="type">String</span>.class);</span><br><span class="line">                <span class="type">Object</span> arguments[] = &#123;<span class="string">"hello"</span>&#125;;</span><br><span class="line"></span><br><span class="line">                //创建与服务器ip，端口相连接的<span class="type">Socket</span></span><br><span class="line">                <span class="type">Socket</span> socket = new <span class="type">Socket</span>(<span class="string">"192.168.91.201"</span>, <span class="number">52000</span>);</span><br><span class="line"></span><br><span class="line">                //将接口名，方法，方法类型参数，方法实际参数发送给服务器</span><br><span class="line">                <span class="type">ObjectOutputStream</span> output = new <span class="type">ObjectOutputStream</span>(socket.getOutputStream());</span><br><span class="line">                output.writeUTF(interfaceName);</span><br><span class="line">                output.writeUTF(<span class="keyword">method</span>.getName());</span><br><span class="line">                output.writeObject(<span class="keyword">method</span>.getParameterTypes());</span><br><span class="line">                output.writeObject(arguments);</span><br><span class="line"></span><br><span class="line">                //等待服务器发送回的数据</span><br><span class="line">                <span class="type">ObjectInputStream</span> input = new <span class="type">ObjectInputStream</span>(socket.getInputStream());</span><br><span class="line">                <span class="type">String</span> <span class="literal">result</span> = (<span class="type">String</span>)input.readObject();</span><br><span class="line">                <span class="type">System</span>.<span class="keyword">out</span>.println(<span class="literal">result</span>);</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="SayHelloService"><a href="#SayHelloService" class="headerlink" title="SayHelloService"></a>SayHelloService</h4><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="interface"><span class="keyword">interface</span> SayHelloService </span>&#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">String</span> sayHello(<span class="built_in">String</span> helloArg);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="SayHelloServiceImpl"><a href="#SayHelloServiceImpl" class="headerlink" title="SayHelloServiceImpl"></a>SayHelloServiceImpl</h4><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">SayHelloServiceImpl</span> &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">sayHello</span>(<span class="params">String helloArg</span>)</span>&#123;</span><br><span class="line">                <span class="keyword">if</span>(helloArg.equals(<span class="string">"hello"</span>))&#123;</span><br><span class="line">                        <span class="keyword">return</span> <span class="string">"hello client"</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span>&#123;</span><br><span class="line">                        <span class="keyword">return</span> <span class="string">"bye bye client"</span>;</span><br><span class="line">                &#125;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="u89E3_u6790"><a href="#u89E3_u6790" class="headerlink" title="解析"></a>解析</h3><h4 id="u6D41_u7A0B_u89E3_u6790"><a href="#u6D41_u7A0B_u89E3_u6790" class="headerlink" title="流程解析"></a>流程解析</h4><p>服务器地址：192.168.91.201<br>Server.java, SayHelloService.java, SayHelloServiceImpl.java存储在服务器同一目录内，通过javac将三个文件编译成class文件，然后使用以下命令运行。<br><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">java</span> Server</span><br></pre></td></tr></table></figure></p>
<p>客户端地址：192.168.91.202<br>Client.java, SayHelloService.java存储在客户端同一目录内，通过javac将三个文件编译成class文件，然后使用以下命令运行。<br><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">java</span> Client</span><br></pre></td></tr></table></figure></p>
<p>服务器监听52000端口，接收客户端的请求<br>客户端的端口自动创建，连接服务器192.168.91.201:52000<br>客户端向服务器请求服务，告诉服务器客户端要调用服务器上的哪个接口，接口中对应的方法，以及方法所需要的参数。<br>服务器接收到请求服务后，使用反射机制，通过Method的invoke完成方法的调用，并将调用的结果返回给客户端。</p>
<h4 id="u6CE8_u610F_u7684_u70B9"><a href="#u6CE8_u610F_u7684_u70B9" class="headerlink" title="注意的点"></a>注意的点</h4><p>1：客户端向服务器请求服务时，使用的是接口而不是具体类，这样可以实现松耦合，更具有健壮性。<br>2：服务器使用HashMap将接口与具体类进行匹配，这样从客户端得到的接口名，就可以获得相应具体类来完成服务。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>RPC（Remote Procedure Call Protocol），即远程过程调用协议，是一种通过网络从远程计算机程序上请求服务，而不需要了解底层网络技术协议。基于TCP协议的RPC能够更灵活地对协议字段进行定制，减少网络传输字节数，降低网络开销，提高性能，但需要关注底层复杂的细节，且所定义的协议自身局限性，难以得到平台厂商和开源社区的支持，较难实现跨平台调用。如不同平台的移动终端应用程序，像Android, HTML5, IOS等，需要重新开发不同的工具包来进行请求发送和响应解析，工作量大。另外基于TCP协议的RPC的实现，程序需要考虑多线程并发，锁，I/O等复杂的底层细节现实。<br>]]>
    
    </summary>
    
      <category term="web" scheme="http://jinpingwang.github.io/tags/web/"/>
    
      <category term="web" scheme="http://jinpingwang.github.io/categories/web/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[基于tomcat的web应用安全]]></title>
    <link href="http://jinpingwang.github.io/2016/04/26/web/%E5%9F%BA%E4%BA%8Etomcat%E7%9A%84web%E5%BA%94%E7%94%A8%E5%AE%89%E5%85%A8/"/>
    <id>http://jinpingwang.github.io/2016/04/26/web/基于tomcat的web应用安全/</id>
    <published>2016-04-26T01:55:12.000Z</published>
    <updated>2016-05-24T02:54:39.106Z</updated>
    <content type="html"><![CDATA[<p><img src="http://7xrn7f.com1.z0.glb.clouddn.com/16-5-24/73458577.jpg" alt=""><br>本篇讲解基于tomcat容器下的web应用安全。主要包括四个方面即：认证，授权，机密性以及数据完整性，以及如何在Tomcat下配置SSH/TLS单边，双边认证。<br><a id="more"></a></p>
<h3 id="u8BA4_u8BC1"><a href="#u8BA4_u8BC1" class="headerlink" title="认证"></a>认证</h3><h4 id="u57FA_u672C_uFF08BASIC_uFF09"><a href="#u57FA_u672C_uFF08BASIC_uFF09" class="headerlink" title="基本（BASIC）"></a>基本（BASIC）</h4><p>以一种编码形式（未加密）传输登录信息，由于编码机制（base64）已经广为人知，所以BASIC认证的安全性很弱。</p>
<h5 id="web-xml_u4E2D_u7684_u8BBE_u7F6E"><a href="#web-xml_u4E2D_u7684_u8BBE_u7F6E" class="headerlink" title="web.xml中的设置"></a>web.xml中的设置</h5><figure class="highlight nimrod"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;login-config&gt;</span><br><span class="line">    &lt;auth-<span class="keyword">method</span>&gt;<span class="type">BASIC</span>&lt;/auth-<span class="keyword">method</span>&gt;</span><br><span class="line">&lt;/login-config&gt;</span><br></pre></td></tr></table></figure>
<h5 id="wireshark_u6355_u83B7_u7684_u62A5_u6587"><a href="#wireshark_u6355_u83B7_u7684_u62A5_u6587" class="headerlink" title="wireshark捕获的报文"></a>wireshark捕获的报文</h5><p><img src="http://i3.piimg.com/6569b445c966c286.jpg" alt=""></p>
<h4 id="u6458_u8981_uFF08DIGEST_uFF09"><a href="#u6458_u8981_uFF08DIGEST_uFF09" class="headerlink" title="摘要（DIGEST）"></a>摘要（DIGEST）</h4><h5 id="web-xml_u4E2D_u7684_u8BBE_u7F6E-1"><a href="#web-xml_u4E2D_u7684_u8BBE_u7F6E-1" class="headerlink" title="web.xml中的设置"></a>web.xml中的设置</h5><p>相比BASIC认证安全<br><figure class="highlight nimrod"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;login-config&gt;</span><br><span class="line">    &lt;auth-<span class="keyword">method</span>&gt;<span class="type">DIGEST</span>&lt;/auth-<span class="keyword">method</span>&gt;</span><br><span class="line">&lt;/login-config&gt;</span><br></pre></td></tr></table></figure></p>
<h5 id="wireshark_u6355_u83B7_u7684_u62A5_u6587-1"><a href="#wireshark_u6355_u83B7_u7684_u62A5_u6587-1" class="headerlink" title="wireshark捕获的报文"></a>wireshark捕获的报文</h5><p><img src="http://i4.piimg.com/b8cf46e871351950.jpg" alt=""></p>
<h4 id="u5BA2_u6237_u8BC1_u4E66_uFF08CLIENT-CERT_uFF09"><a href="#u5BA2_u6237_u8BC1_u4E66_uFF08CLIENT-CERT_uFF09" class="headerlink" title="客户证书（CLIENT-CERT）"></a>客户证书（CLIENT-CERT）</h4><p>以一种非常安全的形式传输登录信息，它使用了公共密钥证书（PKC），缺点是客户必须先有一个证书才能登录系统，但客户很少有证书。<br><figure class="highlight nimrod"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;login-config&gt;</span><br><span class="line">    &lt;auth-<span class="keyword">method</span>&gt;<span class="type">CLIENT</span>-<span class="type">CERT</span>&lt;/auth-<span class="keyword">method</span>&gt;</span><br><span class="line">&lt;/login-config&gt;</span><br></pre></td></tr></table></figure></p>
<h4 id="u8868_u5355_uFF08FORM_uFF09"><a href="#u8868_u5355_uFF08FORM_uFF09" class="headerlink" title="表单（FORM）"></a>表单（FORM）</h4><p>可以利用合法的HTML建立自己的定制登录表单，但是这种认证是以最不安全的方式传输，因为用户名和口令都在HTTP请求中发回，而且未经加密。</p>
<h5 id="DD_u4E2D_u7684_u914D_u7F6E"><a href="#DD_u4E2D_u7684_u914D_u7F6E" class="headerlink" title="DD中的配置"></a>DD中的配置</h5><figure class="highlight nimrod"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;login-config&gt;</span><br><span class="line">    &lt;auth-<span class="keyword">method</span>&gt;<span class="type">FORM</span>&lt;/auth-<span class="keyword">method</span>&gt;</span><br><span class="line">    &lt;form-login-config&gt;</span><br><span class="line">        &lt;form-login-page&gt;/loginPage.html&lt;/form-login-page&gt;</span><br><span class="line">        &lt;form-error-page&gt;/loginError.html&lt;/form-error-page&gt;</span><br><span class="line">    &lt;/form-login-config&gt;</span><br><span class="line">&lt;/login-config&gt;</span><br></pre></td></tr></table></figure>
<h5 id="loginPage-html"><a href="#loginPage-html" class="headerlink" title="loginPage.html"></a>loginPage.html</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">head</span>&gt;</span><span class="tag">&lt;/<span class="title">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">body</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- html登录表单的action必须是j_security_check --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">form</span> <span class="attribute">method</span>=<span class="value">"POST"</span> <span class="attribute">action</span>=<span class="value">"j_security_check"</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 容器要求http请求分别把用户名与密码存储在j_username与j_password中 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="title">input</span> <span class="attribute">type</span>=<span class="value">"text"</span> <span class="attribute">name</span>=<span class="value">"j_username"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="title">input</span> <span class="attribute">type</span>=<span class="value">"password"</span> <span class="attribute">name</span>=<span class="value">"j_password"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="title">input</span> <span class="attribute">type</span>=<span class="value">"submit"</span> <span class="attribute">value</span>=<span class="value">"Enter"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="title">form</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="title">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h5 id="loginError-html"><a href="#loginError-html" class="headerlink" title="loginError.html"></a>loginError.html</h5><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;html&gt;</span></span><br><span class="line">    <span class="tag">&lt;head&gt;</span><span class="tag">&lt;/head&gt;</span></span><br><span class="line">    <span class="tag">&lt;body&gt;</span></span><br><span class="line">        <span class="keyword">Sorry</span>, wrong password</span><br><span class="line">    <span class="tag">&lt;/body&gt;</span></span><br><span class="line"><span class="tag">&lt;/html&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="u56DB_u79CD_u8BA4_u8BC1_u5BF9_u6BD4"><a href="#u56DB_u79CD_u8BA4_u8BC1_u5BF9_u6BD4" class="headerlink" title="四种认证对比"></a>四种认证对比</h4><table>
<thead>
<tr>
<th style="text-align:center">类型</th>
<th style="text-align:center">规范</th>
<th style="text-align:center">数据完整性</th>
<th style="text-align:center">注释</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">BASIC</td>
<td style="text-align:center">HTTP</td>
<td style="text-align:center">Base64-弱</td>
<td style="text-align:center">HTTP标准，所有浏览器都支持</td>
</tr>
<tr>
<td style="text-align:center">DIGEST</td>
<td style="text-align:center">HTTP</td>
<td style="text-align:center">强一些-但不是SSL</td>
<td style="text-align:center">对于HTTP和J2EE容器是可选的</td>
</tr>
<tr>
<td style="text-align:center">FORM</td>
<td style="text-align:center">J2EE</td>
<td style="text-align:center">非常弱，没有加密</td>
<td style="text-align:center">允许有定制的登录屏幕</td>
</tr>
<tr>
<td style="text-align:center">CLIENT-CERT</td>
<td style="text-align:center">j2EE</td>
<td style="text-align:center">强-公共密钥（PKC）</td>
<td style="text-align:center">很强，但是用户必须有证书</td>
</tr>
</tbody>
</table>
<h4 id="u8BA4_u8BC1_u7684_u4F18_u70B9"><a href="#u8BA4_u8BC1_u7684_u4F18_u70B9" class="headerlink" title="认证的优点"></a>认证的优点</h4><p>代码中不要有安全信息，大多数web应用的安全约束都应该以声明方式处理，即在部署描述文件中指定<br>1：能自然地映射到公司IT部门现在的任务角色。<br>2：可以用更灵活的方式使用以前写的servlet<br>3：允许应用开发人员重用servlet，而是不用纠缠源代码<br>4：随着应用的扩展，可以减少可能的维护<br>5：支持基于组件的开发思想</p>
<h3 id="u6388_u6743"><a href="#u6388_u6743" class="headerlink" title="授权"></a>授权</h3><h4 id="u5B9A_u4E49_u89D2_u8272"><a href="#u5B9A_u4E49_u89D2_u8272" class="headerlink" title="定义角色"></a>定义角色</h4><h5 id="u4FEE_u6539_24TOMCAT_HOME/conf/tomcat-users-xml"><a href="#u4FEE_u6539_24TOMCAT_HOME/conf/tomcat-users-xml" class="headerlink" title="修改$TOMCAT_HOME/conf/tomcat-users.xml"></a>修改$TOMCAT_HOME/conf/tomcat-users.xml</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">tomcat-users</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 角色 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">role</span> <span class="attribute">rolename</span>=<span class="value">"Guest"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">role</span> <span class="attribute">rolename</span>=<span class="value">"Member"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">role</span> <span class="attribute">rolename</span>=<span class="value">"Admin"</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 用户，一个用户可以有多个角色 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">user</span> <span class="attribute">username</span>=<span class="value">"Bill"</span> <span class="attribute">password</span>=<span class="value">"coder"</span> <span class="attribute">roles</span>=<span class="value">"Member, Guest"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">tomcat-users</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h5 id="web-xml_u4E2D_u6DFB_u52A0_u6388_u6743"><a href="#web-xml_u4E2D_u6DFB_u52A0_u6388_u6743" class="headerlink" title="web.xml中添加授权"></a>web.xml中添加授权</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">security-role</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">role-name</span>&gt;</span>Guest<span class="tag">&lt;/<span class="title">role-name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">security-role</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">security-role</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">role-name</span>&gt;</span>Member<span class="tag">&lt;/<span class="title">role-name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">security-role</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">security-role</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">role-name</span>&gt;</span>Admin<span class="tag">&lt;/<span class="title">role-name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">security-role</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="u5B9A_u4E49_u8D44_u6E90/_u65B9_u6CD5_u7EA6_u675F"><a href="#u5B9A_u4E49_u8D44_u6E90/_u65B9_u6CD5_u7EA6_u675F" class="headerlink" title="定义资源/方法约束"></a>定义资源/方法约束</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- security-constraint中有三个子元素。可以读作：只有Admin, Member可以对/Beer/AddRecipe目录中找到的资源完成POST请求，而且确保传输是安全的。那些没有指定的方法表示，所有人都可以请求这些方法 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">security-constraint</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 告诉容器哪些资源和HTTP方法组合要以某种方式受约束，即只能由相应auth-constraint标记中的角色访问 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">web-resource-collection</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">web-resource-name</span>&gt;</span>UpdateRecipes<span class="tag">&lt;/<span class="title">web-resource-name</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 定义要资源 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">url-pattern</span>&gt;</span>/Beer/AddRecipe/*<span class="tag">&lt;/<span class="title">url-pattern</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 指定哪些HTTP方法是受约束的，即约束建立在HTTP请求层次上的，资源本身并没有约束，如果没有指定方法那么所有方法都是受约束的 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">http-method</span>&gt;</span>Get<span class="tag">&lt;/<span class="title">http-method</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">http-method</span>&gt;</span>Post<span class="tag">&lt;/<span class="title">http-method</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="title">web-resource-collection</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- 定义了哪此角色（注意不是用户）能在URL模式所指定资源上调用受约束的HTTP方法 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">auth-constraint</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 如果这里为空，则表示任何角色都不可访问。如果为&lt;role-name&gt;*&lt;/role-name&gt;则表示都可以。 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">role-name</span>&gt;</span>Admin<span class="tag">&lt;/<span class="title">role-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">role-name</span>&gt;</span>Member<span class="tag">&lt;/<span class="title">role-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">auth-constraint</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- 定义了是否启用HTTPS --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">user-data-constraint</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">transport-guarantee</span>&gt;</span>CONFIDENTIAL<span class="tag">&lt;/<span class="title">transport-guarantee</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="title">user-data-constraint</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">security-constraint</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="u673A_u5BC6_u6027_u4E0E_u6570_u636E_u5B8C_u6574_u6027"><a href="#u673A_u5BC6_u6027_u4E0E_u6570_u636E_u5B8C_u6574_u6027" class="headerlink" title="机密性与数据完整性"></a>机密性与数据完整性</h3><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">/<span class="keyword">*</span><span class="keyword">*</span></span><br><span class="line"> <span class="keyword">*</span> 在security-constraint中添加以下内容，</span><br><span class="line"> <span class="keyword">*</span> 则在访问受限资源时就要启动https功能</span><br><span class="line"> <span class="keyword">*</span>/</span><br><span class="line"><span class="variable">&lt;security-constraint&gt;</span></span><br><span class="line">    <span class="variable">&lt;user-data-constraint&gt;</span></span><br><span class="line">        <span class="variable">&lt;transport-guarantee&gt;</span>CONFIDENTIAL<span class="variable">&lt;/transport-guarantee&gt;</span></span><br><span class="line">    <span class="variable">&lt;/user-data-constraint&gt;</span></span><br><span class="line"><span class="variable">&lt;/security-constraint&gt;</span></span><br></pre></td></tr></table></figure>
<p>需要说明一点，认证与机密性数据完整性没有具体的联系。认证只是负责谁可以访问受限资源，而机密性数据完整性是用于传输的内容安全保障。</p>
<h3 id="tomcat_u4E0B_u914D_u5236SSL/TLS"><a href="#tomcat_u4E0B_u914D_u5236SSL/TLS" class="headerlink" title="tomcat下配制SSL/TLS"></a>tomcat下配制SSL/TLS</h3><h4 id="u670D_u52A1_u5668_u8BC1_u4E66"><a href="#u670D_u52A1_u5668_u8BC1_u4E66" class="headerlink" title="服务器证书"></a>服务器证书</h4><h5 id="u547D_u4EE4_uFF1A"><a href="#u547D_u4EE4_uFF1A" class="headerlink" title="命令："></a>命令：</h5><p>keytool -genkey -keyalg RSA -alias tomcat -dname “CN=102.168.91.200” -keystore /app/tomcat/key/tomcat.keystore -validity 36500 -storepass 123456</p>
<h5 id="u53C2_u6570_u89E3_u91CA"><a href="#u53C2_u6570_u89E3_u91CA" class="headerlink" title="参数解释"></a>参数解释</h5><p>genkey：表示要生成新的密钥库<br>keyalg：表示密钥生成的算法<br>alias：表示别名<br>dname：写服务器的相关信息，其中CN(cn)表示域名或IP地址<br>keystore：密钥库存储的位置<br>storepass：密钥库的密码（如果没有些参数，后面生成时会提示输入）</p>
<h4 id="u670D_u52A1_u5668_u8BC1_u4E66_u5BFC_u51FA_u6210CER_u6587_u4EF6_uFF0C_u5BFC_u5165_u5BA2_u6237_u7AEF_u4E2D_u6210_u4E3A_u53EF_u4FE1_u4EFB_u8BC1_u4E66"><a href="#u670D_u52A1_u5668_u8BC1_u4E66_u5BFC_u51FA_u6210CER_u6587_u4EF6_uFF0C_u5BFC_u5165_u5BA2_u6237_u7AEF_u4E2D_u6210_u4E3A_u53EF_u4FE1_u4EFB_u8BC1_u4E66" class="headerlink" title="服务器证书导出成CER文件，导入客户端中成为可信任证书"></a>服务器证书导出成CER文件，导入客户端中成为可信任证书</h4><h5 id="u547D_u4EE4"><a href="#u547D_u4EE4" class="headerlink" title="命令"></a>命令</h5><p>keytool -keystore /app/tomcat/key/tomcat.keystore -export -alias tomcat -file /app/tomcat/key/tomcat.cer </p>
<h4 id="u5BA2_u6237_u7AEF_u8BC1_u4E66"><a href="#u5BA2_u6237_u7AEF_u8BC1_u4E66" class="headerlink" title="客户端证书"></a>客户端证书</h4><h5 id="u547D_u4EE4-1"><a href="#u547D_u4EE4-1" class="headerlink" title="命令"></a>命令</h5><p>keytool -genkey -v -alias mykey -keyalg RSA -storetype PKCS12 -keystore ./mykey.p12</p>
<h5 id="u53C2_u6570_u89E3_u91CA-1"><a href="#u53C2_u6570_u89E3_u91CA-1" class="headerlink" title="参数解释"></a>参数解释</h5><p>storetype :为了使证书能导入浏览器中，证书的格式设置成PKCS12。</p>
<h4 id="u670D_u52A1_u5668_u4FE1_u4EFB_u5BA2_u6237_u7AEF_u8BC1_u4E66"><a href="#u670D_u52A1_u5668_u4FE1_u4EFB_u5BA2_u6237_u7AEF_u8BC1_u4E66" class="headerlink" title="服务器信任客户端证书"></a>服务器信任客户端证书</h4><h5 id="u5148_u5C06_u5BA2_u6237_u7AEF_u8BC1_u4E66_u8F6C_u6210-cer"><a href="#u5148_u5C06_u5BA2_u6237_u7AEF_u8BC1_u4E66_u8F6C_u6210-cer" class="headerlink" title="先将客户端证书转成.cer"></a>先将客户端证书转成.cer</h5><p>keytool -export -alias mykey -keystore ./mykey.p12 -storetype PKCS12 -rfc -file ./mykey.cer</p>
<h5 id="u5C06_u5BA2_u6237_u7AEF_u7684-cer_u683C_u5F0F_u6DFB_u52A0_u5230tomcat-keystore"><a href="#u5C06_u5BA2_u6237_u7AEF_u7684-cer_u683C_u5F0F_u6DFB_u52A0_u5230tomcat-keystore" class="headerlink" title="将客户端的.cer格式添加到tomcat.keystore"></a>将客户端的.cer格式添加到tomcat.keystore</h5><p>keytool -import -v -file mykey.cer -keystore ./tomcat.keystore</p>
<h5 id="u67E5_u770Btomcat-keystore_u4E2D_u5305_u542B_u4E86_u51E0_u4E2A_u8BC1_u4E66"><a href="#u67E5_u770Btomcat-keystore_u4E2D_u5305_u542B_u4E86_u51E0_u4E2A_u8BC1_u4E66" class="headerlink" title="查看tomcat.keystore中包含了几个证书"></a>查看tomcat.keystore中包含了几个证书</h5><p>keytool -list -keystore ./tomcat.keystore</p>
]]></content>
    <summary type="html">
    <![CDATA[<p><img src="http://7xrn7f.com1.z0.glb.clouddn.com/16-5-24/73458577.jpg" alt=""><br>本篇讲解基于tomcat容器下的web应用安全。主要包括四个方面即：认证，授权，机密性以及数据完整性，以及如何在Tomcat下配置SSH/TLS单边，双边认证。<br>]]>
    
    </summary>
    
      <category term="tomcat" scheme="http://jinpingwang.github.io/tags/tomcat/"/>
    
      <category term="web" scheme="http://jinpingwang.github.io/tags/web/"/>
    
      <category term="web安全" scheme="http://jinpingwang.github.io/tags/web%E5%AE%89%E5%85%A8/"/>
    
      <category term="web" scheme="http://jinpingwang.github.io/categories/web/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[基于贝叶斯的2-Gram中文分词]]></title>
    <link href="http://jinpingwang.github.io/2016/04/25/nlp/3:%E5%9F%BA%E4%BA%8E%E8%B4%9D%E5%8F%B6%E6%96%AF%E7%9A%842-Gram%E4%B8%AD%E6%96%87%E5%88%86%E8%AF%8D/"/>
    <id>http://jinpingwang.github.io/2016/04/25/nlp/3:基于贝叶斯的2-Gram中文分词/</id>
    <published>2016-04-25T02:41:56.000Z</published>
    <updated>2016-05-12T14:05:11.545Z</updated>
    <content type="html"><![CDATA[<p>介绍了基于贝叶斯的2-Gram分词方法（可以与另外两篇机械分词器相比对：<a href="http://blog.wangjinping.top/2016/01/02/nlp/1:%E6%AD%A3%E5%90%91%E6%9C%80%E9%95%BF%E5%8C%B9%E9%85%8D%E4%B8%AD%E5%88%86%E8%AF%8D/" target="_blank" rel="external">正向最长匹配</a> 和 <a href="http://blog.wangjinping.top/2016/01/02/nlp/2:%E5%8F%8D%E5%90%91%E6%9C%80%E9%95%BF%E5%8C%B9%E9%85%8D%E4%B8%AD%E5%88%86%E8%AF%8D/" target="_blank" rel="external">反向最长匹配</a>）。</p>
<h3 id="u95EE_u9898"><a href="#u95EE_u9898" class="headerlink" title="问题"></a>问题</h3><p>1：输入语料库词频<br>2：输入”上网站联盟”<br>3：输出分词结果</p>
<h3 id="u89E3_u51B3_u63CF_u8FF0"><a href="#u89E3_u51B3_u63CF_u8FF0" class="headerlink" title="解决描述"></a>解决描述</h3><p>1：一个n+1个字的句子，它的分词方法有：2的n次方。比如：”上网站”，可以分词为：上/网/站，上/网站，上网/站，上网站。<br>2：按照每一种分词，根据语料库中的词频统计，利用贝叶斯计算出这种分词下的概率；比如，上，网，站这三个字独自出现的概率为1000，上出现在网站前的词频为200，词表中有10000个词，那么按照贝叶斯公式可计算出”上/网站”这种分词的概率为：p(上网站)=p(上)*p(网站|上)=(1000/10000)*(200/10000)=0.002；同理按贝叶斯公式可计算出”上/网/站”这种分词的概率为：p(上网站)=p(上)*p(网)*p(站)=(1000/10000)*(1000/10000)*(1000/10000)=0.001。因为0.002&gt;0.001，所以，分词”上/网站”要优于”上/网/站”。<br>3：对所有分词的情况都计算出它的概率，取概率最大的那个分词方式，即为该句子的分词方式。<br><a id="more"></a></p>
<h3 id="u8BED_u6599_u5E93_u8BCD_u9891"><a href="#u8BED_u6599_u5E93_u8BCD_u9891" class="headerlink" title="语料库词频"></a>语料库词频</h3><table>
<thead>
<tr>
<th>项目</th>
<th style="text-align:right">上</th>
<th style="text-align:center">网</th>
<th>站</th>
<th>联</th>
<th>盟</th>
<th>上网</th>
<th>网站</th>
<th>站联</th>
<th>联盟</th>
<th>上网站</th>
<th>网站联</th>
<th>站联盟</th>
<th>上网站联</th>
<th>网站联盟</th>
<th>上网站联盟</th>
</tr>
</thead>
<tbody>
<tr>
<td>上</td>
<td style="text-align:right">1000</td>
<td style="text-align:center">100</td>
<td></td>
<td></td>
<td></td>
<td></td>
<td>160</td>
<td></td>
<td></td>
<td></td>
<td>3</td>
<td></td>
<td></td>
<td>140</td>
<td></td>
</tr>
<tr>
<td>网</td>
<td style="text-align:right"></td>
<td style="text-align:center">1000</td>
<td>130</td>
<td></td>
<td></td>
<td></td>
<td></td>
<td>3</td>
<td></td>
<td></td>
<td></td>
<td>4</td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>站</td>
<td style="text-align:right"></td>
<td style="text-align:center"></td>
<td>1000</td>
<td>4</td>
<td></td>
<td></td>
<td></td>
<td></td>
<td>6</td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>联</td>
<td style="text-align:right"></td>
<td style="text-align:center"></td>
<td></td>
<td>1000</td>
<td>190</td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>盟</td>
<td style="text-align:right"></td>
<td style="text-align:center"></td>
<td></td>
<td></td>
<td>1000</td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>上网</td>
<td style="text-align:right"></td>
<td style="text-align:center"></td>
<td>5</td>
<td></td>
<td></td>
<td>4000</td>
<td></td>
<td>4</td>
<td></td>
<td></td>
<td></td>
<td>7</td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>网站</td>
<td style="text-align:right"></td>
<td style="text-align:center"></td>
<td></td>
<td>3</td>
<td></td>
<td></td>
<td>6000</td>
<td></td>
<td>800</td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>站联</td>
<td style="text-align:right"></td>
<td style="text-align:center"></td>
<td></td>
<td></td>
<td>2</td>
<td></td>
<td></td>
<td>2</td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>联盟</td>
<td style="text-align:right"></td>
<td style="text-align:center"></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td>1100</td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>上网站</td>
<td style="text-align:right"></td>
<td style="text-align:center"></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td>500</td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>网站联</td>
<td style="text-align:right"></td>
<td style="text-align:center"></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td>2</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>站联盟</td>
<td style="text-align:right"></td>
<td style="text-align:center"></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td>3</td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>上网站联</td>
<td style="text-align:right"></td>
<td style="text-align:center"></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td>1</td>
<td></td>
<td></td>
</tr>
<tr>
<td>网站联盟</td>
<td style="text-align:right"></td>
<td style="text-align:center"></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td>1200</td>
<td></td>
</tr>
<tr>
<td>上网站联盟</td>
<td style="text-align:right"></td>
<td style="text-align:center"></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td>2</td>
</tr>
</tbody>
</table>
<p>假设词表有10000个词，可以计算出p(上网站联盟)=p(上)*p(网站联盟/上)=(100/10000)*(1400/10000)=0.0014，是所有分词中概率最大的。<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">分词结果：上/网站联盟</span><br></pre></td></tr></table></figure></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>介绍了基于贝叶斯的2-Gram分词方法（可以与另外两篇机械分词器相比对：<a href="http://blog.wangjinping.top/2016/01/02/nlp/1:%E6%AD%A3%E5%90%91%E6%9C%80%E9%95%BF%E5%8C%B9%E9%85%8D%E4%B8%AD%E5%88%86%E8%AF%8D/">正向最长匹配</a> 和 <a href="http://blog.wangjinping.top/2016/01/02/nlp/2:%E5%8F%8D%E5%90%91%E6%9C%80%E9%95%BF%E5%8C%B9%E9%85%8D%E4%B8%AD%E5%88%86%E8%AF%8D/">反向最长匹配</a>）。</p>
<h3 id="u95EE_u9898"><a href="#u95EE_u9898" class="headerlink" title="问题"></a>问题</h3><p>1：输入语料库词频<br>2：输入”上网站联盟”<br>3：输出分词结果</p>
<h3 id="u89E3_u51B3_u63CF_u8FF0"><a href="#u89E3_u51B3_u63CF_u8FF0" class="headerlink" title="解决描述"></a>解决描述</h3><p>1：一个n+1个字的句子，它的分词方法有：2的n次方。比如：”上网站”，可以分词为：上/网/站，上/网站，上网/站，上网站。<br>2：按照每一种分词，根据语料库中的词频统计，利用贝叶斯计算出这种分词下的概率；比如，上，网，站这三个字独自出现的概率为1000，上出现在网站前的词频为200，词表中有10000个词，那么按照贝叶斯公式可计算出”上/网站”这种分词的概率为：p(上网站)=p(上)*p(网站|上)=(1000/10000)*(200/10000)=0.002；同理按贝叶斯公式可计算出”上/网/站”这种分词的概率为：p(上网站)=p(上)*p(网)*p(站)=(1000/10000)*(1000/10000)*(1000/10000)=0.001。因为0.002&gt;0.001，所以，分词”上/网站”要优于”上/网/站”。<br>3：对所有分词的情况都计算出它的概率，取概率最大的那个分词方式，即为该句子的分词方式。<br>]]>
    
    </summary>
    
      <category term="NLP" scheme="http://jinpingwang.github.io/tags/NLP/"/>
    
      <category term="自然语言处理" scheme="http://jinpingwang.github.io/tags/%E8%87%AA%E7%84%B6%E8%AF%AD%E8%A8%80%E5%A4%84%E7%90%86/"/>
    
      <category term="自然语言处理" scheme="http://jinpingwang.github.io/categories/%E8%87%AA%E7%84%B6%E8%AF%AD%E8%A8%80%E5%A4%84%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[红黑树：一棵神奇的二叉搜索树]]></title>
    <link href="http://jinpingwang.github.io/2016/04/25/interview/%E7%BA%A2%E9%BB%91%E6%A0%91%EF%BC%9A%E4%B8%80%E6%A3%B5%E7%A5%9E%E5%A5%87%E7%9A%84%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91/"/>
    <id>http://jinpingwang.github.io/2016/04/25/interview/红黑树：一棵神奇的二叉搜索树/</id>
    <published>2016-04-25T00:36:27.000Z</published>
    <updated>2016-05-21T11:03:44.592Z</updated>
    <content type="html"><![CDATA[<p><div align="center"><img src="http://hi.csdn.net/attachment/201012/29/8394323_129361793372ZK.png"></div><br>红黑数树是一棵特殊的二叉搜索树，可以保证没有一条路径会比其他路径长出2倍，即有n个点的红黑树高度至多为2lg(n+1)，因而是近似于平衡的。红黑树在操作系统内核以及TreeMap都有广泛的应用，本文先简要介绍二叉搜索树的插入与删除，由此基础上引入红黑树的插入与删除。<br><a id="more"></a></p>
<h3 id="u6EE1_u4E8C_u53C9_u6811"><a href="#u6EE1_u4E8C_u53C9_u6811" class="headerlink" title="满二叉树"></a>满二叉树</h3><p>除了最后一层无叶子结点多，其它层的每个结点都有两个子结点。</p>
<h3 id="u5B8C_u5168_u4E8C_u53C9_u6811"><a href="#u5B8C_u5168_u4E8C_u53C9_u6811" class="headerlink" title="完全二叉树"></a>完全二叉树</h3><p>假设树高为h，则第1层到第(h-1)层是一棵满足(h-1)层的满二叉树，第h层中的所有结点都集中连续排在最左边。</p>
<h3 id="u4E8C_u53C9_u641C_u7D22_u6811"><a href="#u4E8C_u53C9_u641C_u7D22_u6811" class="headerlink" title="二叉搜索树"></a>二叉搜索树</h3><h4 id="u63D2_u5165"><a href="#u63D2_u5165" class="headerlink" title="插入"></a>插入</h4><p>最终插入的位置都是叶子结点位置</p>
<h4 id="u5220_u9664"><a href="#u5220_u9664" class="headerlink" title="删除"></a>删除</h4><p>1：如果删除的点为叶子结点，则直接删除<br>2：如果删除的点只有一个左结点或只有一个右结点，则用左结点或右结点代替结点的位置。<br>3：如果删除的点同时有左右孩子，则让右子树中的最小结点（即最左节点，如果这个最左结点有右孩子，则让最左结点的父亲连接最左结点的右孩子）来替换结点。【第3步中的另一各思想（不直接将结点删除，而是通过将新结点的值赋值到删除结点，这样就相当于将删除结点删除）：删除的点为D, D的直接后继为E（直接后继是指按中序遍历排在D后的第一个数），则直接将D的内容设置为E的内容，然后对E进行TRANSPLANT删除操作，其中u为E, v为E.right。】<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">TRANSPLANT</span>(<span class="type">T</span>, u, v)&#123;</span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 如果只有三个结点A, B, C, 其中B, C为A的孩子结点。则如果u=A, v=C</span><br><span class="line">     * 则变成根为C，这里C并没有将A的左子树B绑定到C的左子树中</span><br><span class="line">     * 而是在TREE-DELETE(T, z)中的</span><br><span class="line">     * y.left = z.left</span><br><span class="line">     * y.left.p = y</span><br><span class="line">     * 这两行进行将B绑定到C的左子树中</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">if</span> u.p == <span class="type">NIL</span></span><br><span class="line">        <span class="type">T</span>.root = v</span><br><span class="line">    elseif u == u.p.<span class="keyword">left</span></span><br><span class="line">        u.p.<span class="keyword">left</span> = v</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        u.p.<span class="keyword">right</span> = v</span><br><span class="line">    <span class="keyword">if</span>(v != <span class="type">NIL</span>)</span><br><span class="line">        v.p = u.p</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">TREE</span>-<span class="type">DELETE</span>(<span class="type">T</span>, z)&#123;</span><br><span class="line">    <span class="keyword">if</span>(z.<span class="keyword">left</span> == <span class="type">NIL</span>)</span><br><span class="line">        <span class="type">TRANSPLANT</span>(<span class="type">T</span>, z, z.<span class="keyword">right</span>)</span><br><span class="line">    elseif(z.<span class="keyword">right</span> == <span class="type">NIL</span>)</span><br><span class="line">        <span class="type">TRANSPLANT</span>(<span class="type">T</span>, z, z.<span class="keyword">left</span>)</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="comment">//也可以是TREE-MAXMUM(z.left), 只不过后面要进行相应的变换。</span></span><br><span class="line">        <span class="comment">//这里得到的y一定是没有左子树的，所以后面的if就没有考虑y.left的情况</span></span><br><span class="line">        y = <span class="type">TREE</span>-<span class="type">MINIMUM</span>(z.<span class="keyword">right</span>)</span><br><span class="line">        <span class="comment">//y不是z的右结点情况</span></span><br><span class="line">        <span class="keyword">if</span>(y.p != z)</span><br><span class="line">            <span class="comment">//要让y的右子树（y.right）绑定到y的父结点的左子树（y.p.left）</span></span><br><span class="line">            <span class="type">TRANSPLANT</span>(<span class="type">T</span>, y, y.<span class="keyword">right</span>)</span><br><span class="line">            <span class="comment">//然后再让删除结点的右子树绑定到y的右子树</span></span><br><span class="line">            <span class="comment">//再将z的右子树的父结点设置为y</span></span><br><span class="line">            y.<span class="keyword">right</span> = z.<span class="keyword">right</span>;</span><br><span class="line">            y.<span class="keyword">right</span>.p = y</span><br><span class="line">        <span class="comment">//将y绑定到z父结点的右子树</span></span><br><span class="line">        <span class="type">TRANSPLANT</span>(<span class="type">T</span>, z, y)</span><br><span class="line">        <span class="comment">//将z的左结点绑定到y, 将z左结点的双亲设置为y</span></span><br><span class="line">        y.<span class="keyword">left</span> = z.<span class="keyword">left</span></span><br><span class="line">        y.<span class="keyword">left</span>.p = y</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="u7EA2_u9ED1_u6811"><a href="#u7EA2_u9ED1_u6811" class="headerlink" title="红黑树"></a>红黑树</h3><h4 id="u5E94_u7528"><a href="#u5E94_u7528" class="headerlink" title="应用"></a>应用</h4><p>vm_area_struct（是虚拟内存管理的最基本单元）<br>java中的TreeMap（得到的结果是经过排序的，根据key值排序）</p>
<h4 id="u5C5E_u6027"><a href="#u5C5E_u6027" class="headerlink" title="属性"></a>属性</h4><p>color：红或黑<br>key：关键字<br>left：指向左子树<br>right：指向右子树<br>p：指向父结点</p>
<h4 id="u6027_u8D28"><a href="#u6027_u8D28" class="headerlink" title="性质"></a>性质</h4><p>1：首先是一个二叉搜索树<br>2：每个结点不是红色就是黑色<br>3：根结点是黑色<br>4：所有叶子结点(NIL)是黑色<br>5：红色结点的左右子结点为黑色<br>6：任意一个结点，从这个结点到其后代的叶子结点的路径中，每一条路径上包含的黑色结点数目相同</p>
<h4 id="u63D2_u5165-1"><a href="#u63D2_u5165-1" class="headerlink" title="插入"></a>插入</h4><p>插入过程中会破坏红黑树中的性质3与性质5。以下插入过程步骤：<br>1：按二叉搜索树插入该点，并将该点标记为红色。该插入的点肯定是在最后一层，即”叶子结点”上（红黑中的的叶子结点是NIL，即刚插入的点的左右子树连接NIL）。<br>2：如果插入点是根结点（即一开始是空树），则直接将红色改为黑色即可。<br>3：如果插入点的父结点是黑色，则不用处理。<br>4：如果插入点的父结点是红色且插入点是父结点的左子树，且叔结点为红色，则将父结点与叔结点改为黑色，爷结点改为红色。<br><img src="http://hi.csdn.net/attachment/201012/29/8394323_129361793372ZK.png" alt="cmd-markdown-logo"><img src="http://hi.csdn.net/attachment/201012/29/8394323_1293617934U9zr.png" alt="cmd-markdown-logo"><br>5：如果插入点的父结点是红色且插入点是父结点的右子树，且叔结点为红色，处理情况同4。<br><img src="http://i2.piimg.com/4564064fdc8ca980.jpg" alt="cmd-markdown-logo"><img src="http://i4.piimg.com/1a94c4e84b3ccf41.jpg" alt="cmd-markdown-logo"></p>
<p>6：如果插入点的父结点是红色且插入点是父结点的左子树，且叔结点为黑色，<font color="red">则父结点改为黑色，爷结点改为红色</font>，并将父结点，爷结点进行右旋转，爷结点的左子树为父结点的右子树。<br><img src="http://i2.piimg.com/3259a5eb97a01f0d.png" alt="cmd-markdown-logo"><img src="http://i2.piimg.com/3156521b2cecbcc4.png" alt="cmd-markdown-logo"><br>7：如果插入点的父结点是红色且插入点是父结点的右子树，且叔结点为黑色，则结点，父结点进行左旋转，父结点的右子树为结点的左子树。<br><img src="http://i2.piimg.com/0b40e366ca416e97.png" alt="cmd-markdown-logo"><img src="http://i2.piimg.com/913e986ccc80628a.png" alt="cmd-markdown-logo"></p>
<h4 id="u5220_u9664-1"><a href="#u5220_u9664-1" class="headerlink" title="删除"></a>删除</h4><h5 id="z_u6CA1_u6709_u5B69_u5B50_u7ED3_u70B9"><a href="#z_u6CA1_u6709_u5B69_u5B50_u7ED3_u70B9" class="headerlink" title="z没有孩子结点"></a>z没有孩子结点</h5><p>1：如果z为红色，则直接删除z<br>2：如果z为黑色，则需要根据z的父结点，z的兄弟相应情况进行调整</p>
<h5 id="z_u6709_u4E00_u4E2A_u5B69_u5B50_u7ED3_u70B9"><a href="#z_u6709_u4E00_u4E2A_u5B69_u5B50_u7ED3_u70B9" class="headerlink" title="z有一个孩子结点"></a>z有一个孩子结点</h5><p>1：如果z为黑色，则孩子结点一定为红色（因为如果孩子结点为黑色，则z另一个空的分析上的黑色点个数与这个分枝上黑色点个数就不相等了）。则将z的孩子结点绑定到父结点上，并将z的孩子结点的颜色改成黑色。<br>（如果z为红色，则孩子结点一定都为空，所以z为红色的情况下不可能只有一个孩子结点。情况不成立。）</p>
<h5 id="z_u6709_u4E24_u4E2A_u5B69_u5B50_u7ED3_u70B9"><a href="#z_u6709_u4E24_u4E2A_u5B69_u5B50_u7ED3_u70B9" class="headerlink" title="z有两个孩子结点"></a>z有两个孩子结点</h5><p>可以不直接删除点为z,而是间接的删除z。y为z的直接后继。将y与z的值进行交换（只交换值，颜色还是原来自己的颜色，这样红黑树原来的性质没有改变，将原来是要删除z结点，变成是要删除y结点）。可知y最多只能有一个孩子结点（y是z右子树中最小的点）。<br>1：y没有孩子结点<br>1.1：如果y为红色，则直接删除y<br>1.2：如果y为黑色，则删除时违反了结点到其所有叶子结点路径中黑色结点个数要相等的性质。所以要根据父结点，兄弟结点的颜色对红黑树进行调整。<br>2：y有一个孩子结点<br>2.1：如果y为黑色，则孩子结点一定为红色，则可以删除y，并将y的孩子结点颜色改成黑色，然后绑定到y的父结点。<br>（y为红色的情况下不可能有一个孩子结点。情况不成立。）</p>
<h4 id="u5E94_u7528_u4E2D_u4F7F_u7528_u7EA2_u9ED1_u6811_u800C_u975E_u5E73_u8861_u4E8C_u53C9_u6811_u539F_u56E0"><a href="#u5E94_u7528_u4E2D_u4F7F_u7528_u7EA2_u9ED1_u6811_u800C_u975E_u5E73_u8861_u4E8C_u53C9_u6811_u539F_u56E0" class="headerlink" title="应用中使用红黑树而非平衡二叉树原因"></a>应用中使用红黑树而非平衡二叉树原因</h4><ol>
<li>如果插入一个node引起了树的不平衡，AVL和RB-Tree都是最多只需要2次旋转操作，即两者都是O(1)；但是在删除node引起树的不平衡时，最坏情况下，AVL需要维护从被删node到root这条路径上所有node的平衡性，因此需要旋转的量级O(logN)，而RB-Tree最多只需3次旋转，只需要O(1)的复杂度。</li>
<li>其次，AVL的结构相较RB-Tree来说更为平衡，在插入和删除node更容易引起Tree的unbalance，因此在大量数据需要插入或者删除时，AVL需要rebalance的频率会更高。因此，RB-Tree在需要大量插入和删除node的场景下，效率更高。自然，由于AVL高度平衡，因此AVL的search效率更高。</li>
</ol>
]]></content>
    <summary type="html">
    <![CDATA[<p><div align="center"><img src="http://hi.csdn.net/attachment/201012/29/8394323_129361793372ZK.png"></div><br>红黑数树是一棵特殊的二叉搜索树，可以保证没有一条路径会比其他路径长出2倍，即有n个点的红黑树高度至多为2lg(n+1)，因而是近似于平衡的。红黑树在操作系统内核以及TreeMap都有广泛的应用，本文先简要介绍二叉搜索树的插入与删除，由此基础上引入红黑树的插入与删除。<br>]]>
    
    </summary>
    
      <category term="面试" scheme="http://jinpingwang.github.io/tags/%E9%9D%A2%E8%AF%95/"/>
    
      <category term="面试" scheme="http://jinpingwang.github.io/categories/%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[HTTP状态保持之Session与Cookie]]></title>
    <link href="http://jinpingwang.github.io/2016/04/24/web/HTTP%E7%8A%B6%E6%80%81%E4%BF%9D%E6%8C%81%E4%B9%8BSession%E4%B8%8ECookie/"/>
    <id>http://jinpingwang.github.io/2016/04/24/web/HTTP状态保持之Session与Cookie/</id>
    <published>2016-04-24T14:32:45.000Z</published>
    <updated>2016-04-28T02:36:35.544Z</updated>
    <content type="html"><![CDATA[<p>之前介绍了Servlet-api中javax.servlet.http包下的HttpSession接口与Cookie类的方法等内容。今天着重讲解Session与Cookie结合在一起如何完成服务器如何与客户端保持状态连接，以及讨论购物车下的实现方式。<br><a id="more"></a></p>
<h3 id="Session_uFF08URL_u91CD_u5199_uFF09"><a href="#Session_uFF08URL_u91CD_u5199_uFF09" class="headerlink" title="Session（URL重写）"></a>Session（URL重写）</h3><h4 id="u4F7F_u7528URL_u91CD_u5199_u7684_u60C5_u51B5"><a href="#u4F7F_u7528URL_u91CD_u5199_u7684_u60C5_u51B5" class="headerlink" title="使用URL重写的情况"></a>使用URL重写的情况</h4><p>如果浏览器禁用了cookie，则需要使用URL重写来保持服务器与客户端的状态。</p>
<h4 id="u5982_u4F55_u5224_u65AD_u662F_u5426_u9700_u8981URL_u91CD_u5199"><a href="#u5982_u4F55_u5224_u65AD_u662F_u5426_u9700_u8981URL_u91CD_u5199" class="headerlink" title="如何判断是否需要URL重写"></a>如何判断是否需要URL重写</h4><p>一开始时，服务器并不知道浏览器是否禁用了cookie，所以在第一次进行响应时可以通过URL重写与cookie设置。如果下一次浏览器访问时只有URL重写而没有cookie，则服务器知道浏览器禁止了cookie。但如果浏览器带回URL重写与cookie，则服务器知道浏览器没有禁止cookie，则往后的响应就不进行URL重写。</p>
<h3 id="Cookie+Session"><a href="#Cookie+Session" class="headerlink" title="Cookie+Session"></a>Cookie+Session</h3><p>客户端首次访问服务器时，服务器通过<code>request.getSession()</code>创建Session。在响应中添加sessionid的cookie返回给客户端。这样客户端与服务器就可以保持状态了。但是，因为cookie默认保存在机器给浏览器开辟的内存中，即在服务器创建新sessionid，并将其放进cookie时，使用cookie的setMaxAge(-1)方法，设置cookie在浏览器关闭前会保存在客户端内存中，即只要不关闭浏览器，新打开一个窗口，还是会把sessionid的cookie传回服务器。但如果关闭浏览器，就没了存储sessionID的cookie，这样向服务器发送新请求时，服务器就会创建新的session。另外session也在服务器内存中也是有生命周期，时间超时也会消失。所以，如果想解决浏览器退出时，sessionid的cookie不会消失，则就自己写个cookie覆盖掉服务器发送给客户端的的cookie，然后设置时间长一些，cookie就保存在硬盘上了。当然以上情况是在浏览器非隐身模式下，且没有禁用Cookie条件下。但如果是在隐身模式访问，则创建的全部 Cookie（不管有没有设置保存在客户端硬盘上） 都会在您关闭隐身窗口后删除。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">HttpSession session = request.getSession();</span><br><span class="line">Cookie cookie = <span class="keyword">new</span> Cookie(<span class="string">"JSESSIONID"</span>, session.getId());</span><br><span class="line">cookie.setMaxAge(<span class="number">40</span>*<span class="number">60</span>);</span><br><span class="line">response.addCookie(cookie);</span><br></pre></td></tr></table></figure></p>
<h3 id="u8D2D_u7269_u8F66"><a href="#u8D2D_u7269_u8F66" class="headerlink" title="购物车"></a>购物车</h3><p>因为用户打开一个网站添加到购物车后，关闭浏览器；使用另一个浏览器打开购物车。这时肯定是一个新的请求，会产生新sessionid，但服务器上原来浏览器的那个sessionid还存活着，所以这里需要考虑用原先存储在服务器上sessionid设置为这一个浏览器访问时的sessionid。购物车这一种还需要根据用户名密码与JSSESSIONID进行映射+mysql数据持久化。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>之前介绍了Servlet-api中javax.servlet.http包下的HttpSession接口与Cookie类的方法等内容。今天着重讲解Session与Cookie结合在一起如何完成服务器如何与客户端保持状态连接，以及讨论购物车下的实现方式。<br>]]>
    
    </summary>
    
      <category term="Cookie" scheme="http://jinpingwang.github.io/tags/Cookie/"/>
    
      <category term="Session" scheme="http://jinpingwang.github.io/tags/Session/"/>
    
      <category term="web" scheme="http://jinpingwang.github.io/tags/web/"/>
    
      <category term="web" scheme="http://jinpingwang.github.io/categories/web/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[细细品酌HTTPS安全篇]]></title>
    <link href="http://jinpingwang.github.io/2016/04/23/web/%E7%BB%86%E7%BB%86%E5%93%81%E9%85%8CHTTPS%E5%AE%89%E5%85%A8%E7%AF%87/"/>
    <id>http://jinpingwang.github.io/2016/04/23/web/细细品酌HTTPS安全篇/</id>
    <published>2016-04-23T14:16:28.000Z</published>
    <updated>2016-05-24T02:54:45.890Z</updated>
    <content type="html"><![CDATA[<p><div align="center"><img src="http://7xrn7f.com1.z0.glb.clouddn.com/16-5-24/80035348.jpg"></div><br>HTTP通信中存在很多隐患，比如：认证，授权，机密性，数据完整性等。如果没有使用安全措施，通信的信息就很容易被劫获并被修改等。由此，HTTPS（HTTP＋SSL/TLS）应孕而生。本文先使用HTTP协议通信，通过wireshark抓取通信内容来佐证通信的安全隐患；然后引入一些密码学基础概念；接着介绍SSL/TLS协议；最后通过HTTPS协议通信，使用wireshark抓取通信内容来佐证通信的安全性。<br><a id="more"></a></p>
<h3 id="HTTP_u901A_u4FE1_u9690_u60A3"><a href="#HTTP_u901A_u4FE1_u9690_u60A3" class="headerlink" title="HTTP通信隐患"></a>HTTP通信隐患</h3><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">HTML <span class="keyword">Form</span> URL <span class="keyword">Encode</span>: application/x-www-<span class="keyword">form</span>-urlencoded</span><br><span class="line">    <span class="keyword">Form</span> item: <span class="string">"username"</span> = <span class="string">"kitty"</span></span><br><span class="line">        Key: username</span><br><span class="line">        Value: kitty</span><br><span class="line">    <span class="keyword">Form</span> item: <span class="string">"password"</span> = <span class="string">"867954"</span></span><br><span class="line">        Key: password</span><br><span class="line">        Value: 867954</span><br></pre></td></tr></table></figure>
<p>从wireshark捕获到的HTTP报文，可以看到username与password的信息完全暴露了。</p>
<h3 id="u5BC6_u7801_u5B66_u57FA_u7840"><a href="#u5BC6_u7801_u5B66_u57FA_u7840" class="headerlink" title="密码学基础"></a>密码学基础</h3><h4 id="u5BF9_u79F0_u52A0_u5BC6"><a href="#u5BF9_u79F0_u52A0_u5BC6" class="headerlink" title="对称加密"></a>对称加密</h4><h5 id="u5B9A_u4E49"><a href="#u5B9A_u4E49" class="headerlink" title="定义"></a>定义</h5><p>对称加密指加密和解密使用相同密钥的加密算法，即加密和解密的密钥是相同的。</p>
<h5 id="u4F18_u70B9"><a href="#u4F18_u70B9" class="headerlink" title="优点"></a>优点</h5><p>算法公开，计算量小，加密速度快，加密效率高。</p>
<h5 id="u7F3A_u70B9"><a href="#u7F3A_u70B9" class="headerlink" title="缺点"></a>缺点</h5><p>双方都使用相同的密钥，安全性得不到保障。</p>
<h5 id="u7C7B_u578B"><a href="#u7C7B_u578B" class="headerlink" title="类型"></a>类型</h5><p>DES(Data Encryption Standard)：数据加密标准<br>AES(Advanced Encryption Standard)：高级加密标准<br>AES与DES的区别在于AES比DES的位数更多。</p>
<h4 id="u975E_u5BF9_u79F0_u52A0_u5BC6"><a href="#u975E_u5BF9_u79F0_u52A0_u5BC6" class="headerlink" title="非对称加密"></a>非对称加密</h4><h5 id="u5B9A_u4E49-1"><a href="#u5B9A_u4E49-1" class="headerlink" title="定义"></a>定义</h5><p>非对称密码有两个密钥。其中一个密钥对外公开，所有人都能获取到的，称为公钥；另一个密钥是不公开的称为私钥。由公钥很难推算出私钥，由私钥也很验难推算出公钥。使用公钥加密后，只能使用私钥来解密；使用私钥加密后，只能使用公钥来解密。</p>
<h5 id="u4F18_u70B9-1"><a href="#u4F18_u70B9-1" class="headerlink" title="优点"></a>优点</h5><p>安全性高</p>
<h5 id="u7F3A_u70B9-1"><a href="#u7F3A_u70B9-1" class="headerlink" title="缺点"></a>缺点</h5><p>加密耗时</p>
<h5 id="u7C7B_u578B-1"><a href="#u7C7B_u578B-1" class="headerlink" title="类型"></a>类型</h5><p>RSA：三个发明者的首字母<br>RSA密钥长达2048位</p>
<h4 id="u6458_u8981_u7B97_u6CD5"><a href="#u6458_u8981_u7B97_u6CD5" class="headerlink" title="摘要算法"></a>摘要算法</h4><h5 id="u4F5C_u7528"><a href="#u4F5C_u7528" class="headerlink" title="作用"></a>作用</h5><p>使用一个散列算法，将任意长度的一块数据转换为一个定长的，不可逆的数字，其长度通常在128-256位之间。</p>
<h5 id="u7C7B_u578B-2"><a href="#u7C7B_u578B-2" class="headerlink" title="类型"></a>类型</h5><p>MD5</p>
<h4 id="u6570_u5B57_u7B7E_u540D"><a href="#u6570_u5B57_u7B7E_u540D" class="headerlink" title="数字签名"></a>数字签名</h4><p>1：使用摘要算法对要发送明文生成摘要，<br>2：使用非对称加密中的私钥对摘要进行加密。<br>3：将加密后的摘要附加到明文后面，然后对外发送<br>4：客户收到后，对明文使用相同的摘要算法得到摘要（客户端），使用公钥对加密的摘要进行解密得到摘要（服务器）。比较摘要（客户端）与摘要（服务器）是否相等，若相等则表示是服务器发送的（因为只有服务器才有私钥），不相等则表示内容被修改或不是服务器发送的。</p>
<h4 id="u6570_u5B57_u8BC1_u4E66"><a href="#u6570_u5B57_u8BC1_u4E66" class="headerlink" title="数字证书"></a>数字证书</h4><p>包含的内容：</p>
<h5 id="Issuer"><a href="#Issuer" class="headerlink" title="Issuer"></a>Issuer</h5><p>证书的发布机构。指出是什么机构发布这个证书。</p>
<h5 id="Valid_from_2C_Valid_to"><a href="#Valid_from_2C_Valid_to" class="headerlink" title="Valid from, Valid to"></a>Valid from, Valid to</h5><p>证书的有效期。</p>
<h5 id="Public_key"><a href="#Public_key" class="headerlink" title="Public key"></a>Public key</h5><p>公钥。</p>
<h5 id="Subject"><a href="#Subject" class="headerlink" title="Subject"></a>Subject</h5><p>主题。这个证书的所有者，一般指某个人或某个公司名称，公司网站的网址等。</p>
<h5 id="Signature_algorithm"><a href="#Signature_algorithm" class="headerlink" title="Signature algorithm"></a>Signature algorithm</h5><p>签名所使用的算法。即服务器给客户端发送证书时，要保证这个证书在发送过程中没被别人修改过，因此使用摘要算法，计算这个证书获得摘要，然后使用私钥对这个摘要进行加密得到加密后的摘要（服务器加密），并与证书放到一块。客户端得到后就使用这个签名算法得到摘要，然后使用公钥解密摘要（服务器加密）与客户端生成的摘要相比较看是不是相等。可参见数字签名一节。</p>
<h5 id="Thumbprint_2C_Thumbprint_algorithm"><a href="#Thumbprint_2C_Thumbprint_algorithm" class="headerlink" title="Thumbprint, Thumbprint algorithm"></a>Thumbprint, Thumbprint algorithm</h5><p>指纹以及指纹算法。保证这个证书不是伪造的。CA在发布证书时，证书的指纹（相当于摘要）和指纹算法（摘要算法），都会加密后再和证书放到一起发布。而证书的指纹是用CA的私钥进行加密生成的，即CA自己本身也是有一个证书，而这个证书在操作系统刚安装好时就已经被微软安装在操作系统中了，另外浏览器中也内嵌安装了一些CA的证书。所以，可以使用指纹算法去得到证书的摘要，使用CA的公钥解密指纹得到摘要，然后比较这两个摘要看是不是相等，即是CA的数字签名。</p>
<h4 id="CA"><a href="#CA" class="headerlink" title="CA"></a>CA</h4><p>CA是证书的签发机构，负责签发证书，认证证书等。CA自己本身也拥有私钥和一个证书（内含公钥），而且这个证书一般在操作系统或浏览器安装时就内嵌在系统中或浏览器中了。<br>这里有一个漏洞是，有一些CA公司为了私利给一些非法公司颁发证书。如CA已经给taobao颁发了一个证书，现在另一家非法公司让这家CA也给他颁发一个taobao证书。这样，这家公司就可以使用这个证书来冒充taobao了。</p>
<h3 id="SSL/TLS"><a href="#SSL/TLS" class="headerlink" title="SSL/TLS"></a>SSL/TLS</h3><h4 id="u540D_u8BCD_u89E3_u91CA"><a href="#u540D_u8BCD_u89E3_u91CA" class="headerlink" title="名词解释"></a>名词解释</h4><p>SSL(Secure Socket Layer)：安全套接字层<br>TLS(Transport Layer Security)：传输层安全协议</p>
<h4 id="u7248_u672C_u5386_u53F2"><a href="#u7248_u672C_u5386_u53F2" class="headerlink" title="版本历史"></a>版本历史</h4><p>首先，网景公司制定了SSL协议，一直到SSL3.0版本<br>然后，互联网标准化组织接替网景公司，发布了SSL的升级版TLS1.0<br>接着，TLS又升级了两次，分别为TSL1.1, TLS1.2</p>
<h4 id="u4F5C_u7528-1"><a href="#u4F5C_u7528-1" class="headerlink" title="作用"></a>作用</h4><p>1：机密性（会话密钥）<br>2：数据完整性（数字签名）<br>3：完成客户端与服务器的认证（数字证书）</p>
<h4 id="u534F_u8BAE_u7ED3_u6784"><a href="#u534F_u8BAE_u7ED3_u6784" class="headerlink" title="协议结构"></a>协议结构</h4><p>TLS握手协议：完成认证以及生成会话密钥<br>TLS记录协议：用会话密钥对数据加密传输</p>
<h4 id="u534F_u8BAE_u6D41_u7A0B"><a href="#u534F_u8BAE_u6D41_u7A0B" class="headerlink" title="协议流程"></a>协议流程</h4><h5 id="u5BA2_u6237_u7AEF_u2013_26gt_3B_u670D_u52A1_u5668"><a href="#u5BA2_u6237_u7AEF_u2013_26gt_3B_u670D_u52A1_u5668" class="headerlink" title="客户端–&gt;服务器"></a>客户端–&gt;服务器</h5><p>1：协议版本（如TLS1.0）<br>2：加密算法（如RSA)<br>3：支持的压缩方法<br>4：产生一个随机数</p>
<h5 id="u670D_u52A1_u5668_u2013_26gt_3B_u5BA2_u6237_u7AEF"><a href="#u670D_u52A1_u5668_u2013_26gt_3B_u5BA2_u6237_u7AEF" class="headerlink" title="服务器–&gt;客户端"></a>服务器–&gt;客户端</h5><p>1：确认使用协议版本（如TLS1.0）（如果客户端与服务器的版本不一致，则服务器关闭通信）<br>2：确认使用的加密算法（如RSA）<br>3：服务器数字证书<br>4：产生一个随机数<br>【注：如果服务器也要对客户端实行认证，则会在这一步告知客户端向服务器发送证书】</p>
<h5 id="u5BA2_u6237_u7AEF_u2013_26gt_3B_u670D_u52A1_u5668-1"><a href="#u5BA2_u6237_u7AEF_u2013_26gt_3B_u670D_u52A1_u5668-1" class="headerlink" title="客户端–&gt;服务器"></a>客户端–&gt;服务器</h5><p>1：产生一个随机数，使用服务器的公钥加密<br>2：编码改变通知，表示随后的信息都使用双方协定好的协议进行发送<br>3：客户端握手结束通知。表示客户端握手结束。这一项也是前面1，2发送内容的hash值，供服务器校验。<br>【注：如果服务器有对客户端实行认证，则客户端会在这一步向服务器发送自己的证书】</p>
<h5 id="u670D_u52A1_u5668_u2013_26gt_3B_u5BA2_u6237_u7AEF-1"><a href="#u670D_u52A1_u5668_u2013_26gt_3B_u5BA2_u6237_u7AEF-1" class="headerlink" title="服务器–&gt;客户端"></a>服务器–&gt;客户端</h5><p>1：编码改变通知，表示随后的信息都使用双方协定好的协议进行发送<br>2：服务器握手结束通知。表示服务器握手结束。这一项也是前面1发送内容的hash值，供客户端校验。<br>【注：如果服务器有对客户端实行认证，则在这一步服务器会对客户端发过来的证书进行验证，如果验证不通过则中断通信】</p>
<h3 id="HTTPS_u901A_u4FE1_u5B89_u5168_u4FDD_u8BC1"><a href="#HTTPS_u901A_u4FE1_u5B89_u5168_u4FDD_u8BC1" class="headerlink" title="HTTPS通信安全保证"></a>HTTPS通信安全保证</h3><p>在tomcat中使用SSH/TLS协议，并用8443端口来接收数据，传输的数据都给过了会话密钥的加密。<br><img src="http://i2.piimg.com/93eb5bffdcfcb5a1.jpg" alt=""></p>
<h3 id="HTTPS_u4F18_u7F3A_u70B9"><a href="#HTTPS_u4F18_u7F3A_u70B9" class="headerlink" title="HTTPS优缺点"></a>HTTPS优缺点</h3><h4 id="u4F18_u70B9-2"><a href="#u4F18_u70B9-2" class="headerlink" title="优点"></a>优点</h4><p>详见SSL/TLS中的”作用”小节</p>
<h4 id="u7F3A_u70B9-2"><a href="#u7F3A_u70B9-2" class="headerlink" title="缺点"></a>缺点</h4><p>1：费用<br>2：响应<br>3：消耗cpu<br>4：有些浏览器不能很好缓存https</p>
]]></content>
    <summary type="html">
    <![CDATA[<p><div align="center"><img src="http://7xrn7f.com1.z0.glb.clouddn.com/16-5-24/80035348.jpg"></div><br>HTTP通信中存在很多隐患，比如：认证，授权，机密性，数据完整性等。如果没有使用安全措施，通信的信息就很容易被劫获并被修改等。由此，HTTPS（HTTP＋SSL/TLS）应孕而生。本文先使用HTTP协议通信，通过wireshark抓取通信内容来佐证通信的安全隐患；然后引入一些密码学基础概念；接着介绍SSL/TLS协议；最后通过HTTPS协议通信，使用wireshark抓取通信内容来佐证通信的安全性。<br>]]>
    
    </summary>
    
      <category term="web安全" scheme="http://jinpingwang.github.io/tags/web%E5%AE%89%E5%85%A8/"/>
    
      <category term="web" scheme="http://jinpingwang.github.io/categories/web/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[基于xml的序列化与反序列化]]></title>
    <link href="http://jinpingwang.github.io/2016/04/23/java/%E5%9F%BA%E4%BA%8Exml%E7%9A%84%E5%BA%8F%E5%88%97%E5%8C%96%E4%B8%8E%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    <id>http://jinpingwang.github.io/2016/04/23/java/基于xml的序列化与反序列化/</id>
    <published>2016-04-23T12:18:26.000Z</published>
    <updated>2016-05-24T02:07:27.854Z</updated>
    <content type="html"><![CDATA[<p>XML的全称是可扩展标记语言，即Extensible Markup Language，可以用来标记数据，定义数据类型，是一种允许用户对自己的标记语言进行定义。XML提供统一的方法来描述和交换独立于应用程序或供应商的结构化数据，非常适合Web传输。<br><a id="more"></a></p>
<h3 id="u6E90_u7801"><a href="#u6E90_u7801" class="headerlink" title="源码"></a>源码</h3><h4 id="Maven"><a href="#Maven" class="headerlink" title="Maven"></a>Maven</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">groupId</span>&gt;</span>com.thoughtworks.xstream<span class="tag">&lt;/<span class="title">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">artifactId</span>&gt;</span>xstream<span class="tag">&lt;/<span class="title">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">version</span>&gt;</span>1.4.9<span class="tag">&lt;/<span class="title">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="POJO"><a href="#POJO" class="headerlink" title="POJO"></a>POJO</h4><figure class="highlight fortran"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> Person&#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="built_in">int</span> id;</span><br><span class="line">	<span class="keyword">public</span> String <span class="keyword">name</span>;</span><br><span class="line">	<span class="keyword">public</span> List&lt;<span class="type">Integer</span>&gt; hobby;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">public</span> Person(<span class="built_in">int</span> id, String <span class="keyword">name</span>, List&lt;<span class="type">Integer</span>&gt; hobby)&#123;</span><br><span class="line">		this.id = id;</span><br><span class="line">		this.<span class="keyword">name</span> = <span class="keyword">name</span>;</span><br><span class="line">		this.hobby = hobby;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="u4E3B_u7A0B_u5E8F"><a href="#u4E3B_u7A0B_u5E8F" class="headerlink" title="主程序"></a>主程序</h4><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.uestc.xml;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.thoughtworks.xstream.XStream;</span><br><span class="line"><span class="keyword">import</span> com.thoughtworks.xstream.io.xml.DomDriver;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> class Test02 &#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> main(<span class="keyword">String</span>[] args) &#123;</span><br><span class="line">		<span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">		List&lt;Integer&gt; hobby = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</span><br><span class="line">		hobby.<span class="built_in">add</span>(<span class="number">3</span>);</span><br><span class="line">		hobby.<span class="built_in">add</span>(<span class="number">4</span>);</span><br><span class="line">		Person person = <span class="keyword">new</span> Person(<span class="number">1</span>, <span class="string">"kitty"</span>, hobby);</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">String</span> personXml = <span class="keyword">null</span>;</span><br><span class="line">		XStream xStream = <span class="keyword">new</span> XStream(<span class="keyword">new</span> DomDriver());</span><br><span class="line">		xStream.alias(<span class="string">"person"</span>, Person.class);</span><br><span class="line">		personXml = xStream.toXML(person);</span><br><span class="line">		</span><br><span class="line">		System.out.<span class="built_in">println</span>(personXml);</span><br><span class="line">		</span><br><span class="line">		Person personResult = (Person)xStream.fromXML(personXml);</span><br><span class="line">		System.out.<span class="built_in">println</span>(personResult.id+<span class="string">"\t"</span>+personResult.name+<span class="string">"\t"</span>+personResult.hobby);		</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">输出结果：</span><br><span class="line"><span class="tag">&lt;<span class="title">person</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">id</span>&gt;</span>1<span class="tag">&lt;/<span class="title">id</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">name</span>&gt;</span>kitty<span class="tag">&lt;/<span class="title">name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">hobby</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">int</span>&gt;</span>3<span class="tag">&lt;/<span class="title">int</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">int</span>&gt;</span>4<span class="tag">&lt;/<span class="title">int</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="title">hobby</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">person</span>&gt;</span></span><br><span class="line">1	kitty	[3, 4]</span><br></pre></td></tr></table></figure>
<h3 id="u89E3_u6790"><a href="#u89E3_u6790" class="headerlink" title="解析"></a>解析</h3><p>与json序列化不同，xml序列化可以不考虑域是否是public，是否有默认构造函数。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>XML的全称是可扩展标记语言，即Extensible Markup Language，可以用来标记数据，定义数据类型，是一种允许用户对自己的标记语言进行定义。XML提供统一的方法来描述和交换独立于应用程序或供应商的结构化数据，非常适合Web传输。<br>]]>
    
    </summary>
    
      <category term="java" scheme="http://jinpingwang.github.io/tags/java/"/>
    
      <category term="java" scheme="http://jinpingwang.github.io/categories/java/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[基于json的序列化与反序列化]]></title>
    <link href="http://jinpingwang.github.io/2016/04/23/java/%E5%9F%BA%E4%BA%8Ejson%E7%9A%84%E5%BA%8F%E5%88%97%E5%8C%96%E4%B8%8E%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    <id>http://jinpingwang.github.io/2016/04/23/java/基于json的序列化与反序列化/</id>
    <published>2016-04-23T01:11:36.000Z</published>
    <updated>2016-05-24T01:49:39.298Z</updated>
    <content type="html"><![CDATA[<p>json是一种轻量级的数据交换语言，以文字为基础，且易于让人阅读。将对象序列化成json格式，可以在网络上非常方便的进行传输，且各个平台几乎都拥有成熟的工具，能很快地将json反序列化为其对应语言所需要的格式。<br><a id="more"></a></p>
<h3 id="u6E90_u7801"><a href="#u6E90_u7801" class="headerlink" title="源码"></a>源码</h3><h4 id="Maven"><a href="#Maven" class="headerlink" title="Maven"></a>Maven</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">groupId</span>&gt;</span>org.codehaus.jackson<span class="tag">&lt;/<span class="title">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">artifactId</span>&gt;</span>jackson-mapper-asl<span class="tag">&lt;/<span class="title">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">version</span>&gt;</span>1.9.13<span class="tag">&lt;/<span class="title">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="POJO"><a href="#POJO" class="headerlink" title="POJO"></a>POJO</h4><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">Person</span>&#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">int</span> id;</span><br><span class="line">	<span class="keyword">public</span> String name;</span><br><span class="line">	<span class="keyword">public</span> List&lt;Integer&gt; hobby;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">Person</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">Person</span>(<span class="params"><span class="keyword">int</span> id, String name, List&lt;Integer&gt; hobby</span>)</span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.id = id;</span><br><span class="line">		<span class="keyword">this</span>.name = name;</span><br><span class="line">		<span class="keyword">this</span>.hobby = hobby;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="u4E3B_u7A0B_u5E8F"><a href="#u4E3B_u7A0B_u5E8F" class="headerlink" title="主程序"></a>主程序</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">package com.uestc.json;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.StringWriter;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.codehaus.jackson.JsonFactory;</span><br><span class="line"><span class="keyword">import</span> org.codehaus.jackson.JsonGenerator;</span><br><span class="line"><span class="keyword">import</span> org.codehaus.jackson.annotate.JsonAutoDetect.Visibility;</span><br><span class="line"><span class="keyword">import</span> org.codehaus.jackson.annotate.JsonMethod;</span><br><span class="line"><span class="keyword">import</span> org.codehaus.jackson.map.ObjectMapper;</span><br><span class="line"></span><br><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">Test01</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	public static <span class="keyword">void</span> main(<span class="built_in">String</span>[] args) throws IOException &#123;</span><br><span class="line">		<span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">		<span class="comment">//构建待序列化对象</span></span><br><span class="line">		List&lt;Integer&gt; hobby = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</span><br><span class="line">		hobby.add(<span class="number">3</span>);</span><br><span class="line">		hobby.add(<span class="number">4</span>);</span><br><span class="line">		Person person = <span class="keyword">new</span> Person(<span class="number">1</span>, <span class="string">"kitty"</span>, hobby);</span><br><span class="line">		</span><br><span class="line">		<span class="comment">//序列化</span></span><br><span class="line">		<span class="built_in">String</span> personJson = <span class="literal">null</span>;</span><br><span class="line">		ObjectMapper mapper = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line">		mapper.setVisibility(JsonMethod.FIELD, Visibility.ANY);</span><br><span class="line">		StringWriter sw = <span class="keyword">new</span> StringWriter();</span><br><span class="line">		JsonGenerator gen = <span class="keyword">new</span> JsonFactory().createJsonGenerator(sw);</span><br><span class="line">		mapper.writeValue(gen, person);</span><br><span class="line">		gen.close();</span><br><span class="line">		personJson = sw.toString();</span><br><span class="line">		sw.close();</span><br><span class="line"></span><br><span class="line">		System.out.println(personJson);</span><br><span class="line">		</span><br><span class="line">		<span class="comment">//反序列化</span></span><br><span class="line">		Person personResult = (Person)mapper.readValue(personJson, Person.class);</span><br><span class="line">		System.out.println(personResult.id+<span class="string">"\t"</span>+personResult.name+<span class="string">"\t"</span>+personResult.hobby);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输出结果：</span><br><span class="line">&#123;<span class="string">"id"</span>:<span class="number">1</span>,<span class="string">"name"</span>:<span class="string">"kitty"</span>,<span class="string">"hobby"</span>:[<span class="number">3</span>,<span class="number">4</span>]&#125;</span><br><span class="line"><span class="number">1</span>	kitty	[<span class="number">3</span>, <span class="number">4</span>]</span><br></pre></td></tr></table></figure>
<h3 id="u89E3_u6790"><a href="#u89E3_u6790" class="headerlink" title="解析"></a>解析</h3><p>有两点需要注意：<br>1：如果在序列化非public域时，需要在创建完ObjectMapper后添加这一句：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">mapper</span><span class="class">.setVisibility</span>(<span class="tag">JsonMethod</span><span class="class">.FIELD</span>, <span class="tag">Visibility</span><span class="class">.ANY</span>);</span><br></pre></td></tr></table></figure></p>
<p>2：对于需要序列化的类，需要有一个默认的构造函数，如果没有默认的构造函数会抛出异常。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>json是一种轻量级的数据交换语言，以文字为基础，且易于让人阅读。将对象序列化成json格式，可以在网络上非常方便的进行传输，且各个平台几乎都拥有成熟的工具，能很快地将json反序列化为其对应语言所需要的格式。<br>]]>
    
    </summary>
    
      <category term="java" scheme="http://jinpingwang.github.io/tags/java/"/>
    
      <category term="java" scheme="http://jinpingwang.github.io/categories/java/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[mysql之用户表与授权]]></title>
    <link href="http://jinpingwang.github.io/2016/04/18/database/mysql%E4%B9%8B%E7%94%A8%E6%88%B7%E8%A1%A8%E4%B8%8E%E6%8E%88%E6%9D%83/"/>
    <id>http://jinpingwang.github.io/2016/04/18/database/mysql之用户表与授权/</id>
    <published>2016-04-18T07:24:17.000Z</published>
    <updated>2016-04-21T12:17:06.586Z</updated>
    <content type="html"><![CDATA[<p>介绍了mysql数据库下系统自带user表；mysql授权与撤销授权；ip远程登陆设置。</p>
<h3 id="user_u8868"><a href="#user_u8868" class="headerlink" title="user表"></a>user表</h3><p>使用mysql数据库<br><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> mysql</span><br></pre></td></tr></table></figure></p>
<p>查询当前所有用户相关信息（可以通过该表来删除某个用户）。<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator"><span class="keyword">select</span> host ,<span class="keyword">user</span> ,<span class="keyword">password</span> <span class="keyword">from</span> <span class="keyword">user</span>;</span></span><br></pre></td></tr></table></figure></p>
<a id="more"></a>
<h3 id="u6388_u6743_u4E0E_u64A4_u9500_u6388_u6743"><a href="#u6388_u6743_u4E0E_u64A4_u9500_u6388_u6743" class="headerlink" title="授权与撤销授权"></a>授权与撤销授权</h3><h4 id="u6388_u6743"><a href="#u6388_u6743" class="headerlink" title="授权"></a>授权</h4><h5 id="u6388_u6743_u5E76_u521B_u5EFA"><a href="#u6388_u6743_u5E76_u521B_u5EFA" class="headerlink" title="授权并创建"></a>授权并创建</h5><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">/<span class="keyword">*</span><span class="keyword">*</span></span><br><span class="line">  <span class="keyword">*</span> 创建一个用户，并且为他授权。</span><br><span class="line">  <span class="keyword">*</span> all privileges代表所有权限</span><br><span class="line">  <span class="keyword">*</span> 当然也可以改为select,delete,update,create,drop组合</span><br><span class="line">  <span class="keyword">*</span> 如：select,delete。</span><br><span class="line">  <span class="keyword">*</span> <span class="keyword">*</span>.<span class="keyword">*</span>代表所有数据库的所有表，test.<span class="keyword">*</span>代表test数据库的所有表</span><br><span class="line">  <span class="keyword">*</span> %表示登陆的ip，可以为具体ip，也可以为localhost，</span><br><span class="line">  <span class="keyword">*</span> 如果为%则表示可以从任何ip登陆。</span><br><span class="line">  <span class="keyword">*</span>/</span><br><span class="line">grant all privileges on <span class="keyword">*</span>.<span class="keyword">*</span> to '用户名'<span class="comment">@'%' identified by '这个用户的密码'</span></span><br><span class="line">//刷新权限</span><br><span class="line">flush privileges;</span><br></pre></td></tr></table></figure>
<h5 id="u6388_u6743-1"><a href="#u6388_u6743-1" class="headerlink" title="授权"></a>授权</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator"><span class="keyword">grant</span> all <span class="keyword">privileges</span> <span class="keyword">on</span> *.* <span class="keyword">to</span> <span class="string">'用户名'</span>@<span class="string">'%'</span></span><br><span class="line">//刷新权限</span><br><span class="line"><span class="keyword">flush</span> <span class="keyword">privileges</span>;</span></span><br></pre></td></tr></table></figure>
<h4 id="u64A4_u9500_u6388_u6743"><a href="#u64A4_u9500_u6388_u6743" class="headerlink" title="撤销授权"></a>撤销授权</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator"><span class="keyword">grant</span> all <span class="keyword">privileges</span> <span class="keyword">on</span> *.* <span class="keyword">from</span> <span class="string">'root'</span>@<span class="string">'%'</span></span></span><br></pre></td></tr></table></figure>
<h3 id="ip_u8FDC_u7A0B_u767B_u9646_u8BBE_u7F6E"><a href="#ip_u8FDC_u7A0B_u767B_u9646_u8BBE_u7F6E" class="headerlink" title="ip远程登陆设置"></a>ip远程登陆设置</h3><h4 id="u4FEE_u6539vim_/etc/mysql/my-cnf"><a href="#u4FEE_u6539vim_/etc/mysql/my-cnf" class="headerlink" title="修改vim /etc/mysql/my.cnf"></a>修改vim /etc/mysql/my.cnf</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bind-address           = <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span></span><br></pre></td></tr></table></figure>
<p>注释掉，即修改为<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">#bind-address           = <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span></span></span><br></pre></td></tr></table></figure></p>
<h4 id="u901A_u8FC7_u6388_u6743_uFF0C_u8BBE_u7F6E_u53EF_u4EE5_u901A_u8FC7_u4EFB_u4F55ip_u6216_u6307_u5B9Aip_u8FDB_u884C_u767B_u9646"><a href="#u901A_u8FC7_u6388_u6743_uFF0C_u8BBE_u7F6E_u53EF_u4EE5_u901A_u8FC7_u4EFB_u4F55ip_u6216_u6307_u5B9Aip_u8FDB_u884C_u767B_u9646" class="headerlink" title="通过授权，设置可以通过任何ip或指定ip进行登陆"></a>通过授权，设置可以通过任何ip或指定ip进行登陆</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator"><span class="keyword">grant</span> all <span class="keyword">privileges</span> <span class="keyword">on</span> *.* <span class="keyword">to</span> <span class="string">'用户名'</span>@<span class="string">'%'</span></span></span><br></pre></td></tr></table></figure>
<h4 id="u5173_u95ED_u5E76_u542F_u52A8_u6570_u636E_u5E93"><a href="#u5173_u95ED_u5E76_u542F_u52A8_u6570_u636E_u5E93" class="headerlink" title="关闭并启动数据库"></a>关闭并启动数据库</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">/etc/init.d/mysql <span class="operator"><span class="keyword">stop</span></span><br><span class="line">/etc/init.<span class="keyword">d</span>/mysql <span class="keyword">start</span></span></span><br></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[<p>介绍了mysql数据库下系统自带user表；mysql授权与撤销授权；ip远程登陆设置。</p>
<h3 id="user_u8868"><a href="#user_u8868" class="headerlink" title="user表"></a>user表</h3><p>使用mysql数据库<br><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> mysql</span><br></pre></td></tr></table></figure></p>
<p>查询当前所有用户相关信息（可以通过该表来删除某个用户）。<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator"><span class="keyword">select</span> host ,<span class="keyword">user</span> ,<span class="keyword">password</span> <span class="keyword">from</span> <span class="keyword">user</span>;</span></span><br></pre></td></tr></table></figure></p>]]>
    
    </summary>
    
      <category term="mysql" scheme="http://jinpingwang.github.io/tags/mysql/"/>
    
      <category term="数据库" scheme="http://jinpingwang.github.io/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
      <category term="数据库" scheme="http://jinpingwang.github.io/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[利用反射机制来修改String对象的值]]></title>
    <link href="http://jinpingwang.github.io/2016/04/18/java/%E5%88%A9%E7%94%A8%E5%8F%8D%E5%B0%84%E6%9C%BA%E5%88%B6%E6%9D%A5%E4%BF%AE%E6%94%B9String%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%80%BC/"/>
    <id>http://jinpingwang.github.io/2016/04/18/java/利用反射机制来修改String对象的值/</id>
    <published>2016-04-17T23:06:05.000Z</published>
    <updated>2016-05-24T02:43:39.959Z</updated>
    <content type="html"><![CDATA[<p>String对象的值是没办法改变的，若要修改，则只能通过重新创建一个新的String对象。本文通过利用反射机制来达到修改String对象的值，而不用创建新的String对象。<br><a id="more"></a></p>
<h3 id="String_u7C7B_u4E3A_u4EC0_u4E48_u795E_u5947"><a href="#String_u7C7B_u4E3A_u4EC0_u4E48_u795E_u5947" class="headerlink" title="String类为什么神奇"></a>String类为什么神奇</h3><p>使用过java语言的程序员都知道，String类与普通的类有很多不同，是一个神奇的类。比如，它可以这样创建：<br><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">String</span> s1 = <span class="string">"hello"</span>;</span><br><span class="line"><span class="built_in">String</span> s2 = <span class="keyword">new</span> <span class="built_in">String</span>(<span class="string">"hello"</span>);</span><br></pre></td></tr></table></figure></p>
<p>我们知道创建的对象都是在堆上分配的，但String s1 = “hello”却是引用常量池中的字符串常量。而且，如果没有以下这一句：<br><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">String </span><span class="literal">s1</span> = <span class="string">"hello"</span><span class="comment">;</span></span><br></pre></td></tr></table></figure></p>
<p>而直接执行<br><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">String</span> s2 = <span class="keyword">new</span> <span class="built_in">String</span>(<span class="string">"hello"</span>)</span><br></pre></td></tr></table></figure></p>
<p>会先在常量池中创建一个”hello”字符串常量，然后再在堆中创建一个”hello”。</p>
<h3 id="u5229_u7528_u53CD_u5C04_u673A_u5236_u4FEE_u6539String_u7C7B_u5BF9_u8C61_u7684_u503C"><a href="#u5229_u7528_u53CD_u5C04_u673A_u5236_u4FEE_u6539String_u7C7B_u5BF9_u8C61_u7684_u503C" class="headerlink" title="利用反射机制修改String类对象的值"></a>利用反射机制修改String类对象的值</h3><p>说了String对象的神奇后，我们通过String的源码可知，String类没有提供修改的方法，即setter方法。所以你想要修改String的值，则只能重新进行创建一个String对象。但通过反射机制，可以将String中的value进行修改，从而达到修改String对象的值。</p>
<h4 id="u672A_u4F7F_u7528_u53CD_u5C04_u673A_u5236"><a href="#u672A_u4F7F_u7528_u53CD_u5C04_u673A_u5236" class="headerlink" title="未使用反射机制"></a>未使用反射机制</h4><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">String</span> <span class="built_in">str</span> = <span class="keyword">new</span> <span class="keyword">String</span>(<span class="string">"hello"</span>);</span><br><span class="line"><span class="keyword">String</span> strOriginal = <span class="built_in">str</span>;</span><br><span class="line"><span class="built_in">str</span> = <span class="keyword">new</span> <span class="keyword">String</span>(<span class="string">"good"</span>);</span><br><span class="line">System.out.<span class="built_in">println</span>(<span class="built_in">str</span>+<span class="string">"\t"</span>+strOriginal);</span><br></pre></td></tr></table></figure>
<p>以上代码输出：good  hello。<br>可知str引用不再指向”hello”这块空间。</p>
<h4 id="u4F7F_u7528_u53CD_u5C04_u673A_u5236"><a href="#u4F7F_u7528_u53CD_u5C04_u673A_u5236" class="headerlink" title="使用反射机制"></a>使用反射机制</h4><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">String</span> <span class="built_in">str</span> = <span class="keyword">new</span> <span class="keyword">String</span>(<span class="string">"hello"</span>);</span><br><span class="line"><span class="keyword">String</span> strOriginal = <span class="built_in">str</span>;</span><br><span class="line">Class c1 = <span class="keyword">String</span>.class;</span><br><span class="line">Field field = c1.getDeclaredField(<span class="string">"value"</span>);</span><br><span class="line">field.setAccessible(<span class="keyword">true</span>);</span><br><span class="line"><span class="built_in">char</span> temp[] = &#123;<span class="string">'a'</span>, <span class="string">'b'</span>&#125;;</span><br><span class="line">field.<span class="built_in">set</span>(<span class="built_in">str</span>, temp);</span><br><span class="line">System.out.<span class="built_in">println</span>(<span class="built_in">str</span>+<span class="string">"\t"</span>+strOriginal);</span><br></pre></td></tr></table></figure>
<p>以上代码输出：ab    ab<br>可知str所指的空间没有改变，即指向strOriginal所指向的空间，从而达到修改String对象值的目的。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>String对象的值是没办法改变的，若要修改，则只能通过重新创建一个新的String对象。本文通过利用反射机制来达到修改String对象的值，而不用创建新的String对象。<br>]]>
    
    </summary>
    
      <category term="java" scheme="http://jinpingwang.github.io/tags/java/"/>
    
      <category term="java" scheme="http://jinpingwang.github.io/categories/java/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[java源码之ArrayList]]></title>
    <link href="http://jinpingwang.github.io/2016/04/17/javaSourceCode/java.util/ArrayList/"/>
    <id>http://jinpingwang.github.io/2016/04/17/javaSourceCode/java.util/ArrayList/</id>
    <published>2016-04-17T11:12:51.000Z</published>
    <updated>2016-04-23T08:25:19.574Z</updated>
    <content type="html"><![CDATA[<p>主要介绍了有关于ArrayList的源码，包括一些动态括展等方法的解析。<br><a id="more"></a></p>
<h3 id="u6E90_u4EE3_u7801"><a href="#u6E90_u4EE3_u7801" class="headerlink" title="源代码"></a>源代码</h3><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br><span class="line">535</span><br><span class="line">536</span><br><span class="line">537</span><br><span class="line">538</span><br><span class="line">539</span><br><span class="line">540</span><br><span class="line">541</span><br><span class="line">542</span><br><span class="line">543</span><br><span class="line">544</span><br><span class="line">545</span><br><span class="line">546</span><br><span class="line">547</span><br><span class="line">548</span><br><span class="line">549</span><br><span class="line">550</span><br><span class="line">551</span><br><span class="line">552</span><br><span class="line">553</span><br><span class="line">554</span><br><span class="line">555</span><br><span class="line">556</span><br><span class="line">557</span><br><span class="line">558</span><br><span class="line">559</span><br><span class="line">560</span><br><span class="line">561</span><br><span class="line">562</span><br><span class="line">563</span><br><span class="line">564</span><br><span class="line">565</span><br><span class="line">566</span><br><span class="line">567</span><br><span class="line">568</span><br><span class="line">569</span><br><span class="line">570</span><br><span class="line">571</span><br><span class="line">572</span><br><span class="line">573</span><br><span class="line">574</span><br><span class="line">575</span><br><span class="line">576</span><br><span class="line">577</span><br><span class="line">578</span><br><span class="line">579</span><br><span class="line">580</span><br><span class="line">581</span><br><span class="line">582</span><br><span class="line">583</span><br><span class="line">584</span><br><span class="line">585</span><br><span class="line">586</span><br><span class="line">587</span><br><span class="line">588</span><br><span class="line">589</span><br><span class="line">590</span><br><span class="line">591</span><br><span class="line">592</span><br><span class="line">593</span><br><span class="line">594</span><br><span class="line">595</span><br><span class="line">596</span><br><span class="line">597</span><br><span class="line">598</span><br><span class="line">599</span><br><span class="line">600</span><br><span class="line">601</span><br><span class="line">602</span><br><span class="line">603</span><br><span class="line">604</span><br><span class="line">605</span><br><span class="line">606</span><br><span class="line">607</span><br><span class="line">608</span><br><span class="line">609</span><br><span class="line">610</span><br><span class="line">611</span><br><span class="line">612</span><br><span class="line">613</span><br><span class="line">614</span><br><span class="line">615</span><br><span class="line">616</span><br><span class="line">617</span><br><span class="line">618</span><br><span class="line">619</span><br><span class="line">620</span><br><span class="line">621</span><br><span class="line">622</span><br><span class="line">623</span><br><span class="line">624</span><br><span class="line">625</span><br><span class="line">626</span><br><span class="line">627</span><br><span class="line">628</span><br><span class="line">629</span><br><span class="line">630</span><br><span class="line">631</span><br><span class="line">632</span><br><span class="line">633</span><br><span class="line">634</span><br><span class="line">635</span><br><span class="line">636</span><br><span class="line">637</span><br><span class="line">638</span><br><span class="line">639</span><br><span class="line">640</span><br><span class="line">641</span><br><span class="line">642</span><br><span class="line">643</span><br><span class="line">644</span><br><span class="line">645</span><br><span class="line">646</span><br><span class="line">647</span><br><span class="line">648</span><br><span class="line">649</span><br><span class="line">650</span><br><span class="line">651</span><br><span class="line">652</span><br><span class="line">653</span><br><span class="line">654</span><br><span class="line">655</span><br><span class="line">656</span><br><span class="line">657</span><br><span class="line">658</span><br><span class="line">659</span><br><span class="line">660</span><br><span class="line">661</span><br><span class="line">662</span><br><span class="line">663</span><br><span class="line">664</span><br><span class="line">665</span><br><span class="line">666</span><br><span class="line">667</span><br><span class="line">668</span><br><span class="line">669</span><br><span class="line">670</span><br><span class="line">671</span><br><span class="line">672</span><br><span class="line">673</span><br><span class="line">674</span><br><span class="line">675</span><br><span class="line">676</span><br><span class="line">677</span><br><span class="line">678</span><br><span class="line">679</span><br><span class="line">680</span><br><span class="line">681</span><br><span class="line">682</span><br><span class="line">683</span><br><span class="line">684</span><br><span class="line">685</span><br><span class="line">686</span><br><span class="line">687</span><br><span class="line">688</span><br><span class="line">689</span><br><span class="line">690</span><br><span class="line">691</span><br><span class="line">692</span><br><span class="line">693</span><br><span class="line">694</span><br><span class="line">695</span><br><span class="line">696</span><br><span class="line">697</span><br><span class="line">698</span><br><span class="line">699</span><br><span class="line">700</span><br><span class="line">701</span><br><span class="line">702</span><br><span class="line">703</span><br><span class="line">704</span><br><span class="line">705</span><br><span class="line">706</span><br><span class="line">707</span><br><span class="line">708</span><br><span class="line">709</span><br><span class="line">710</span><br><span class="line">711</span><br><span class="line">712</span><br><span class="line">713</span><br><span class="line">714</span><br><span class="line">715</span><br><span class="line">716</span><br><span class="line">717</span><br><span class="line">718</span><br><span class="line">719</span><br><span class="line">720</span><br><span class="line">721</span><br><span class="line">722</span><br><span class="line">723</span><br><span class="line">724</span><br><span class="line">725</span><br><span class="line">726</span><br><span class="line">727</span><br><span class="line">728</span><br><span class="line">729</span><br><span class="line">730</span><br><span class="line">731</span><br><span class="line">732</span><br><span class="line">733</span><br><span class="line">734</span><br><span class="line">735</span><br><span class="line">736</span><br><span class="line">737</span><br><span class="line">738</span><br><span class="line">739</span><br><span class="line">740</span><br><span class="line">741</span><br><span class="line">742</span><br><span class="line">743</span><br><span class="line">744</span><br><span class="line">745</span><br><span class="line">746</span><br><span class="line">747</span><br><span class="line">748</span><br><span class="line">749</span><br><span class="line">750</span><br><span class="line">751</span><br><span class="line">752</span><br><span class="line">753</span><br><span class="line">754</span><br><span class="line">755</span><br><span class="line">756</span><br><span class="line">757</span><br><span class="line">758</span><br><span class="line">759</span><br><span class="line">760</span><br><span class="line">761</span><br><span class="line">762</span><br><span class="line">763</span><br><span class="line">764</span><br><span class="line">765</span><br><span class="line">766</span><br><span class="line">767</span><br><span class="line">768</span><br><span class="line">769</span><br><span class="line">770</span><br><span class="line">771</span><br><span class="line">772</span><br><span class="line">773</span><br><span class="line">774</span><br><span class="line">775</span><br><span class="line">776</span><br><span class="line">777</span><br><span class="line">778</span><br><span class="line">779</span><br><span class="line">780</span><br><span class="line">781</span><br><span class="line">782</span><br><span class="line">783</span><br><span class="line">784</span><br><span class="line">785</span><br><span class="line">786</span><br><span class="line">787</span><br><span class="line">788</span><br><span class="line">789</span><br><span class="line">790</span><br><span class="line">791</span><br><span class="line">792</span><br><span class="line">793</span><br><span class="line">794</span><br><span class="line">795</span><br><span class="line">796</span><br><span class="line">797</span><br><span class="line">798</span><br><span class="line">799</span><br><span class="line">800</span><br><span class="line">801</span><br><span class="line">802</span><br><span class="line">803</span><br><span class="line">804</span><br><span class="line">805</span><br><span class="line">806</span><br><span class="line">807</span><br><span class="line">808</span><br><span class="line">809</span><br><span class="line">810</span><br><span class="line">811</span><br><span class="line">812</span><br><span class="line">813</span><br><span class="line">814</span><br><span class="line">815</span><br><span class="line">816</span><br><span class="line">817</span><br><span class="line">818</span><br><span class="line">819</span><br><span class="line">820</span><br><span class="line">821</span><br><span class="line">822</span><br><span class="line">823</span><br><span class="line">824</span><br><span class="line">825</span><br><span class="line">826</span><br><span class="line">827</span><br><span class="line">828</span><br><span class="line">829</span><br><span class="line">830</span><br><span class="line">831</span><br><span class="line">832</span><br><span class="line">833</span><br><span class="line">834</span><br><span class="line">835</span><br><span class="line">836</span><br><span class="line">837</span><br><span class="line">838</span><br><span class="line">839</span><br><span class="line">840</span><br><span class="line">841</span><br><span class="line">842</span><br><span class="line">843</span><br><span class="line">844</span><br><span class="line">845</span><br><span class="line">846</span><br><span class="line">847</span><br><span class="line">848</span><br><span class="line">849</span><br><span class="line">850</span><br><span class="line">851</span><br><span class="line">852</span><br><span class="line">853</span><br><span class="line">854</span><br><span class="line">855</span><br><span class="line">856</span><br><span class="line">857</span><br><span class="line">858</span><br><span class="line">859</span><br><span class="line">860</span><br><span class="line">861</span><br><span class="line">862</span><br><span class="line">863</span><br><span class="line">864</span><br><span class="line">865</span><br><span class="line">866</span><br><span class="line">867</span><br><span class="line">868</span><br><span class="line">869</span><br><span class="line">870</span><br><span class="line">871</span><br><span class="line">872</span><br><span class="line">873</span><br><span class="line">874</span><br><span class="line">875</span><br><span class="line">876</span><br><span class="line">877</span><br><span class="line">878</span><br><span class="line">879</span><br><span class="line">880</span><br><span class="line">881</span><br><span class="line">882</span><br><span class="line">883</span><br><span class="line">884</span><br><span class="line">885</span><br><span class="line">886</span><br><span class="line">887</span><br><span class="line">888</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> java.util;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.function.Consumer;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span><br><span class="line"> * 允许的元素类型</span><br><span class="line"> * permits all elements,including null</span><br><span class="line"> * </span><br><span class="line"> * 与Vector的区别</span><br><span class="line"> * This class is roughly equivalent to </span><br><span class="line"> * Vector,except that it is unsynchronized</span><br><span class="line"> * </span><br><span class="line"> * 时间复杂度</span><br><span class="line"> * Time Spare:</span><br><span class="line"> * The size,isEmpty,get,set,iterator,</span><br><span class="line"> * and listIterator operations run in</span><br><span class="line"> * constant time.</span><br><span class="line"> * The add operation runs in amortized</span><br><span class="line"> * constant time,that is,adding n elements</span><br><span class="line"> * requires O(n) time.</span><br><span class="line"> * </span><br><span class="line"> * size与capacity</span><br><span class="line"> * increase the capacity of an ArrayList</span><br><span class="line"> * instance before adding a large number</span><br><span class="line"> * of elements using the ensureCapacity</span><br><span class="line"> * operation,which may reduce the amount</span><br><span class="line"> * of incremental reallocation.</span><br><span class="line"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//这里虽然使用E，但elementData数组的元素类型却是Object，</span></span><br><span class="line"><span class="comment">//E的作用比如在返回数据元素时，先进行强制类型转换成E类型</span></span><br><span class="line"><span class="keyword">public</span> class ArrayList&lt;E&gt; extends AbstractList&lt;E&gt; </span><br><span class="line">		implements List&lt;E&gt;,RandomAccess,Cloneable,java.io.Serializable &#123;</span><br><span class="line"><span class="comment">//6260652</span></span><br><span class="line"><span class="comment">//http://bugs.java.com/bugdatabase/view_bug.do?bug_id=6260652</span></span><br><span class="line">	</span><br><span class="line">	<span class="comment">//ArrayList的modCount是继承于AbstractList的，没有自己另外重新定义</span></span><br><span class="line">	</span><br><span class="line">	<span class="comment">//没看出来在哪里使用，因为使用ctrl+鼠标没发现被用到</span></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="built_in">int</span> DEFAULT_CAPACITY=<span class="number">10</span>;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//当创建的构造函数中的initialCapacity为0时，使用这一个</span></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">Object</span>[] EMPTY_ELEMENTDATA=&#123;&#125;;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//当创建的构造函数的参数为空时，使用这一个</span></span><br><span class="line">	<span class="comment">//虽然与EMPTY_E&gt;EMENTDATA都是初始长度为0的Object数组</span></span><br><span class="line">	<span class="comment">//不同之处在于如果新添加一个元素时</span></span><br><span class="line">	<span class="comment">//当elementData=EMPTY_ELEMENTDATA时，动态扩涨后的elementData.length为1</span></span><br><span class="line">	<span class="comment">//当elementData=DEFAULTCAPACITY_EMPTY_ELEMENTDATA时，动态扩涨后的elementData.length为10</span></span><br><span class="line">	<span class="comment">//并且，第一个元素添加之前elementData是等于EMPTY_ELEMENTDATA或DEFAULTCAPACITY_EMPTY_ELEMENTDATA</span></span><br><span class="line">	<span class="comment">//当第一个元素添加进来后，elementData就不再指向EMPTY_ELEMENTDATA或DEFAULTCAPACITY_EMPTY_ELEMENTDATA</span></span><br><span class="line">	<span class="comment">//所以EMPTY_ELEMENTDATA或DEFAULTCAPACITY_EMPTY_ELEMENTDATA的作用只是用来判断，</span></span><br><span class="line">	<span class="comment">//第一次添加一个元素时，elementData.length是设置为1还是10而已</span></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">Object</span>[] DEFAULTCAPACITY_EMPTY_ELEMENTDATA=&#123;&#125;;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//transient关键字是指在序列化时，对这个字段不进行存储</span></span><br><span class="line">	<span class="keyword">transient</span> <span class="keyword">Object</span>[] elementData;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//构造函数没有这个字段进行初始化，因为类中的基本数据类型</span></span><br><span class="line">	<span class="comment">//会被初始化为0</span></span><br><span class="line">	<span class="keyword">private</span> <span class="built_in">int</span> <span class="built_in">size</span>;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">public</span> ArrayList(<span class="built_in">int</span> initialCapacity)&#123;</span><br><span class="line">		<span class="keyword">if</span>(initialCapacity&gt;<span class="number">0</span>)&#123;</span><br><span class="line">			<span class="keyword">this</span>.elementData=<span class="keyword">new</span> <span class="keyword">Object</span>[initialCapacity];</span><br><span class="line">		&#125;<span class="keyword">else</span> <span class="keyword">if</span>(initialCapacity==<span class="number">0</span>)&#123;</span><br><span class="line">			<span class="keyword">this</span>.elementData=EMPTY_ELEMENTDATA;</span><br><span class="line">		&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Illegal Capacity: "</span>+initialCapacity);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">public</span> ArrayList()&#123;</span><br><span class="line">		<span class="keyword">this</span>.elementData=DEFAULTCAPACITY_EMPTY_ELEMENTDATA;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">public</span> ArrayList(Collection&lt;? extends E&gt; c)&#123;</span><br><span class="line">	    <span class="comment">/**</span><br><span class="line">	     * 之前的源码解读中有说过，这个数组转换其实是浅复制，并不是深复制</span><br><span class="line">	     * 而且java中提供的基本上都是浅复制</span><br><span class="line">		 * 这里使用的全是Object []，而不是E []</span><br><span class="line">		 * 因为Object是所有类的基类，所以在访问ArrayList中的某个元素时，访问到的是</span><br><span class="line">		 * Object类型。因此，只要在访问的元素前加上(E)就会转变成原有的类型。</span><br><span class="line">		 */</span></span><br><span class="line">		elementData=c.toArray();</span><br><span class="line">		<span class="comment">//对size赋值，并进行判断</span></span><br><span class="line">		<span class="keyword">if</span>((<span class="built_in">size</span>=elementData.length)!=<span class="number">0</span>)&#123;</span><br><span class="line">			<span class="keyword">if</span>(elementData.getClass()!=<span class="keyword">Object</span>[].class)&#123;</span><br><span class="line">				elementData=Arrays.copyOf(elementData, <span class="built_in">size</span>,<span class="keyword">Object</span>[].class);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">			<span class="keyword">this</span>.elementData=EMPTY_ELEMENTDATA;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//elementData的长度修改为size的长度</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> trimToSize()&#123;</span><br><span class="line">		<span class="comment">//结构性的改变，对modCount进行修改</span></span><br><span class="line">		modCount++;</span><br><span class="line">		<span class="keyword">if</span>(<span class="built_in">size</span>&lt;elementData.length)&#123;</span><br><span class="line">			elementData=(<span class="built_in">size</span>==<span class="number">0</span>)</span><br><span class="line">					?EMPTY_ELEMENTDATA</span><br><span class="line">					:Arrays.copyOf(elementData, <span class="built_in">size</span>);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">/**</span><br><span class="line">	 * ensureCapacity(int minCapacity)与</span><br><span class="line">	 * ensureCapacityInternal(int minCapacity)的区别为：</span><br><span class="line">	 * </span><br><span class="line">	 * 上一个如果elementData ==DEFAULTCAPACITY_EMPTY_ELEMENTDATA</span><br><span class="line">	 * 并且minCapacity&lt;DEFAULT_CAPACITY则不会调用ensureExplicitCapacity(minCapacity)</span><br><span class="line">	 * </span><br><span class="line">	 * 下一个是不管什么情况都会调用ensureExplicitCapacity(minCapacity)</span><br><span class="line">	 * </span><br><span class="line">	 */</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> ensureCapacity(<span class="built_in">int</span> minCapacity)&#123;</span><br><span class="line">		<span class="built_in">int</span> minExpand=(elementData !=DEFAULTCAPACITY_EMPTY_ELEMENTDATA)</span><br><span class="line">			? <span class="number">0</span></span><br><span class="line">			: DEFAULT_CAPACITY;</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">if</span>(minCapacity &gt; minExpand)&#123;</span><br><span class="line">			ensureExplicitCapacity(minCapacity);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">void</span> ensureCapacityInternal(<span class="built_in">int</span> minCapacity)&#123;</span><br><span class="line">		<span class="comment">//如果是DEDAULTCAPACITY_EMPTY_ELEMENTDATA模式下</span></span><br><span class="line">		<span class="comment">//则至少要扩充数要从DEFAULT_CAPACITY起</span></span><br><span class="line">		<span class="keyword">if</span>(elementData==DEFAULTCAPACITY_EMPTY_ELEMENTDATA)&#123;</span><br><span class="line">			minCapacity=Math.<span class="built_in">max</span>(DEFAULT_CAPACITY,minCapacity);</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">		ensureExplicitCapacity(minCapacity);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">void</span> ensureExplicitCapacity(<span class="built_in">int</span> minCapacity)&#123;</span><br><span class="line">		<span class="comment">//如果minCapacity-elementData.length&lt;=0，则没有进行扩充</span></span><br><span class="line">		<span class="comment">//为什么还要对modCount++呢？</span></span><br><span class="line">		<span class="comment">//因为add操作里面没有对modCount进行加1操作，所有与add相关使</span></span><br><span class="line">		<span class="comment">//容量扩充导致结构变化的modCount都放到ensureExplicitCapacity中了</span></span><br><span class="line">		modCount++;</span><br><span class="line">		</span><br><span class="line">		<span class="comment">//大于0说明容量不够，要重新扩充了</span></span><br><span class="line">		<span class="keyword">if</span>(minCapacity-elementData.length&gt;<span class="number">0</span>)&#123;</span><br><span class="line">			grow(minCapacity);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="built_in">int</span> MAX_ARRAY_SIZE=Integer.MAX_VALUE-<span class="number">8</span>;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">void</span> grow(<span class="built_in">int</span> minCapacity)&#123;</span><br><span class="line">		<span class="built_in">int</span> oldCapacity=elementData.length;</span><br><span class="line">		<span class="built_in">int</span> newCapacity=oldCapacity+(oldCapacity&gt;&gt;<span class="number">1</span>);</span><br><span class="line">		<span class="keyword">if</span>(newCapacity-minCapacity&lt;<span class="number">0</span>)&#123;</span><br><span class="line">			newCapacity=minCapacity;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">//int i=2147483647;</span></span><br><span class="line">		<span class="comment">//int j=i+1;</span></span><br><span class="line">		<span class="comment">//1：if(j&gt;i)为false;</span></span><br><span class="line">		<span class="comment">//2：if(j-i&gt;0)为true;</span></span><br><span class="line">		<span class="comment">//这就是为什么要在hugeCapacity中进行判断是否是小于0;</span></span><br><span class="line">		<span class="comment">//</span></span><br><span class="line">		<span class="keyword">if</span>(newCapacity-MAX_ARRAY_SIZE&gt;<span class="number">0</span>)&#123;</span><br><span class="line">			newCapacity=hugeCapacity(minCapacity);</span><br><span class="line">		&#125;</span><br><span class="line">		elementData=Arrays.copyOf(elementData, newCapacity);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="built_in">int</span> hugeCapacity(<span class="built_in">int</span> minCapacity)&#123;</span><br><span class="line">		<span class="keyword">if</span>(minCapacity&lt;<span class="number">0</span>)&#123;</span><br><span class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> OutOfMemoryError();</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">/**</span><br><span class="line">		 * 这里觉得有点多余，minCapacity若非负数，</span><br><span class="line">		 * 由grow方法中判断已经可以得到minCapacity会比MAX_ARRAY_SIZE大</span><br><span class="line">		 */</span></span><br><span class="line">		<span class="keyword">return</span> (minCapacity&gt;MAX_ARRAY_SIZE)?</span><br><span class="line">				Integer.MAX_VALUE:</span><br><span class="line">				MAX_ARRAY_SIZE;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">public</span> <span class="built_in">int</span> <span class="built_in">size</span>()&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="built_in">size</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">public</span> <span class="built_in">boolean</span> isEmpty()&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="built_in">size</span>==<span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">/**</span><br><span class="line">	 * ArrayList继承于AbstractList，而AbstractList中的contains</span><br><span class="line">	 * 是基于迭代器实现的。但ArrayList重写了contains，不是使用迭代器的方法</span><br><span class="line">	 * 而是使用indexOf方法，但indexOf方法是通过遍历级数来实现的，并不是通过迭代器  	 */</span></span><br><span class="line">	<span class="keyword">public</span> <span class="built_in">boolean</span> contains(<span class="keyword">Object</span> o)&#123;</span><br><span class="line">		<span class="keyword">return</span> indexOf(o)&gt;=<span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">/**</span><br><span class="line">	 * 找出元素第一次出现的位置</span><br><span class="line">	 * 如果没找到就返回-1</span><br><span class="line">	 */</span></span><br><span class="line">	<span class="keyword">public</span> <span class="built_in">int</span> indexOf(<span class="keyword">Object</span> o)&#123;</span><br><span class="line">		<span class="keyword">if</span>(o==<span class="keyword">null</span>)&#123;</span><br><span class="line">			<span class="keyword">for</span>(<span class="built_in">int</span> i=<span class="number">0</span>;i&lt;elementData.length;i++)&#123;</span><br><span class="line">				<span class="keyword">if</span>(elementData[i]==<span class="keyword">null</span>)&#123;</span><br><span class="line">					<span class="keyword">return</span> i;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span>&#123;</span><br><span class="line">			<span class="keyword">for</span>(<span class="built_in">int</span> i=<span class="number">0</span>;i&lt;elementData.length;i++)&#123;</span><br><span class="line">				<span class="keyword">if</span>(elementData[i].equals(o))&#123;</span><br><span class="line">					<span class="keyword">return</span> i;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">public</span> <span class="built_in">int</span> lastIndexOf(<span class="keyword">Object</span> o)&#123;</span><br><span class="line">		<span class="keyword">if</span>(o==<span class="keyword">null</span>)&#123;</span><br><span class="line">			<span class="keyword">for</span>(<span class="built_in">int</span> i=elementData.length-<span class="number">1</span>;i&gt;=<span class="number">0</span>;i--)&#123;</span><br><span class="line">				<span class="keyword">if</span>(elementData[i]==<span class="keyword">null</span>)&#123;</span><br><span class="line">					<span class="keyword">return</span> i;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span>&#123;</span><br><span class="line">			<span class="keyword">for</span>(<span class="built_in">int</span> i=elementData.length-<span class="number">1</span>;i&gt;=<span class="number">0</span>;i--)&#123;</span><br><span class="line">				<span class="keyword">if</span>(elementData[i].equals(o))&#123;</span><br><span class="line">					<span class="keyword">return</span> i;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">/**</span><br><span class="line">	 * 是一个浅复制</span><br><span class="line">	 */</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">Object</span> clone()&#123;</span><br><span class="line">		<span class="keyword">try</span>&#123;</span><br><span class="line">			<span class="comment">//super.clone中的super是AbstractList</span></span><br><span class="line">			<span class="comment">//而ArrayList中的clone()是继承于Object中的clone()方法</span></span><br><span class="line">			<span class="comment">//所以实质上调用的是Object中的clone()方法</span></span><br><span class="line">			<span class="comment">//Object中的clone方法只是将各个数据域进行复制创建而已</span></span><br><span class="line">			<span class="comment">//所以，如果数据域只是基本数据类型，或是类似于String这种类</span></span><br><span class="line">			<span class="comment">//则不会有多大问题，可以认为是深复制，但其它基本上涉及到引用</span></span><br><span class="line">			<span class="comment">//大部分都为浅复制。</span></span><br><span class="line">			ArrayList&lt;?&gt; v=(ArrayList&lt;?&gt;)<span class="keyword">super</span>.clone();</span><br><span class="line">			</span><br><span class="line">			<span class="comment">//这里如果elementData里的元素是基本类型或是类似于String</span></span><br><span class="line">			<span class="comment">//ArrayList是深复制，否则就是浅复制</span></span><br><span class="line">			<span class="comment">//例如elementData的对象是可改变对象的引用</span></span><br><span class="line">			<span class="comment">//如：</span></span><br><span class="line">			<span class="comment">//class Test012&#123;</span></span><br><span class="line">			<span class="comment">//	public String s1;	</span></span><br><span class="line">			<span class="comment">//	public Test012(String s1)&#123;</span></span><br><span class="line">			<span class="comment">//		this.s1=s1;</span></span><br><span class="line">			<span class="comment">//	&#125;</span></span><br><span class="line">			<span class="comment">//&#125;</span></span><br><span class="line">			<span class="comment">//则如果改变了elementData中某个元素的s1的值</span></span><br><span class="line">			<span class="comment">//则会导致两都都修改，因为elementData只是引用</span></span><br><span class="line">			<span class="comment">//不同，但引用的值（即元素）是一样的</span></span><br><span class="line">			v.elementData=Arrays.copyOf(elementData, <span class="built_in">size</span>);</span><br><span class="line">			v.modCount=<span class="number">0</span>;</span><br><span class="line">			<span class="keyword">return</span> v;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">catch</span>(CloneNotSupportedException e)&#123;</span><br><span class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> InternalError(e);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">/**</span><br><span class="line">	 * 同clone，如果elementData不是像String这类非可变的对象</span><br><span class="line">	 * 则对返回的Object[]修改对象里面的值，也会同步到原elementData</span><br><span class="line">	 * 中的对应对象里面的值。</span><br><span class="line">	 */</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">Object</span>[] toArray()&#123;</span><br><span class="line">		<span class="keyword">return</span> Arrays.copyOf(elementData, <span class="built_in">size</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">/**</span><br><span class="line">	 * 第一种a.length&lt;size时，不会直接修改a</span><br><span class="line">	 * 所以需要使a=toArray(T[] a)</span><br><span class="line">	 * 才会达到修改a的目的</span><br><span class="line">	 * </span><br><span class="line">	 * 第二种a.leng&gt;=size时，会直接修改a</span><br><span class="line">	 * 所以就不需要令a=返回值了</span><br><span class="line">	 */</span></span><br><span class="line">	<span class="keyword">public</span> &lt;T&gt; T[] toArray(T[] a)&#123;</span><br><span class="line">		<span class="keyword">if</span>(a.length&lt;<span class="built_in">size</span>)&#123;</span><br><span class="line">			<span class="keyword">return</span> (T[])Arrays.copyOf(elementData,<span class="built_in">size</span>,a.getClass());</span><br><span class="line">		&#125;</span><br><span class="line">		System.arraycopy(elementData, <span class="number">0</span>, a, <span class="number">0</span>, <span class="built_in">size</span>);</span><br><span class="line">		<span class="keyword">if</span>(a.length&gt;<span class="built_in">size</span>)&#123;</span><br><span class="line">			a[<span class="built_in">size</span>]=<span class="keyword">null</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> a;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	E elementData(<span class="built_in">int</span> index)&#123;</span><br><span class="line">		<span class="keyword">return</span> (E) elementData[index];</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">public</span> E <span class="built_in">get</span>(<span class="built_in">int</span> index)&#123;</span><br><span class="line">		rangeCheck(index);</span><br><span class="line">		<span class="keyword">return</span> elementData(index);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">public</span> E <span class="built_in">set</span>(<span class="built_in">int</span> index,E element)&#123;</span><br><span class="line">		rangeCheck(index);</span><br><span class="line">	</span><br><span class="line">		E original=elementData(index);</span><br><span class="line">		elementData[index]=element;</span><br><span class="line">		<span class="keyword">return</span> original;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">public</span> <span class="built_in">boolean</span> <span class="built_in">add</span>(E e)&#123;</span><br><span class="line">		ensureCapacityInternal(<span class="built_in">size</span>+<span class="number">1</span>);</span><br><span class="line">		elementData[<span class="built_in">size</span>++]=e;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="built_in">add</span>(<span class="built_in">int</span> index,E element)&#123;</span><br><span class="line">		rangeCheckForAdd(index);</span><br><span class="line">		ensureCapacityInternal(<span class="built_in">size</span>+<span class="number">1</span>);</span><br><span class="line">		</span><br><span class="line">		<span class="comment">//使用数组复制将index开始，第个元素对应的往后移一位</span></span><br><span class="line">		System.arraycopy(elementData, index, elementData, index+<span class="number">1</span>, <span class="built_in">size</span>-index);</span><br><span class="line">		elementData[index]=element;</span><br><span class="line">		<span class="built_in">size</span>++;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">public</span> E remove(<span class="built_in">int</span> index)&#123;</span><br><span class="line">		rangeCheck(index);</span><br><span class="line">		</span><br><span class="line">		modCount++;</span><br><span class="line">		E original=elementData(index);</span><br><span class="line">		<span class="keyword">if</span>(<span class="built_in">size</span>-index-<span class="number">1</span>&gt;<span class="number">0</span>)&#123;</span><br><span class="line">			System.arraycopy(elementData, index+<span class="number">1</span>, elementData, index, <span class="built_in">size</span>-index-<span class="number">1</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">//让垃圾回收器知道，这个元素无效，可以回收了</span></span><br><span class="line">		elementData[--<span class="built_in">size</span>]=<span class="keyword">null</span>;</span><br><span class="line">		<span class="keyword">return</span> original;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//与remove的区别：</span></span><br><span class="line">	<span class="comment">//1：没有对index进行检查</span></span><br><span class="line">	<span class="comment">//2：没有返回值</span></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">void</span> fastRemove(<span class="built_in">int</span> index)&#123;</span><br><span class="line">		modCount++;</span><br><span class="line">		<span class="keyword">if</span>(<span class="built_in">size</span>-index-<span class="number">1</span>&gt;<span class="number">0</span>)&#123;</span><br><span class="line">			System.arraycopy(elementData, index+<span class="number">1</span>, elementData, index, <span class="built_in">size</span>-index-<span class="number">1</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		elementData[--<span class="built_in">size</span>]=<span class="keyword">null</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">public</span> <span class="built_in">boolean</span> remove(<span class="keyword">Object</span> o)&#123;</span><br><span class="line">		<span class="keyword">if</span>(o==<span class="keyword">null</span>)&#123;</span><br><span class="line">			<span class="keyword">for</span>(<span class="built_in">int</span> i=<span class="number">0</span>;i&lt;<span class="built_in">size</span>;i++)&#123;</span><br><span class="line">				<span class="keyword">if</span>(elementData[i]==<span class="keyword">null</span>)&#123;</span><br><span class="line">					<span class="comment">//不需要判断位置，也不需要返回值</span></span><br><span class="line">					<span class="comment">//所以直接调用fastRemove函数</span></span><br><span class="line">					fastRemove(i);</span><br><span class="line">					<span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span>&#123;</span><br><span class="line">			<span class="keyword">for</span>(<span class="built_in">int</span> i=<span class="number">0</span>;i&lt;<span class="built_in">size</span>;i++)&#123;</span><br><span class="line">				<span class="keyword">if</span>(elementData[i].equals(o))&#123;</span><br><span class="line">					fastRemove(i);</span><br><span class="line">					<span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//clear不是仅仅将size设置为0，也不是直接将elementData设置为null。</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="built_in">clear</span>()&#123;</span><br><span class="line">		modCount++;</span><br><span class="line">		<span class="keyword">for</span>(<span class="built_in">int</span> i=<span class="built_in">size</span>-<span class="number">1</span>;i&gt;=<span class="number">0</span>;i--)&#123;</span><br><span class="line">			elementData[i]=<span class="keyword">null</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">size</span>=<span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">public</span> <span class="built_in">boolean</span> addAll(Collection&lt;? extends E&gt; c)&#123;</span><br><span class="line">		<span class="keyword">Object</span> a[]=c.toArray();</span><br><span class="line">		<span class="built_in">int</span> numNew=a.length;</span><br><span class="line">		ensureCapacityInternal(numNew+<span class="built_in">size</span>);</span><br><span class="line">		System.arraycopy(a, <span class="number">0</span>, elementData, <span class="built_in">size</span>, numNew);</span><br><span class="line">		<span class="built_in">size</span>+=numNew;</span><br><span class="line">		<span class="keyword">return</span> numNew!=<span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">public</span> <span class="built_in">boolean</span> addAll(<span class="built_in">int</span> index,Collection&lt;? extends E&gt; c)&#123;</span><br><span class="line">		rangeCheckForAdd(index);</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">Object</span> a[]=c.toArray();</span><br><span class="line">		<span class="built_in">int</span> numNew=a.length;</span><br><span class="line">		ensureCapacityInternal(numNew+<span class="built_in">size</span>);</span><br><span class="line">		System.arraycopy(elementData, index, elementData, index+numNew, <span class="built_in">size</span>-index);</span><br><span class="line">		System.arraycopy(a, <span class="number">0</span>, elementData, index,numNew);</span><br><span class="line">		<span class="built_in">size</span>+=numNew;</span><br><span class="line">		<span class="keyword">return</span> numNew!=<span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">/**</span><br><span class="line">	 * [fromIndex,toIndex)</span><br><span class="line">	 */</span></span><br><span class="line">	<span class="keyword">protected</span> <span class="keyword">void</span> removeRange(<span class="built_in">int</span> fromIndex,<span class="built_in">int</span> toIndex)&#123;</span><br><span class="line">		modCount++;</span><br><span class="line">		System.arraycopy(elementData,toIndex,elementData,fromIndex,<span class="built_in">size</span>-toIndex);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">public</span> <span class="built_in">boolean</span> removeAll(Collection&lt;?&gt; c)&#123;</span><br><span class="line">		Objects.requireNonNull(c);</span><br><span class="line">		<span class="keyword">return</span> batchRemove(c,<span class="keyword">false</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">public</span> <span class="built_in">boolean</span> retainAll(Collection&lt;?&gt; c)&#123;</span><br><span class="line">		Objects.requireNonNull(c);</span><br><span class="line">		<span class="keyword">return</span> batchRemove(c,<span class="keyword">true</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">private</span> <span class="built_in">boolean</span> batchRemove(Collection&lt;?&gt; c,<span class="built_in">boolean</span> complement)&#123;</span><br><span class="line">		<span class="keyword">final</span> <span class="keyword">Object</span>[] elementData=<span class="keyword">this</span>.elementData;</span><br><span class="line">		<span class="built_in">int</span> r=<span class="number">0</span>,w=<span class="number">0</span>;</span><br><span class="line">		<span class="built_in">boolean</span> modified=<span class="keyword">false</span>;</span><br><span class="line">		<span class="keyword">try</span>&#123;</span><br><span class="line">			<span class="keyword">for</span>(;r&lt;<span class="built_in">size</span>;r++)&#123;</span><br><span class="line">			    <span class="comment">//这里很巧妙了利用了一个complement的boolean变量来判断是删除c中的元素还是保留c中的元素。</span></span><br><span class="line">				<span class="keyword">if</span>(c.contains(elementData[r])==complement)&#123;</span><br><span class="line">					elementData[w++]=elementData[r];</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">finally</span>&#123;</span><br><span class="line">			<span class="keyword">if</span>(r!=<span class="built_in">size</span>)&#123;</span><br><span class="line">				System.arraycopy(elementData,r,elementData,w,<span class="built_in">size</span>-r);</span><br><span class="line">				w+=<span class="built_in">size</span>-r;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">if</span>(w!=<span class="built_in">size</span>)&#123;</span><br><span class="line">				<span class="keyword">for</span>(<span class="built_in">int</span> i=w;i&lt;<span class="built_in">size</span>;i++)&#123;</span><br><span class="line">					elementData[i]=<span class="keyword">null</span>;</span><br><span class="line">				&#125;</span><br><span class="line">				modCount+=<span class="built_in">size</span>-w;</span><br><span class="line">				<span class="built_in">size</span>=w;</span><br><span class="line">				modified=<span class="keyword">true</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> modified;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">/**</span><br><span class="line">	 * 既然要将ArrayList的字段序列化（即将elementData序列化），</span><br><span class="line">	 * 那为什么又要用transient修饰elementData呢？回想ArrayList的自动扩容机制，</span><br><span class="line">	 * elementData数组相当于容器，当容器不足时就会再扩充容量，</span><br><span class="line">	 * 但是容器的容量往往都是大于或者等于ArrayList所存元素的个数。</span><br><span class="line">	 * 比如，现在实际有了8个元素，那么elementData数组的容量可能是8x1.5=12，</span><br><span class="line">	 * 如果直接序列化elementData数组，那么就会浪费4个元素的空间，特别是当元素个数非常多时，</span><br><span class="line">	 * 这种浪费是非常不合算的。所以ArrayList的设计者将elementData设计为transient，</span><br><span class="line">	 * 然后在writeObject方法中手动将其序列化，并且只序列化了实际存储的那些元素，而不是整个数组。</span><br><span class="line">	 * </span><br><span class="line">	 * 不过，这个方法与后面readObject方法都是private，而且里面其它地方也没有用到。      * 这两个方法在序列化中有很好的用途：</span><br><span class="line">	 * 一个类实现了序列化的接口（其实只是一个标识），那么它里面不管是基本数据类型还是类对象（只要这个对象的类也实现了序列化接口）</span><br><span class="line">	 * 那么就可以进行序列化。</span><br><span class="line">	 * 感觉其实就是按类在内存中存储，整块搬到硬盘中存储。</span><br><span class="line">	 */</span></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">void</span> writeObject(java.io.ObjectOutputStream s)</span><br><span class="line">		<span class="keyword">throws</span> java.io.IOException&#123;</span><br><span class="line">		<span class="built_in">int</span> expectedModCount=modCount;</span><br><span class="line">		s.defaultWriteObject();</span><br><span class="line">		s.writeInt(<span class="built_in">size</span>);</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">for</span>(<span class="built_in">int</span> i=<span class="number">0</span>;i&lt;<span class="built_in">size</span>;i++)&#123;</span><br><span class="line">			s.writeObject(elementData[i]);</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">if</span>(modCount!=expectedModCount)&#123;</span><br><span class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">void</span> readObject(java.io.ObjectInputStream s)</span><br><span class="line">		<span class="keyword">throws</span> java.io.IOException,ClassNotFoundException&#123;</span><br><span class="line">		elementData=EMPTY_ELEMENTDATA;</span><br><span class="line">		</span><br><span class="line">		s.defaultReadObject();</span><br><span class="line">		s.readInt();</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">if</span>(<span class="built_in">size</span>&gt;<span class="number">0</span>)&#123;</span><br><span class="line">			ensureCapacityInternal(<span class="built_in">size</span>);</span><br><span class="line">			<span class="keyword">Object</span> a[]=elementData;</span><br><span class="line">			<span class="keyword">for</span>(<span class="built_in">int</span> i=<span class="number">0</span>;i&lt;<span class="built_in">size</span>;i++)&#123;</span><br><span class="line">				a[i]=s.readObject();</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">public</span> ListIterator&lt;E&gt; listIterator(<span class="built_in">int</span> index)&#123;</span><br><span class="line">		<span class="keyword">if</span>(index&lt;<span class="number">0</span> || index&gt;<span class="built_in">size</span>)&#123;</span><br><span class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> IndexOutOfBoundsException(<span class="string">"Index: "</span>+index);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">new</span> ListItr(index);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">public</span> ListIterator&lt;E&gt; listIterator()&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">new</span> ListItr(<span class="number">0</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">public</span> Iterator&lt;E&gt; iterator()&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">new</span> Itr();</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">private</span> class Itr implements Iterator&lt;E&gt;&#123;</span><br><span class="line">		<span class="built_in">int</span> <span class="built_in">cursor</span>;</span><br><span class="line">		<span class="built_in">int</span> lastRet=-<span class="number">1</span>;</span><br><span class="line">		<span class="built_in">int</span> expectedModCount=modCount;</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">public</span> <span class="built_in">boolean</span> hasNext()&#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="built_in">cursor</span> != <span class="built_in">size</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">		<span class="comment">//这里与AbstractList不同，这里是直接通过elementData来操作，而不是通过ArrayList中的get方法来获取。但下面的remove方法又是按ArrayList的remove方法来处理。其实没什么差别，只不过一个是通过调用函数来处理，一个是通过直接对数据进行处理。</span></span><br><span class="line">		<span class="keyword">public</span> E next()&#123;</span><br><span class="line">			checkForComodification();</span><br><span class="line">			<span class="built_in">int</span> i=<span class="built_in">cursor</span>;</span><br><span class="line">			<span class="keyword">if</span>(i &gt;= <span class="built_in">size</span>)&#123;</span><br><span class="line">				<span class="keyword">throw</span> <span class="keyword">new</span> NoSuchElementException();</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">Object</span> elementData[]=ArrayList.<span class="keyword">this</span>.elementData;</span><br><span class="line">			<span class="keyword">if</span>(i &gt;= elementData.length)&#123;</span><br><span class="line">				<span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="built_in">cursor</span>=i+<span class="number">1</span>;</span><br><span class="line">			<span class="keyword">return</span> (E)elementData[lastRet=i];</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">		<span class="comment">//删除的是cursor的前一个元素</span></span><br><span class="line">		<span class="keyword">public</span> <span class="keyword">void</span> remove()&#123;</span><br><span class="line">			<span class="keyword">if</span>(lastRet&lt;<span class="number">0</span>)&#123;</span><br><span class="line">				<span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException();</span><br><span class="line">			&#125;</span><br><span class="line">			checkForComodification();</span><br><span class="line">			</span><br><span class="line">			<span class="keyword">try</span>&#123;</span><br><span class="line">				ArrayList.<span class="keyword">this</span>.remove(lastRet);</span><br><span class="line">				<span class="built_in">cursor</span>=lastRet;</span><br><span class="line">				lastRet=-<span class="number">1</span>;</span><br><span class="line">				expectedModCount=modCount;</span><br><span class="line">			&#125;<span class="keyword">catch</span>(IndexOutOfBoundsException ex)&#123;</span><br><span class="line">				<span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">public</span> <span class="keyword">void</span> forEachRemaining(Consumer&lt;? <span class="keyword">super</span> E&gt; consumer)&#123;</span><br><span class="line">			Objects.requireNonNull(consumer);</span><br><span class="line">			<span class="keyword">final</span> <span class="built_in">int</span> <span class="built_in">size</span>=ArrayList.<span class="keyword">this</span>.<span class="built_in">size</span>;</span><br><span class="line">			<span class="built_in">int</span> i=<span class="built_in">cursor</span>;</span><br><span class="line">			<span class="keyword">if</span>(i&gt;=<span class="built_in">size</span>)&#123;</span><br><span class="line">				<span class="keyword">return</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">final</span> <span class="keyword">Object</span>[] elementData=ArrayList.<span class="keyword">this</span>.elementData;</span><br><span class="line">			<span class="keyword">if</span>(i&gt;=elementData.length)&#123;</span><br><span class="line">				<span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">while</span>(i!=<span class="built_in">size</span> &amp;&amp; modCount==expectedModCount)&#123;</span><br><span class="line">				consumer.accept((E) elementData[i++]);</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="built_in">cursor</span>=i;</span><br><span class="line">			lastRet=i-<span class="number">1</span>;</span><br><span class="line">			checkForComodification();</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">final</span> <span class="keyword">void</span> checkForComodification()&#123;</span><br><span class="line">			<span class="keyword">if</span>(modCount != expectedModCount)&#123;</span><br><span class="line">				<span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">private</span> class ListItr extends Itr implements ListIterator&lt;E&gt;&#123;</span><br><span class="line">		ListItr(<span class="built_in">int</span> index)&#123;</span><br><span class="line">			<span class="keyword">super</span>();</span><br><span class="line">			<span class="built_in">cursor</span>=index;</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">public</span> <span class="built_in">boolean</span> hasPrevious()&#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="built_in">cursor</span> != <span class="number">0</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">public</span> <span class="built_in">int</span> nextIndex()&#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="built_in">cursor</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">public</span> <span class="built_in">int</span> previousIndex()&#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="built_in">cursor</span>-<span class="number">1</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">public</span> E previous()&#123;</span><br><span class="line">			checkForComodification();</span><br><span class="line">			<span class="built_in">int</span> i=<span class="built_in">cursor</span>-<span class="number">1</span>;</span><br><span class="line">			<span class="keyword">if</span>(i&lt;<span class="number">0</span>)&#123;</span><br><span class="line">				<span class="keyword">throw</span> <span class="keyword">new</span> NoSuchElementException();</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="comment">//这里为什么要重新定义一个Object[]</span></span><br><span class="line">			<span class="comment">//用原来的不可以么？</span></span><br><span class="line">			<span class="keyword">Object</span> elementData[]=ArrayList.<span class="keyword">this</span>.elementData;</span><br><span class="line">			<span class="keyword">if</span>(i&gt;=elementData.length)&#123;</span><br><span class="line">				<span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="built_in">cursor</span>=i;</span><br><span class="line">			<span class="keyword">return</span> (E) elementData[lastRet=i];</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">public</span> <span class="keyword">void</span> <span class="built_in">set</span>(E e)&#123;</span><br><span class="line">			<span class="keyword">if</span>(lastRet &lt; <span class="number">0</span>)&#123;</span><br><span class="line">				<span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException();</span><br><span class="line">			&#125;</span><br><span class="line">			checkForComodification();</span><br><span class="line">			</span><br><span class="line">			<span class="keyword">try</span>&#123;</span><br><span class="line">				ArrayList.<span class="keyword">this</span>.<span class="built_in">set</span>(lastRet, e);</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">catch</span>(IndexOutOfBoundsException ex)&#123;</span><br><span class="line">				<span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">public</span> <span class="keyword">void</span> <span class="built_in">add</span>(E e)&#123;</span><br><span class="line">			checkForComodification();</span><br><span class="line">			<span class="keyword">try</span>&#123;</span><br><span class="line">				<span class="built_in">int</span> i=<span class="built_in">cursor</span>;</span><br><span class="line">				ArrayList.<span class="keyword">this</span>.<span class="built_in">add</span>(i,e);</span><br><span class="line">				<span class="built_in">cursor</span>=i+<span class="number">1</span>;</span><br><span class="line">				lastRet=i;</span><br><span class="line">				expectedModCount=modCount;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">catch</span>(IndexOutOfBoundsException ex)&#123;</span><br><span class="line">				<span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;	</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">public</span> List&lt;E&gt; subList(<span class="built_in">int</span> fromIndex,<span class="built_in">int</span> toIndex)&#123;</span><br><span class="line">		subListRangeCheck(fromIndex,toIndex,<span class="built_in">size</span>);</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">new</span> SubList(<span class="keyword">this</span>,<span class="number">0</span>,fromIndex,toIndex);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">static</span> <span class="keyword">void</span> subListRangeCheck(<span class="built_in">int</span> fromIndex,<span class="built_in">int</span> toIndex,<span class="built_in">int</span> <span class="built_in">size</span>)&#123;</span><br><span class="line">		<span class="keyword">if</span>(fromIndex&lt;<span class="number">0</span>)&#123;</span><br><span class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> IndexOutOfBoundsException(<span class="string">"fromIndex = "</span>+fromIndex);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(toIndex&gt;<span class="built_in">size</span>)&#123;</span><br><span class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> IndexOutOfBoundsException(<span class="string">"toIndex = "</span>+toIndex);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(fromIndex&gt;toIndex)&#123;</span><br><span class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"fromIndex("</span>+fromIndex+<span class="string">") &gt; toIndex("</span>+toIndex+<span class="string">")"</span>);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> class SubList extends AbstractList&lt;E&gt; implements RandomAccess&#123;</span><br><span class="line">		<span class="keyword">private</span> <span class="keyword">final</span> AbstractList&lt;E&gt; parent;</span><br><span class="line">		<span class="keyword">private</span> <span class="keyword">final</span> <span class="built_in">int</span> parentOffset;</span><br><span class="line">		<span class="keyword">private</span> <span class="keyword">final</span> <span class="built_in">int</span> offset;</span><br><span class="line">		<span class="built_in">int</span> <span class="built_in">size</span>;</span><br><span class="line">		</span><br><span class="line">		SubList(AbstractList&lt;E&gt; parent,</span><br><span class="line">				<span class="built_in">int</span> offset,<span class="built_in">int</span> fromIndex,<span class="built_in">int</span> toIndex)&#123;</span><br><span class="line">			<span class="keyword">this</span>.parent=parent;</span><br><span class="line">			<span class="comment">//好像是为了防止子链的子链</span></span><br><span class="line">			<span class="comment">//例如第一个子链是[3,12)</span></span><br><span class="line">			<span class="comment">//第二个子链是第一个子链的子链取[1,3)</span></span><br><span class="line">			<span class="comment">//按道理第二个子链处理的是原链的[4,6)</span></span><br><span class="line">			<span class="comment">//如果没有offset就变成原连的[1,3)</span></span><br><span class="line">			<span class="comment">//第一次是ArrayList.subList获取子链List</span></span><br><span class="line">			<span class="comment">//第二次获取子链是SubList的subList</span></span><br><span class="line">			<span class="comment">//不再是ArrayList的subList了</span></span><br><span class="line">			<span class="comment">//调用ArrayList.subList中的offset参数值是0</span></span><br><span class="line">			<span class="comment">//但调用SubList的subList的offset参数值</span></span><br><span class="line">			<span class="comment">//是SubList中的的成员变量offset，而不是0</span></span><br><span class="line">			<span class="keyword">this</span>.parentOffset=fromIndex;</span><br><span class="line">			<span class="keyword">this</span>.offset=offset+fromIndex;</span><br><span class="line">			<span class="keyword">this</span>.<span class="built_in">size</span>=toIndex-fromIndex;</span><br><span class="line">			<span class="keyword">this</span>.modCount=ArrayList.<span class="keyword">this</span>.modCount;</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">		<span class="comment">/**</span><br><span class="line">		 * 为什么set与get用的是ArrayList对应的elementData</span><br><span class="line">		 * 而其它add,remove等用的是parent</span><br><span class="line">		 * 虽然都可以完成，为什么不进行统一？</span><br><span class="line">		 */</span></span><br><span class="line">		<span class="keyword">public</span> E <span class="built_in">set</span>(<span class="built_in">int</span> index,E e)&#123;</span><br><span class="line">			<span class="comment">//这里是从新定义了rangeCheck函数，不是</span></span><br><span class="line">			<span class="comment">//ArrayList中的rangeCheck，所以对应的</span></span><br><span class="line">			<span class="comment">//index也不需要加上偏移值，因为函数里的size</span></span><br><span class="line">			<span class="comment">//指的是SubList中的size</span></span><br><span class="line">			rangeCheck(index);</span><br><span class="line">			checkForComodification();</span><br><span class="line">			E oldValue=ArrayList.<span class="keyword">this</span>.elementData(offset+index);</span><br><span class="line">			ArrayList.<span class="keyword">this</span>.elementData[offset+index]=e;</span><br><span class="line">			<span class="keyword">return</span> oldValue;</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">public</span> E <span class="built_in">get</span>(<span class="built_in">int</span> index)&#123;</span><br><span class="line">			rangeCheck(index);</span><br><span class="line">			checkForComodification();</span><br><span class="line">			<span class="keyword">return</span> ArrayList.<span class="keyword">this</span>.elementData(offset+index);</span><br><span class="line">		&#125;</span><br><span class="line">			</span><br><span class="line">		<span class="keyword">public</span> <span class="built_in">int</span> <span class="built_in">size</span>()&#123;</span><br><span class="line">			checkForComodification();</span><br><span class="line">			<span class="keyword">return</span> <span class="built_in">size</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">public</span> <span class="keyword">void</span> <span class="built_in">add</span>(<span class="built_in">int</span> index,E e)&#123;</span><br><span class="line">			rangeCheckForAdd(index);</span><br><span class="line">			checkForComodification();</span><br><span class="line">			<span class="comment">//可以用offset的这种方式，此时应该用ArrayList的elementData</span></span><br><span class="line">			<span class="comment">//也可以用parentOffset这种方式，此时用parent的elementData</span></span><br><span class="line">			parent.<span class="built_in">add</span>(parentOffset+index,e);</span><br><span class="line">			<span class="keyword">this</span>.modCount=parent.modCount;</span><br><span class="line">			<span class="keyword">this</span>.<span class="built_in">size</span>++;</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">public</span> E remove(<span class="built_in">int</span> index)&#123;</span><br><span class="line">			rangeCheck(index);</span><br><span class="line">			checkForComodification();</span><br><span class="line">			E result=parent.remove(parentOffset+index);</span><br><span class="line">			<span class="keyword">this</span>.modCount=parent.modCount;</span><br><span class="line">			<span class="built_in">size</span>--;</span><br><span class="line">			<span class="keyword">return</span> result;</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">protected</span> <span class="keyword">void</span> removeRange(<span class="built_in">int</span> fromIndex,<span class="built_in">int</span> toIndex)&#123;</span><br><span class="line">			checkForComodification();</span><br><span class="line">			parent.removeRange(parentOffset+fromIndex,</span><br><span class="line">								parentOffset+toIndex);</span><br><span class="line">			<span class="keyword">this</span>.modCount=parent.modCount;</span><br><span class="line">			<span class="keyword">this</span>.<span class="built_in">size</span>=<span class="keyword">this</span>.<span class="built_in">size</span>-(toIndex-fromIndex);</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">public</span> <span class="built_in">boolean</span> addAll(Collection&lt;? extends E&gt; c)&#123;</span><br><span class="line">			<span class="keyword">return</span> addAll(<span class="keyword">this</span>.<span class="built_in">size</span>,c);</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">		<span class="comment">//用parent这种方式调用的话，会依次递归调用</span></span><br><span class="line">		<span class="comment">//子子链List调用addAll，调用的是子链List的addAll</span></span><br><span class="line">		<span class="comment">//子链List调用addAll，调用的是ArrayList的addAll</span></span><br><span class="line">		<span class="keyword">public</span> <span class="built_in">boolean</span> addAll(<span class="built_in">int</span> index,Collection&lt;? extends E&gt; c)&#123;</span><br><span class="line">			rangeCheckForAdd(index);</span><br><span class="line">			<span class="built_in">int</span> cSize=c.<span class="built_in">size</span>();</span><br><span class="line">			<span class="keyword">if</span>(cSize==<span class="number">0</span>)&#123;</span><br><span class="line">				<span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			</span><br><span class="line">			checkForComodification();</span><br><span class="line">			parent.addAll(index+parentOffset,c);</span><br><span class="line">			<span class="keyword">this</span>.modCount=parent.modCount;</span><br><span class="line">			<span class="keyword">this</span>.<span class="built_in">size</span>+=c.<span class="built_in">size</span>();</span><br><span class="line">			<span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">public</span> Iterator&lt;E&gt; iterator()&#123;</span><br><span class="line">			<span class="keyword">return</span> listIterator();</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">public</span> ListIterator&lt;E&gt; listIterator(<span class="keyword">final</span> <span class="built_in">int</span> index)&#123;</span><br><span class="line">			checkForComodification();</span><br><span class="line">			rangeCheckForAdd(index);</span><br><span class="line">			<span class="keyword">final</span> <span class="built_in">int</span> offset=<span class="keyword">this</span>.offset;</span><br><span class="line">			</span><br><span class="line">			<span class="keyword">return</span> <span class="keyword">new</span> ListIterator&lt;E&gt;()&#123;</span><br><span class="line">				<span class="built_in">int</span> <span class="built_in">cursor</span>=index;</span><br><span class="line">				<span class="built_in">int</span> lastRet=-<span class="number">1</span>;</span><br><span class="line">				<span class="built_in">int</span> expectedModCount=ArrayList.<span class="keyword">this</span>.modCount;</span><br><span class="line">				</span><br><span class="line">				<span class="keyword">public</span> <span class="built_in">boolean</span> hasNext()&#123;</span><br><span class="line">					<span class="keyword">return</span> <span class="built_in">cursor</span> !=SubList.<span class="keyword">this</span>.<span class="built_in">size</span>;</span><br><span class="line">				&#125;</span><br><span class="line">				</span><br><span class="line">				<span class="keyword">public</span> E next()&#123;</span><br><span class="line">					checkForComodification();</span><br><span class="line">					<span class="built_in">int</span> i=<span class="built_in">cursor</span>;</span><br><span class="line">					<span class="keyword">if</span>(i &gt;= SubList.<span class="keyword">this</span>.<span class="built_in">size</span>)&#123;</span><br><span class="line">						<span class="keyword">throw</span> <span class="keyword">new</span> NoSuchElementException();</span><br><span class="line">					&#125;</span><br><span class="line">					<span class="keyword">Object</span> elementData[]=ArrayList.<span class="keyword">this</span>.elementData;</span><br><span class="line">					<span class="keyword">if</span>(offset+i&gt;=elementData.length)&#123;</span><br><span class="line">						<span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();</span><br><span class="line">					&#125;</span><br><span class="line">					<span class="built_in">cursor</span>=i+<span class="number">1</span>;</span><br><span class="line">					<span class="keyword">return</span> (E) elementData[offset+(lastRet=i)];</span><br><span class="line">				&#125;</span><br><span class="line">				</span><br><span class="line">				<span class="keyword">public</span> <span class="built_in">boolean</span> hasPrevious()&#123;</span><br><span class="line">					<span class="keyword">return</span> <span class="built_in">cursor</span> &gt; <span class="number">0</span>;</span><br><span class="line">				&#125;</span><br><span class="line">				</span><br><span class="line">				<span class="keyword">public</span> E previous()&#123;</span><br><span class="line">					checkForComodification();</span><br><span class="line">					<span class="built_in">int</span> i=<span class="built_in">cursor</span>-<span class="number">1</span>;</span><br><span class="line">					<span class="keyword">if</span>(i&lt;<span class="number">0</span>)&#123;</span><br><span class="line">						<span class="keyword">throw</span> <span class="keyword">new</span> NoSuchElementException();</span><br><span class="line">					&#125;</span><br><span class="line">					<span class="keyword">Object</span> elementData[]=ArrayList.<span class="keyword">this</span>.elementData;</span><br><span class="line">					<span class="keyword">if</span>(offset+i &gt;= elementData.length)&#123;</span><br><span class="line">						<span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();</span><br><span class="line">					&#125;</span><br><span class="line">					<span class="built_in">cursor</span>=i;</span><br><span class="line">					<span class="keyword">return</span> (E)elementData[offset+(lastRet=i)];</span><br><span class="line">				&#125;</span><br><span class="line">				</span><br><span class="line">				<span class="keyword">public</span> <span class="keyword">void</span> forEachRemaining(Consumer&lt;? <span class="keyword">super</span> E&gt; consumer)&#123;</span><br><span class="line">					Objects.requireNonNull(consumer);</span><br><span class="line">					<span class="keyword">final</span> <span class="built_in">int</span> <span class="built_in">size</span>=SubList.<span class="keyword">this</span>.<span class="built_in">size</span>;</span><br><span class="line">					<span class="built_in">int</span> i=<span class="built_in">cursor</span>;</span><br><span class="line">					<span class="keyword">if</span>(i &gt;= <span class="built_in">size</span>)&#123;</span><br><span class="line">						<span class="keyword">return</span>;</span><br><span class="line">					&#125;</span><br><span class="line">					<span class="keyword">final</span> <span class="keyword">Object</span> elementData[]=ArrayList.<span class="keyword">this</span>.elementData;</span><br><span class="line">					<span class="keyword">if</span>(offset+i &gt;= elementData.length)&#123;</span><br><span class="line">						<span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();</span><br><span class="line">					&#125;</span><br><span class="line">					</span><br><span class="line">					<span class="keyword">while</span>(i != <span class="built_in">size</span> &amp;&amp; modCount==expectedModCount)&#123;</span><br><span class="line">						consumer.accept((E) elementData[offset+(i++)]);</span><br><span class="line">					&#125;</span><br><span class="line">					lastRet=<span class="built_in">cursor</span>=i;</span><br><span class="line">					checkForComodification();</span><br><span class="line">				&#125;</span><br><span class="line">				</span><br><span class="line">				<span class="keyword">public</span> <span class="built_in">int</span> nextIndex()&#123;</span><br><span class="line">					<span class="keyword">return</span> <span class="built_in">cursor</span>;</span><br><span class="line">				&#125;</span><br><span class="line">				</span><br><span class="line">				<span class="keyword">public</span> <span class="built_in">int</span> previousIndex()&#123;</span><br><span class="line">					<span class="keyword">return</span> <span class="built_in">cursor</span>-<span class="number">1</span>;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;;</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">private</span> <span class="keyword">void</span> rangeCheck(<span class="built_in">int</span> index)&#123;</span><br><span class="line">			<span class="keyword">if</span>(index &lt; <span class="number">0</span> || index &gt;= <span class="keyword">this</span>.<span class="built_in">size</span>)&#123;</span><br><span class="line">				<span class="keyword">throw</span> <span class="keyword">new</span> IndexOutOfBoundsException(outOfBoundsMsg(index));</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">private</span> <span class="keyword">void</span> rangeCheckForAdd(<span class="built_in">int</span> index)&#123;</span><br><span class="line">			<span class="keyword">if</span>(index &lt; <span class="number">0</span> || index &gt; <span class="keyword">this</span>.<span class="built_in">size</span>)&#123;</span><br><span class="line">				<span class="keyword">throw</span> <span class="keyword">new</span> IndexOutOfBoundsException(outOfBoundsMsg(index));</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">private</span> <span class="keyword">String</span> outOfBoundsMsg(<span class="built_in">int</span> index)&#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="string">"Index: "</span>+index+<span class="string">", Size: "</span>+<span class="keyword">this</span>.<span class="built_in">size</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">private</span> <span class="keyword">void</span> checkForComodification()&#123;</span><br><span class="line">			<span class="keyword">if</span>(ArrayList.<span class="keyword">this</span>.modCount != <span class="keyword">this</span>.modCount)&#123;</span><br><span class="line">				<span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">void</span> rangeCheck(<span class="built_in">int</span> index)&#123;</span><br><span class="line">		<span class="keyword">if</span>(index&gt;=<span class="built_in">size</span>)&#123;</span><br><span class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> IndexOutOfBoundsException(outOfBoundsMsg(index));</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">void</span> rangeCheckForAdd(<span class="built_in">int</span> index)&#123;</span><br><span class="line">		<span class="keyword">if</span>(index&gt;<span class="built_in">size</span> || index&lt;<span class="number">0</span>)&#123;</span><br><span class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> IndexOutOfBoundsException(outOfBoundsMsg(index));</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">String</span> outOfBoundsMsg(<span class="built_in">int</span> index)&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="string">"Index: "</span>+index+<span class="string">", Size: "</span>+<span class="built_in">size</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="u5256_u6790"><a href="#u5256_u6790" class="headerlink" title="剖析"></a>剖析</h3><h4 id="u6570_u636E_u6210_u5458"><a href="#u6570_u636E_u6210_u5458" class="headerlink" title="数据成员"></a>数据成员</h4><p><code>DEFAULT_CAPACITY</code>：虽说是默认构造函数时创建的元素个数为这个值，但源码中并没有体现，可省略不看。<br><code>elementData</code>：数据存储的地方，元素类型为Object []。<br><code>EMPTY_ELEMENTDATA</code>与<code>DEFAULTCAPACITY_EMPTY_ELEMENTDATA</code>：这两个都是长度为0的Object数组。当使用默认构造函数创建时，便令elementData=DEFAULTCAPACITY_EMPTY_ELEMENTDATA;当使用带数值长度为0来创建对象时，便令elementData=EMPTY_ELEMENTDATA。这两个主要主要作用：<br>其一 ，不同之处在于如果新添加一个元素时，当elementData=EMPTY_ELEMENTDATA时，动态扩涨后的elementData.length为1，当elementData=DEFAULTCAPACITY_EMPTY_ELEMENTDATA时，动态扩涨后的elementData.length为10<br>其二，是用于在判断一些条件时，如果长度为0时，就直接令elementData=EMPTY_ELEMENTDATA，这样比写elementData={}意义会明确一些。<br><code>modCount</code>：这个是继承于AbstractList类的，详见AbstractList。</p>
<h4 id="u65B9_u6CD5"><a href="#u65B9_u6CD5" class="headerlink" title="方法"></a>方法</h4><h5 id="u52A8_u6001_u6269_u5F20"><a href="#u52A8_u6001_u6269_u5F20" class="headerlink" title="动态扩张"></a>动态扩张</h5><p>1：<code>public void ensureCapacity(int minCapacity)</code>：public类型，给外部使用；<br>2：<code>private void ensureCapacityInternal(int minCapacity)</code>：private类型，是内部比如add等方法时，先进是否需要扩张判断<br>3：<code>private void ensureExplicitCapacity(int minCapacity)</code>：以上1，2都是调用这个方法。里面有一个点需要注意：<code>modCount++;</code>，因为比如add方法里面没有对modCount进行操作，而是放到这里。因为不管你是否要扩张，add总是要添加，并且add添加时都会调用是否要动态扩张的方法，所以将modCount的操作放在这里。当然，关于remove等操作造成modCount修改自然不会在这里。</p>
<h5 id="u5B9E_u73B0_u7EE7_u627F_u8FC7_u6765_u7684_u65B9_u6CD5"><a href="#u5B9E_u73B0_u7EE7_u627F_u8FC7_u6765_u7684_u65B9_u6CD5" class="headerlink" title="实现继承过来的方法"></a>实现继承过来的方法</h5><p>从Iterator，Iterable，Collection，ListIterator，List中示实现的接口等在这里实现了。<br>1.<code>size()</code>。数据域中定义了size变量，直接返回这个数值。<br>2.<code>get(index)</code>。数据域中是Object数组，因此可以通过elementData[index]来获取，只是加上了一些条件控件。<br>3.<code>set(index,element)</code>。同get<br>4.<code>add(index,element)</code>。也是通过对elementData操作，包含了可能的动态扩张。<br>5.<code>remove(index)</code>。也是对elementData操作，并且使用System.arraycopy暴力复制的方法来将(index,size)复制到前一个位置。</p>
<h5 id="u5173_u4E8E_u6DFB_u52A0_u4E0E_u5220_u9664_u7684_u5B9E_u8D28"><a href="#u5173_u4E8E_u6DFB_u52A0_u4E0E_u5220_u9664_u7684_u5B9E_u8D28" class="headerlink" title="关于添加与删除的实质"></a>关于添加与删除的实质</h5><p>以add或remove相关的添加与删除（除了删除某个集合，因为删除集合时需要一个个元素进行比对。），里面所用到的基本都是使用系统数组复制的的方法，比如System.arraycopy或Arrays.copyof。</p>
<h5 id="u6709_u5C0F_u6280_u5DE7_u6027_u7684_u65B9_u6CD5"><a href="#u6709_u5C0F_u6280_u5DE7_u6027_u7684_u65B9_u6CD5" class="headerlink" title="有小技巧性的方法"></a>有小技巧性的方法</h5><p><code>private boolean batchRemove(Collection&lt;?&gt; c,boolean complement)</code>：这里利用一个complement的boolean变量来实现删除还是保留c中的元素。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>主要介绍了有关于ArrayList的源码，包括一些动态括展等方法的解析。<br>]]>
    
    </summary>
    
      <category term="java.util" scheme="http://jinpingwang.github.io/tags/java-util/"/>
    
      <category term="java源码" scheme="http://jinpingwang.github.io/tags/java%E6%BA%90%E7%A0%81/"/>
    
      <category term="java.util" scheme="http://jinpingwang.github.io/categories/java-util/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[自动化测试工具Selenium使用]]></title>
    <link href="http://jinpingwang.github.io/2016/04/16/test/%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95%E5%B7%A5%E5%85%B7Selenium%E4%BD%BF%E7%94%A8/"/>
    <id>http://jinpingwang.github.io/2016/04/16/test/自动化测试工具Selenium使用/</id>
    <published>2016-04-16T06:21:35.000Z</published>
    <updated>2016-04-26T11:47:14.852Z</updated>
    <content type="html"><![CDATA[<p>Selenium也是一个用于Web应用程序测试的工具。Selenium测试直接运行在浏览器中，就像真正的用户在操作一样。支持的浏览器包括IE、Mozilla Firefox、Mozilla Suite等。本文通过简单的介绍如何安装与使用Selenium。</p>
<h4 id="u5728Maven_u5DE5_u7A0B_u7684pom-xml_u6DFB_u52A0_u4F9D_u8D56"><a href="#u5728Maven_u5DE5_u7A0B_u7684pom-xml_u6DFB_u52A0_u4F9D_u8D56" class="headerlink" title="在Maven工程的pom.xml添加依赖"></a>在Maven工程的pom.xml添加依赖</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">dependency</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="title">groupId</span>&gt;</span>org.seleniumhq.selenium<span class="tag">&lt;/<span class="title">groupId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="title">artifactId</span>&gt;</span>selenium-java<span class="tag">&lt;/<span class="title">artifactId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="title">version</span>&gt;</span>2.53.0<span class="tag">&lt;/<span class="title">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h4 id="u521B_u5EFA_u4E00_u4E2Aoppo_u767B_u9646_u6D4B_u8BD5_u7C7B"><a href="#u521B_u5EFA_u4E00_u4E2Aoppo_u767B_u9646_u6D4B_u8BD5_u7C7B" class="headerlink" title="创建一个oppo登陆测试类"></a>创建一个oppo登陆测试类</h4><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">GoogleTest</span>&#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> WebDriver driver;  </span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span>(<span class="params">String[] args</span>)  </span>&#123;</span><br><span class="line">		System.<span class="keyword">out</span>.print(<span class="string">"开始web自动化!!"</span>);</span><br><span class="line">		</span><br><span class="line">		<span class="comment">//如果fireFox则不需要这个操作</span></span><br><span class="line">		System.setProperty(<span class="string">"webdriver.chrome.driver"</span>,<span class="string">"C:/Program Files (x86)/Google/Chrome/Application/chromedriver.exe"</span>);</span><br><span class="line">		driver =<span class="keyword">new</span> ChromeDriver();</span><br><span class="line">		driver.<span class="keyword">get</span>(<span class="string">"http://www.oppo.com/cn/"</span>);</span><br><span class="line">		driver.findElement(By.linkText(<span class="string">"注册"</span>)).click();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="u8FD0_u884C"><a href="#u8FD0_u884C" class="headerlink" title="运行"></a>运行</h4><p>点击eclipse运行后，就会自动打开chrome，然后点击了oppo首页中的注册按钮，跳转到注册页面。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>Selenium也是一个用于Web应用程序测试的工具。Selenium测试直接运行在浏览器中，就像真正的用户在操作一样。支持的浏览器包括IE、Mozilla Firefox、Mozilla Suite等。本文通过简单的介绍如何安装与使用Selenium。</p>
<h4 id="u5728Maven_u5DE5_u7A0B_u7684pom-xml_u6DFB_u52A0_u4F9D_u8D56"><a href="#u5728Maven_u5DE5_u7A0B_u7684pom-xml_u6DFB_u52A0_u4F9D_u8D56" class="headerlink" title="在Maven工程的pom.xml添加依赖"></a>在Maven工程的pom.xml添加依赖</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">dependency</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="title">groupId</span>&gt;</span>org.seleniumhq.selenium<span class="tag">&lt;/<span class="title">groupId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="title">artifactId</span>&gt;</span>selenium-java<span class="tag">&lt;/<span class="title">artifactId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="title">version</span>&gt;</span>2.53.0<span class="tag">&lt;/<span class="title">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>]]>
    
    </summary>
    
      <category term="Selenium" scheme="http://jinpingwang.github.io/tags/Selenium/"/>
    
      <category term="测试" scheme="http://jinpingwang.github.io/tags/%E6%B5%8B%E8%AF%95/"/>
    
      <category term="测试" scheme="http://jinpingwang.github.io/categories/%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[linux下c++编程]]></title>
    <link href="http://jinpingwang.github.io/2016/04/15/c++/linux%E4%B8%8Bc++%E7%BC%96%E7%A8%8B/"/>
    <id>http://jinpingwang.github.io/2016/04/15/c++/linux下c++编程/</id>
    <published>2016-04-15T01:55:12.000Z</published>
    <updated>2016-05-16T08:44:31.180Z</updated>
    <content type="html"><![CDATA[<p>介绍了gcc与g++的区别；linux下c++编程环境的搭建；编译链接c++程序；gdb调试c++程序四个部分内容。</p>
<h3 id="gcc_u4E0Eg++_u7684_u533A_u522B"><a href="#gcc_u4E0Eg++_u7684_u533A_u522B" class="headerlink" title="gcc与g++的区别"></a>gcc与g++的区别</h3><h4 id="u76F8_u540C_u70B9"><a href="#u76F8_u540C_u70B9" class="headerlink" title="相同点"></a>相同点</h4><p>gcc与g++都能编译c++程序（其实g++也是调用gcc)。</p>
<h4 id="u4E0D_u540C_u70B9"><a href="#u4E0D_u540C_u70B9" class="headerlink" title="不同点"></a>不同点</h4><p>链接阶段，gcc命令不能自动和c++程序使用的库相联接，而g++可以自动相联。但gcc通过添加一些参数命令后，也可以与库相联接，如有一个test01.cpp的c++程序，则使用gcc完成编译如下：<br><a id="more"></a><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gcc <span class="built_in">test</span>01.cpp -o <span class="built_in">test</span> -lstdc++</span><br></pre></td></tr></table></figure></p>
<h3 id="linux_u4E0Bc++_u7F16_u7A0B_u73AF_u5883_u642D_u5EFA"><a href="#linux_u4E0Bc++_u7F16_u7A0B_u73AF_u5883_u642D_u5EFA" class="headerlink" title="linux下c++编程环境搭建"></a>linux下c++编程环境搭建</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">apt-get <span class="operator"><span class="keyword">install</span> gcc</span><br><span class="line">apt-<span class="keyword">get</span> <span class="keyword">install</span> <span class="keyword">g</span>++</span><br><span class="line">apt-<span class="keyword">get</span> <span class="keyword">install</span> gdb</span></span><br></pre></td></tr></table></figure>
<h3 id="u7F16_u8BD1c++_u7A0B_u5E8F"><a href="#u7F16_u8BD1c++_u7A0B_u5E8F" class="headerlink" title="编译c++程序"></a>编译c++程序</h3><h4 id="vim_u7F16_u5199_u4E00_u4E2Ac++_u7A0B_u5E8F_uFF1Atest01-cpp"><a href="#vim_u7F16_u5199_u4E00_u4E2Ac++_u7A0B_u5E8F_uFF1Atest01-cpp" class="headerlink" title="vim编写一个c++程序：test01.cpp"></a>vim编写一个c++程序：test01.cpp</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim <span class="built_in">test</span>01.cpp</span><br></pre></td></tr></table></figure>
<h4 id="test01-cpp_u5185_u5BB9"><a href="#test01-cpp_u5185_u5BB9" class="headerlink" title="test01.cpp内容"></a>test01.cpp内容</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> loop=<span class="number">0</span>; loop&lt;<span class="number">10</span>; loop++)&#123;</span><br><span class="line">                <span class="built_in">cout</span>&lt;&lt;loop&lt;&lt;endl;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="u4F7F_u7528g++_u8FDB_u884C_u7F16_u8BD1_u94FE_u63A5_u4E0E_u6267_u884C"><a href="#u4F7F_u7528g++_u8FDB_u884C_u7F16_u8BD1_u94FE_u63A5_u4E0E_u6267_u884C" class="headerlink" title="使用g++进行编译链接与执行"></a>使用g++进行编译链接与执行</h4><p>编译链接<br><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//-o test参数将输出文件命名为test，若无此参数则直接输出a.out</span></span><br><span class="line"><span class="keyword">g</span>++ test01.cpp -o <span class="keyword">test</span></span><br><span class="line"><span class="comment">//如果需要使用gdb进行调试，则需要添加-g参数，即</span></span><br><span class="line"><span class="keyword">g</span>++ -<span class="keyword">g</span> test01.cpp -o <span class="keyword">test</span></span><br></pre></td></tr></table></figure></p>
<p>执行<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./<span class="built_in">test</span></span><br></pre></td></tr></table></figure></p>
<p>输出<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">4</span></span><br><span class="line"><span class="number">5</span></span><br><span class="line"><span class="number">6</span></span><br><span class="line"><span class="number">7</span></span><br><span class="line"><span class="number">8</span></span><br><span class="line"><span class="number">9</span></span><br></pre></td></tr></table></figure></p>
<h3 id="gdb_u8C03_u8BD5c++_u7A0B_u5E8F"><a href="#gdb_u8C03_u8BD5c++_u7A0B_u5E8F" class="headerlink" title="gdb调试c++程序"></a>gdb调试c++程序</h3><h4 id="u6DFB_u52A0-gdbinit_u6587_u4EF6"><a href="#u6DFB_u52A0-gdbinit_u6587_u4EF6" class="headerlink" title="添加.gdbinit文件"></a>添加.gdbinit文件</h4><p>在进行调试时可能会报以下错误：<br><figure class="highlight ceylon"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gdb ImportError: No <span class="keyword">module</span> named <span class="string">'libstdcxx'</span></span><br></pre></td></tr></table></figure></p>
<p>解决方法<br>在用户主目录创建文件：.gdbinit<br>在.gdbinit中添加以下内容：<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">py import sys</span><br><span class="line">py sys<span class="class">.path</span><span class="class">.append</span>(<span class="string">"/usr/share/gcc-4.8/python"</span>)</span><br></pre></td></tr></table></figure></p>
<h4 id="u7F16_u8BD1_u4EA7_u751F_u8C03_u8BD5_u4FE1_u606F"><a href="#u7F16_u8BD1_u4EA7_u751F_u8C03_u8BD5_u4FE1_u606F" class="headerlink" title="编译产生调试信息"></a>编译产生调试信息</h4><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">g</span>++ -<span class="keyword">g</span> test01.cpp -o <span class="keyword">test</span></span><br></pre></td></tr></table></figure>
<h4 id="u4F7F_u7528gdb_u8FDB_u884C_u8C03_u8BD5"><a href="#u4F7F_u7528gdb_u8FDB_u884C_u8C03_u8BD5" class="headerlink" title="使用gdb进行调试"></a>使用gdb进行调试</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gdb <span class="built_in">test</span></span><br></pre></td></tr></table></figure>
<h4 id="u8C03_u8BD5_u5177_u4F53_u64CD_u4F5C"><a href="#u8C03_u8BD5_u5177_u4F53_u64CD_u4F5C" class="headerlink" title="调试具体操作"></a>调试具体操作</h4><h5 id="u5217_u51FA_u4EE3_u7801"><a href="#u5217_u51FA_u4EE3_u7801" class="headerlink" title="列出代码"></a>列出代码</h5><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">list</span></span><br><span class="line"><span class="keyword">list</span> <span class="keyword">m</span>,<span class="keyword">n</span></span><br></pre></td></tr></table></figure>
<h5 id="u6267_u884C_u7A0B_u5E8F"><a href="#u6267_u884C_u7A0B_u5E8F" class="headerlink" title="执行程序"></a>执行程序</h5><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">run</span></span><br><span class="line"><span class="literal">r</span></span><br></pre></td></tr></table></figure>
<h5 id="u8BBE_u7F6E_u65AD_u70B9"><a href="#u8BBE_u7F6E_u65AD_u70B9" class="headerlink" title="设置断点"></a>设置断点</h5><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//在第n行打断点</span></span><br><span class="line"><span class="keyword">break</span> <span class="keyword">n</span></span><br></pre></td></tr></table></figure>
<h5 id="u5220_u9664_u65AD_u70B9"><a href="#u5220_u9664_u65AD_u70B9" class="headerlink" title="删除断点"></a>删除断点</h5><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//删除编号为m的断点。注：编号与代码中的行号不一样。第一个断点，则编号为1，与行号没关系</span></span><br><span class="line"><span class="keyword">break</span> <span class="literal">m</span></span><br></pre></td></tr></table></figure>
<h5 id="u65AD_u70B9_u5904_u7EE7_u7EED_u6267_u884C"><a href="#u65AD_u70B9_u5904_u7EE7_u7EED_u6267_u884C" class="headerlink" title="断点处继续执行"></a>断点处继续执行</h5><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">continue</span></span><br><span class="line"><span class="built_in">c</span></span><br></pre></td></tr></table></figure>
<h5 id="u76D1_u6D4B_u53D8_u91CF_u503C"><a href="#u76D1_u6D4B_u53D8_u91CF_u503C" class="headerlink" title="监测变量值"></a>监测变量值</h5><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//只有在变量值有变化时才会显示</span></span><br><span class="line">watch 变量名</span><br></pre></td></tr></table></figure>
<h5 id="u81EA_u52A8_u663E_u793A_u53D8_u91CF_u503C"><a href="#u81EA_u52A8_u663E_u793A_u53D8_u91CF_u503C" class="headerlink" title="自动显示变量值"></a>自动显示变量值</h5><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//不管变量值有没有改变都会显示</span></span><br><span class="line"><span class="attribute">display</span> 变量名</span><br></pre></td></tr></table></figure>
<h5 id="u67E5_u770B_u67D0_u4E00_u4E2A_u7279_u5B9A_u7684_u53D8_u91CF_u503C"><a href="#u67E5_u770B_u67D0_u4E00_u4E2A_u7279_u5B9A_u7684_u53D8_u91CF_u503C" class="headerlink" title="查看某一个特定的变量值"></a>查看某一个特定的变量值</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span> 变量名</span><br></pre></td></tr></table></figure>
<h5 id="u67E5_u770B_u53D8_u91CF_u7C7B_u578B"><a href="#u67E5_u770B_u53D8_u91CF_u7C7B_u578B" class="headerlink" title="查看变量类型"></a>查看变量类型</h5><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">whatis</span> 变量名</span><br></pre></td></tr></table></figure>
<h5 id="u8FDB_u5165_u51FD_u6570_u5185_u90E8"><a href="#u8FDB_u5165_u51FD_u6570_u5185_u90E8" class="headerlink" title="进入函数内部"></a>进入函数内部</h5><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">step</span></span><br></pre></td></tr></table></figure>
<h5 id="u4E00_u6761_u6761_u8BED_u53E5_u6267_u884C_uFF08_u51FD_u6570_u8C03_u7528_u4E5F_u662F_u4E00_u6761_u8BED_u53E5_uFF09"><a href="#u4E00_u6761_u6761_u8BED_u53E5_u6267_u884C_uFF08_u51FD_u6570_u8C03_u7528_u4E5F_u662F_u4E00_u6761_u8BED_u53E5_uFF09" class="headerlink" title="一条条语句执行（函数调用也是一条语句）"></a>一条条语句执行（函数调用也是一条语句）</h5><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">next</span></span><br></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[<p>介绍了gcc与g++的区别；linux下c++编程环境的搭建；编译链接c++程序；gdb调试c++程序四个部分内容。</p>
<h3 id="gcc_u4E0Eg++_u7684_u533A_u522B"><a href="#gcc_u4E0Eg++_u7684_u533A_u522B" class="headerlink" title="gcc与g++的区别"></a>gcc与g++的区别</h3><h4 id="u76F8_u540C_u70B9"><a href="#u76F8_u540C_u70B9" class="headerlink" title="相同点"></a>相同点</h4><p>gcc与g++都能编译c++程序（其实g++也是调用gcc)。</p>
<h4 id="u4E0D_u540C_u70B9"><a href="#u4E0D_u540C_u70B9" class="headerlink" title="不同点"></a>不同点</h4><p>链接阶段，gcc命令不能自动和c++程序使用的库相联接，而g++可以自动相联。但gcc通过添加一些参数命令后，也可以与库相联接，如有一个test01.cpp的c++程序，则使用gcc完成编译如下：<br>]]>
    
    </summary>
    
      <category term="c++" scheme="http://jinpingwang.github.io/tags/c/"/>
    
      <category term="g++" scheme="http://jinpingwang.github.io/tags/g/"/>
    
      <category term="gdb" scheme="http://jinpingwang.github.io/tags/gdb/"/>
    
      <category term="c++" scheme="http://jinpingwang.github.io/categories/c/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Servlet源码之ServletContext]]></title>
    <link href="http://jinpingwang.github.io/2016/04/14/javaSourceCode/javax.servlet/ServletContext/"/>
    <id>http://jinpingwang.github.io/2016/04/14/javaSourceCode/javax.servlet/ServletContext/</id>
    <published>2016-04-14T14:22:14.000Z</published>
    <updated>2016-04-21T12:18:33.240Z</updated>
    <content type="html"><![CDATA[<p>介绍了Servlet-api中的ServletContext接口，对接口作用以及里面的方法描述和需要注意的地方。</p>
<h3 id="u6E90_u7801"><a href="#u6E90_u7801" class="headerlink" title="源码"></a>源码</h3><p>ServletContext接口定义了一组方法用于servlet与servlet窗口进行通信，例如：得到一个文件的MIME类型，requests的转发，向文件中写日志。ServletContext不同于ServletConfig，ServletContext是针对一个web工程，而ServletConfig只针对单个Servlet。<br><a id="more"></a><br><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> interface ServletContext &#123;</span><br><span class="line">    <span class="keyword">public</span> ServletContext getContext(<span class="keyword">String</span> uripath);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> getMajorVersion();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> getMinorVersion();</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">String</span> getMimeType(<span class="keyword">String</span> file);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> Set getResourcePaths(<span class="keyword">String</span> path);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> URL getResource(<span class="keyword">String</span> path) <span class="keyword">throws</span> MalformedURLException;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> InputStream getResourceAsStream(<span class="keyword">String</span> path);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> RequestDispatcher getRequestDispatcher(<span class="keyword">String</span> path);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> RequestDispatcher getNamedDispatcher(<span class="keyword">String</span> name);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="built_in">log</span>(<span class="keyword">String</span> msg);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="built_in">log</span>(<span class="keyword">String</span> message, Throwable throwable);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">String</span> getRealPath(<span class="keyword">String</span> path);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">String</span> getServerInfo();</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">String</span> getInitParameter(<span class="keyword">String</span> name);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> Enumeration getInitParameterNames();</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">Object</span> getAttribute(<span class="keyword">String</span> name);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> Enumeration getAttributeNames();</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> setAttribute(<span class="keyword">String</span> name, <span class="keyword">Object</span> object);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> removeAttribute(<span class="keyword">String</span> name);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">String</span> getServletContextName();    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="web-xml"><a href="#web-xml" class="headerlink" title="web.xml"></a>web.xml</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">servlet-name</span>&gt;</span>test<span class="tag">&lt;/<span class="title">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">servlet-class</span>&gt;</span>test.test01<span class="tag">&lt;/<span class="title">servlte-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">param-name</span>&gt;</span>test01Name<span class="tag">&lt;/<span class="title">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">para-value</span>&gt;</span>test01Value<span class="tag">&lt;/<span class="title">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="title">init-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">servlet</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="title">context-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">param-name</span>&gt;</span>test01<span class="tag">&lt;/<span class="title">param-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">param-value</span>&gt;</span>test02<span class="tag">&lt;/<span class="title">param-value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">context-para</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="u5256_u6790"><a href="#u5256_u6790" class="headerlink" title="剖析"></a>剖析</h3><p><code>public ServletContext getContext(String uripath);</code>：<br>可以通这个方法获取其它web上下文的配置文件，前提是保证相应的<context>配置中设置crossContext=”true”。例如，tomcat下有两个web应用：baseweb，test。则在/tomcat/conf/Catalina/localhost下配置baseweb.xml与test.xml：<br>baseweb.xml<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="pi">&lt;?xml version='1.0' encoding='utf-8'?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">Context</span> <span class="attribute">docBase</span>=<span class="value">"F:\eclipse64WorkPlace\servletcode\baseweb\target\baseweb"</span> <span class="attribute">crossContext</span>=<span class="value">"true"</span>/&gt;</span></span><br></pre></td></tr></table></figure></context></p>
<p>test.xml<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="pi">&lt;?xml version='1.0' encoding='utf-8'?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">Context</span> <span class="attribute">docBase</span>=<span class="value">"F:\eclipse64WorkPlace\servletcode\test\target\test"</span> <span class="attribute">crossContext</span>=<span class="value">"true"</span>/&gt;</span>。</span><br></pre></td></tr></table></figure></p>
<p>则在baseweb应用中通过getContext(“/test”)来获取test应用下的web.xml配置。</p>
<p><code>public int getMajorVersion();</code>：<br>用于获取servlet容器支持的servlet api的主版本号</p>
<p><code>public int getMinorVersion();</code>：<br>用于获取servlet容器支持的servlet api的次版本号</p>
<p><code>public String getMimeType(String file);</code>：<br>获取某个文件的Mime类型。如getMimeType(“index.html”)则返回text/html，getMimeType(“46.gim”)则返回image/jpeg。这个函数只是根据file后缀进行判断，和你工程里面是否有这个文件并无关系。</p>
<p><code>public Set getResourcePaths(String path);</code>：<br>用于返回path目录下的文件。如根目录下的文件为：<br><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">*</span> /welcome.html<span class="variable">&lt;br&gt;</span></span><br><span class="line"><span class="keyword">*</span> /catalog/index.html<span class="variable">&lt;br&gt;</span></span><br><span class="line"><span class="keyword">*</span> /catalog/products.html<span class="variable">&lt;br&gt;</span></span><br><span class="line"><span class="keyword">*</span> /catalog/offers/books.html<span class="variable">&lt;br&gt;</span></span><br><span class="line"><span class="keyword">*</span> /catalog/offers/music.html<span class="variable">&lt;br&gt;</span></span><br><span class="line"><span class="keyword">*</span> /customer/login.jsp<span class="variable">&lt;br&gt;</span></span><br><span class="line"><span class="keyword">*</span> /WEB-INF/web.xml<span class="variable">&lt;br&gt;</span></span><br><span class="line"><span class="keyword">*</span> /WEB-INF/classes/com.acme.OrderServlet.class,<span class="variable">&lt;br&gt;</span><span class="variable">&lt;br&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>则getResourcePaths(“/“)返回的是：/welcome.html /catalog/ /customer/ /WEB-INF/（只到/的下一层，并不会递归）</p>
<p><code>public URL getResource(String path) throws MalformedURLException;</code>：<br>用于获取path路径在存储上的全路径，当然也可是数据库等的路径。如/webapp下有一个文件index.html。则调用getResource(“/index.html”)则会返回：<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/<span class="constant">F</span><span class="symbol">:/eclipse64WorkPlace/servletcode/</span>.metadata/.plugins/org.eclipse.wst.server.core/tmp<span class="number">0</span>/wtpwebapps/baseweb/index.html</span><br></pre></td></tr></table></figure></p>
<p><code>public InputStream getResourceAsStream(String path);</code>：<br>将path的文件当作一个InputStream。比如/webapp下有一个test.txt文档，文档内容为：<br><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">hello</span></span><br><span class="line">world</span><br></pre></td></tr></table></figure></p>
<p>则调用以下语句就可以读取test.txt文件中的内容了。<br><figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Scanner scanner = <span class="literal">new</span> Scanner(getResourceAsStream(<span class="string">"/test.txt"</span>));</span><br><span class="line"><span class="keyword">while</span>(scanner<span class="built_in">.</span>hasNextLine())&#123;</span><br><span class="line"><span class="attribute">...</span><span class="built_in">.</span><br><span class="line"></span>&#125;</span><br></pre></td></tr></table></figure></p>
<p><code>public RequestDispatcher getRequestDispatcher(String path);</code>：<br>根据提供的path返回一个RequestDispatcher对象。path必须是以”/“开头，表示要从这个Web应用的根开始查找。不同于ServletRequest可以不以”/“开头，表示从原来请求路的相对路径径查找。</p>
<p><code>public RequestDispatcher getNamedDispatcher(String name);</code>：<br>根据提供的name返回一个RequestDispatcher对象。这个name指的是在web.xml中配置servlet-name。<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">servlet</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="title">servlet-name</span>&gt;</span>test3<span class="tag">&lt;/<span class="title">servlet-name</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="title">servlet-class</span>&gt;</span>test.test02<span class="tag">&lt;/<span class="title">servlet-class</span>&gt;</span>		</span><br><span class="line"><span class="tag">&lt;/<span class="title">servlet</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p><code>public void log(String msg);</code>:<br>用于记录日志文件，在用eclipse开发时，会直接输出</p>
<p><code>public void log(String message, Throwable throwable);</code>：<br>作用同上</p>
<p><code>public String getRealPath(String path);</code>：<br>获取某个文件的绝对路径，即在硬盘中存储的路径。与getResource(String path)有点类似。</p>
<p><code>public String getServerInfo();</code>：<br>用于返回Servlet容器的信息。信息的形式为：servername/versionnumber<br>如：Apache Tomcat/8.0.14</p>
<p><code>public String getInitParameter(String name);</code>：<br>获取web.xml下<context-param>中<param-name>里与name对应<param-value>的值。</param-value></param-name></context-param></p>
<p><code>public Enumeration getInitParameterNames();</code>：<br>获取web.xml下<context-param>中<param-name>的集合。</param-name></context-param></p>
<p><code>public Object getAttribute(String name);</code>：<br>name是指servlet容器中相关的属性，根据这个属性返回相应的值。<br>比如<br>name=”org.apache.tomcat.InstanceManager”时，<br>返回的是<br>org.apache.catalina.core.DefaultInstanceManager@140103bd</p>
<p><code>public Enumeration getAttributeNames();</code>：<br>获取servlet容器相关的所有属性集合。</p>
<p><code>public void setAttribute(String name, Object object);</code>：<br>将sevlet容器中的某个属性值设置为object。</p>
<p><code>public void removeAttribute(String name);</code>：<br>移除servlet容器中的某个属性。</p>
<p><code>public String getServletContextName();</code>：<br>返回的是这个web application的名字，即web.xml下<display-name>标签的内容。</display-name></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>介绍了Servlet-api中的ServletContext接口，对接口作用以及里面的方法描述和需要注意的地方。</p>
<h3 id="u6E90_u7801"><a href="#u6E90_u7801" class="headerlink" title="源码"></a>源码</h3><p>ServletContext接口定义了一组方法用于servlet与servlet窗口进行通信，例如：得到一个文件的MIME类型，requests的转发，向文件中写日志。ServletContext不同于ServletConfig，ServletContext是针对一个web工程，而ServletConfig只针对单个Servlet。<br>]]>
    
    </summary>
    
      <category term="Servlet" scheme="http://jinpingwang.github.io/tags/Servlet/"/>
    
      <category term="Servlet" scheme="http://jinpingwang.github.io/categories/Servlet/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[二维数组中的查找]]></title>
    <link href="http://jinpingwang.github.io/2016/04/12/algorithm/1/"/>
    <id>http://jinpingwang.github.io/2016/04/12/algorithm/1/</id>
    <published>2016-04-12T02:07:21.000Z</published>
    <updated>2016-04-21T12:16:25.945Z</updated>
    <content type="html"><![CDATA[<h2 id="u9898_u76EE_u63CF_u8FF0"><a href="#u9898_u76EE_u63CF_u8FF0" class="headerlink" title="题目描述"></a>题目描述</h2><p>在一个二维数组中，每一行都按照从左到右递增的顺序排序，每一列都按照从上到下递增的顺序排序。请完成一个函数，输入这样的一个二维数组和一个整数，判断数组中是否含有该整数。 </p>
<h2 id="u8F93_u5165_u63CF_u8FF0"><a href="#u8F93_u5165_u63CF_u8FF0" class="headerlink" title="输入描述"></a>输入描述</h2><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">array： 待查找的二维数组</span><br><span class="line"><span class="keyword">target</span>：查找的数字</span><br></pre></td></tr></table></figure>
<h2 id="u8F93_u51FA_u63CF_u8FF0"><a href="#u8F93_u51FA_u63CF_u8FF0" class="headerlink" title="输出描述"></a>输出描述</h2><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">查找到返回<span class="literal">true</span>，查找不到返回<span class="literal">false</span></span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h2 id="java_u4EE3_u7801_u5B9E_u73B0"><a href="#java_u4EE3_u7801_u5B9E_u73B0" class="headerlink" title="java代码实现"></a>java代码实现</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> Solution &#123;	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> boolean <span class="title">find</span><span class="params">(<span class="keyword">int</span> [][] <span class="built_in">array</span>,<span class="keyword">int</span> target)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(<span class="built_in">array</span>.length==<span class="number">0</span>)</span><br><span class="line">			<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">		<span class="keyword">int</span> row=<span class="built_in">array</span>.length;</span><br><span class="line">		<span class="keyword">int</span> col=<span class="built_in">array</span>[<span class="number">0</span>].length;</span><br><span class="line">		<span class="keyword">int</span> i=<span class="number">0</span>,j=col-<span class="number">1</span>;</span><br><span class="line">		<span class="keyword">while</span>(i&lt;row &amp;&amp; j&gt;=<span class="number">0</span>)&#123;</span><br><span class="line">			<span class="keyword">if</span>(<span class="built_in">array</span>[i][j]==target)</span><br><span class="line">				<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">			<span class="keyword">if</span>(<span class="built_in">array</span>[i][j]&gt;target)</span><br><span class="line">				j--;</span><br><span class="line">			<span class="keyword">else</span></span><br><span class="line">				i++;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="u7B97_u6CD5_u590D_u6742_u5EA6"><a href="#u7B97_u6CD5_u590D_u6742_u5EA6" class="headerlink" title="算法复杂度"></a>算法复杂度</h2><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">O</span><span class="params">(m+n)</span></span></span><br></pre></td></tr></table></figure>
<p>注：m，n为分别为数组的行数与列数</p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="u9898_u76EE_u63CF_u8FF0"><a href="#u9898_u76EE_u63CF_u8FF0" class="headerlink" title="题目描述"></a>题目描述</h2><p>在一个二维数组中，每一行都按照从左到右递增的顺序排序，每一列都按照从上到下递增的顺序排序。请完成一个函数，输入这样的一个二维数组和一个整数，判断数组中是否含有该整数。 </p>
<h2 id="u8F93_u5165_u63CF_u8FF0"><a href="#u8F93_u5165_u63CF_u8FF0" class="headerlink" title="输入描述"></a>输入描述</h2><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">array： 待查找的二维数组</span><br><span class="line"><span class="keyword">target</span>：查找的数字</span><br></pre></td></tr></table></figure>
<h2 id="u8F93_u51FA_u63CF_u8FF0"><a href="#u8F93_u51FA_u63CF_u8FF0" class="headerlink" title="输出描述"></a>输出描述</h2><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">查找到返回<span class="literal">true</span>，查找不到返回<span class="literal">false</span></span><br></pre></td></tr></table></figure>]]>
    
    </summary>
    
      <category term="算法" scheme="http://jinpingwang.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="算法" scheme="http://jinpingwang.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Linux网络编程之socket]]></title>
    <link href="http://jinpingwang.github.io/2016/04/11/server/Linux%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B%E4%B9%8Bsocket/"/>
    <id>http://jinpingwang.github.io/2016/04/11/server/Linux网络编程之socket/</id>
    <published>2016-04-11T15:08:15.000Z</published>
    <updated>2016-05-16T12:42:33.025Z</updated>
    <content type="html"><![CDATA[<h3 id="u529F_u80FD_u51FD_u6570"><a href="#u529F_u80FD_u51FD_u6570" class="headerlink" title="功能函数"></a>功能函数</h3><h4 id="u4E3B_u673A_u5B57_u8282_u5E8F_u4E0E_u7F51_u7EDC_u5B57_u8282_u5E8F_u4E4B_u95F4_u7684_u8F6C_u6362"><a href="#u4E3B_u673A_u5B57_u8282_u5E8F_u4E0E_u7F51_u7EDC_u5B57_u8282_u5E8F_u4E4B_u95F4_u7684_u8F6C_u6362" class="headerlink" title="主机字节序与网络字节序之间的转换"></a>主机字节序与网络字节序之间的转换</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">大小端转换函数</span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> <span class="string">&lt;netinet/in.h&gt;</span></span></span><br><span class="line"><span class="comment">//host to network long，即长整形32位</span></span><br><span class="line"><span class="function"><span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="title">htonl</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">int</span> hostlong)</span></span>;</span><br><span class="line"><span class="comment">//host to network short</span></span><br><span class="line"><span class="function"><span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="title">htons</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">short</span> <span class="keyword">int</span> hostshort)</span></span>;</span><br><span class="line"><span class="comment">//network to host long</span></span><br><span class="line"><span class="function"><span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="title">ntohl</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">int</span> netlong)</span></span>;</span><br><span class="line"><span class="comment">//host to network short</span></span><br><span class="line"><span class="function"><span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="title">ntohs</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">int</span> netshort)</span></span>;</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">unsigned</span> <span class="keyword">int</span> <span class="title">convert</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">int</span> data)</span> </span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (<span class="keyword">unsigned</span> <span class="keyword">int</span> ) (</span><br><span class="line">                            (((<span class="keyword">unsigned</span> <span class="keyword">int</span>)(data) &amp; <span class="number">0x000000ff</span>) &lt;&lt; <span class="number">24</span>) |       </span><br><span class="line">                            (((<span class="keyword">unsigned</span> <span class="keyword">int</span>)(data) &amp; <span class="number">0x0000ff00</span>) &lt;&lt; <span class="number">8</span>)  |       </span><br><span class="line">                            (((<span class="keyword">unsigned</span> <span class="keyword">int</span>)(data) &amp; <span class="number">0x00ff0000</span>) &gt;&gt; <span class="number">8</span>)  |        </span><br><span class="line">                            (((<span class="keyword">unsigned</span> <span class="keyword">int</span>)(data) &amp; <span class="number">0xff000000</span>) &gt;&gt; <span class="number">24</span>)</span><br><span class="line">                        );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">#<span class="keyword">include</span> <span class="string">&lt;arpa/inet.h&gt;</span></span></span><br><span class="line"><span class="comment">/**</span><br><span class="line"> * 将用字符串表示的IP地址src（如IPv4的10.11.12.13，或IPv6的十六进制地址）</span><br><span class="line"> * 转换成用网络字节序整数表示的IP地址，并把转换结果存储于dst指向的内存中。</span><br><span class="line"> * af：指定地址族（AF_INET或AF_INET6）</span><br><span class="line"> * 函数调用成功返回1，失败返回0</span><br><span class="line"> */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">inet_pton</span><span class="params">( <span class="keyword">int</span> af, <span class="keyword">const</span> <span class="keyword">char</span>* src, <span class="keyword">void</span>* dst)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span><br><span class="line"> * 将网络字节序整数表示的IP地址转换成字符串表示的IP地址。</span><br><span class="line"> * cnt：指定目标存储单元的大小</span><br><span class="line"> */</span></span><br><span class="line"><span class="function"><span class="keyword">const</span> <span class="keyword">char</span>* <span class="title">inet_ntop</span><span class="params">( <span class="keyword">int</span> af, <span class="keyword">const</span> <span class="keyword">void</span>* src, <span class="keyword">char</span>* dst, socklen_t cnt )</span></span>;</span><br></pre></td></tr></table></figure>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">( <span class="keyword">int</span> argc, <span class="keyword">char</span>* argv[] )</span></span><br><span class="line"></span>&#123;</span><br><span class="line">        <span class="keyword">char</span> ch1[] = <span class="string">"1.0.0.0"</span>;</span><br><span class="line">        <span class="keyword">struct</span> in_addr addr;</span><br><span class="line">        <span class="keyword">struct</span> in_addr * addr_ptr = &amp;addr;</span><br><span class="line">        inet_pton(AF_INET, ch1, addr_ptr);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, (*addr_ptr).s_addr);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">char</span> ch2[<span class="number">10</span>];</span><br><span class="line">        inet_ntop(AF_INET, addr_ptr, ch2, <span class="number">10</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%s\n"</span>, ch2);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="socket_u5730_u5740"><a href="#socket_u5730_u5740" class="headerlink" title="socket地址"></a>socket地址</h3><p>通用地址，通过bits/socket.h就可知，通用地址设置与获取IP地址和端口号需要执行烦锁的位操作。而专用地址则不需要。</p>
<h4 id="u901A_u7528_u5730_u5740"><a href="#u901A_u7528_u5730_u5740" class="headerlink" title="通用地址"></a>通用地址</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">#<span class="keyword">include</span> <span class="string">&lt;bits/socket.h&gt;</span></span></span><br><span class="line"><span class="keyword">struct</span> sockaddr</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">sa_family_t</span> sa_family;</span><br><span class="line">    <span class="keyword">char</span> sa_data[<span class="number">14</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">sa_family_t</span>：地址族类型。地址族类型通常与协议族（protocol family，也称domain）类型对应。PF_*与 AF_*都定义在&lt;bits/socket.h&gt;中，且具有一样的值，所以二者是等同的。</span><br><span class="line">sa_data：存放socket地址值，<span class="number">14</span>个字节。由下图可知，只有PF_INET为<span class="number">6</span>个字节&lt;<span class="number">14</span>字节，其它都超过<span class="number">14</span>字节，所以使用其它非PF_INET地址值时要使用新通用socket地址结构体：sockaddr_storage。</span><br></pre></td></tr></table></figure>
<p><img src="http://i4.buimg.com/908128e5e16af433.jpg" alt=""><br><img src="http://i4.buimg.com/58046ffa3e320ffe.jpg" alt=""></p>
<h4 id="u4E13_u7528_u5730_u5740"><a href="#u4E13_u7528_u5730_u5740" class="headerlink" title="专用地址"></a>专用地址</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> sockaddr_in</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">sa_family_t</span> sin_family; <span class="comment">/* 地址族：AF_INET */</span></span><br><span class="line">    <span class="keyword">u_int16_t</span> sin_port; <span class="comment">/* 端口号，要用网络字节序表示 */</span></span><br><span class="line">    <span class="keyword">struct</span> in_addr sin_addr;    <span class="comment">/* IPv4地址结构体 */</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">struct</span> in_addr</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">u_int32_t</span> s_addr;   <span class="comment">/* IPv4地址，要用网络字节序表示 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="u521B_u5EFAsocket"><a href="#u521B_u5EFAsocket" class="headerlink" title="创建socket"></a>创建socket</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">#<span class="keyword">include</span> <span class="string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> <span class="string">&lt;sys/socket.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">socket</span><span class="params">( <span class="keyword">int</span> domain, <span class="keyword">int</span> type, <span class="keyword">int</span> protocol )</span></span>;</span><br></pre></td></tr></table></figure>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">返回值：</span><br><span class="line">    int：linux所有东西都是文件。socket也不例外，也是可读，可写，可控制，可关闭的文件描述符。如果函数调用失败，则返回-<span class="number">1</span>。</span><br><span class="line">参数：</span><br><span class="line">    domain：所使用的底层协议簇。<span class="function"><span class="title">PF_INET</span><span class="params">(Protocol Family of Internet，用于IPv4)</span></span>，<span class="function"><span class="title">PF_INET6</span><span class="params">(用于IPv6)</span></span>。</span><br><span class="line">    type：指定服务类型。<span class="function"><span class="title">SOCK_STREAM</span><span class="params">(流服务，表示传输层使用TCP协议)</span></span>，<span class="function"><span class="title">SOCK_UGRAM</span><span class="params">(数据报服务，表示传输层使用UDP协议)</span></span>。</span><br><span class="line">    protocol：在前两个参数构成的协议集合下，再选择一个具体的协议。不过这个值一般是唯一的，设置为<span class="number">0</span>即可（两个参数已经完全决定了它的值）。</span><br></pre></td></tr></table></figure>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> sock = socket( PF_INET, SOCK_STREAM, <span class="number">0</span> );</span><br></pre></td></tr></table></figure>
<h3 id="u547D_u540Dsocket"><a href="#u547D_u540Dsocket" class="headerlink" title="命名socket"></a>命名socket</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">#&lt;<span class="keyword">include</span>&gt; <span class="string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="preprocessor">#&lt;<span class="keyword">include</span>&gt; <span class="string">&lt;sys/socket.h&gt;</span></span></span><br><span class="line"><span class="comment">/**</span><br><span class="line"> * 将my_addr所指的socket地址分配给未命名的sockfd文件描述符</span><br><span class="line"> * addrlen参数指出该socket地址的长度</span><br><span class="line"> * 函数成功返回0，失败返回-1。错误有两种，</span><br><span class="line"> * 一种是绑定受保护的地址，另一种是绑定处于TIME_WAIT状态的地址。</span><br><span class="line"> */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">bind</span><span class="params">( <span class="keyword">int</span> sockfd, <span class="keyword">const</span> <span class="keyword">struct</span> sockaddr* my_addr, socklen_t addrlen)</span></span>;</span><br></pre></td></tr></table></figure>
<figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">int ret = bind<span class="list">( <span class="keyword">sock</span>, <span class="list">( <span class="keyword">struct</span> sockaddr* )</span><span class="keyword">&amp;address</span>, sizeof<span class="list">( <span class="keyword">address</span> )</span> )</span><span class="comment">;</span></span><br></pre></td></tr></table></figure>
<h3 id="u76D1_u542Csocket"><a href="#u76D1_u542Csocket" class="headerlink" title="监听socket"></a>监听socket</h3><figure class="highlight nimrod"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#include &lt;sys/socket.h&gt;</span></span><br><span class="line">/**</span><br><span class="line"> * sockfd：指定被监听的socket</span><br><span class="line"> * backlog：表示处于完全连接状态的socket的上限。</span><br><span class="line"> * （半连接状态上限由/<span class="keyword">proc</span>/sys/net/ipv4/tcp_max_syn_backlog中设置）</span><br><span class="line"> */</span><br><span class="line"><span class="type">int</span> listen( <span class="type">int</span> sockfd, <span class="type">int</span> backlog );</span><br></pre></td></tr></table></figure>
<h3 id="u53D1_u8D77_u8FDE_u63A5"><a href="#u53D1_u8D77_u8FDE_u63A5" class="headerlink" title="发起连接"></a>发起连接</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">#<span class="keyword">include</span> <span class="string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> <span class="string">&lt;sys/socket.h&gt;</span></span></span><br><span class="line"><span class="comment">/**</span><br><span class="line"> * serv_addr：服务器监听的socket地址</span><br><span class="line"> * addrlen：服务器监听socket地址的地址长度</span><br><span class="line"> * 如果连接成功则返回0，连接不成功则返回-1</span><br><span class="line"> */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">connect</span><span class="params">( <span class="keyword">int</span> sockfd, <span class="keyword">const</span> <span class="keyword">struct</span> sockaddr* serv_addr, socklen_t addrlen )</span></span>;</span><br></pre></td></tr></table></figure>
<h3 id="u63A5_u53D7_u8FDE_u63A5"><a href="#u63A5_u53D7_u8FDE_u63A5" class="headerlink" title="接受连接"></a>接受连接</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">#<span class="keyword">include</span> <span class="string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> <span class="string">&lt;sys/socket.h&gt;</span></span></span><br><span class="line"><span class="comment">/**</span><br><span class="line"> * sockfd：listen系统调用的监听socket</span><br><span class="line"> * addr：用于获取远程客户端的socket地址，地址的长度由addrlen指出</span><br><span class="line"> * accept成功时返回一个新的连接socket，服务器可以通过这个socket来与客户端进行通信。</span><br><span class="line"> * accept失败则返回-1</span><br><span class="line"> */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">accept</span><span class="params">( <span class="keyword">int</span> sockfd, <span class="keyword">struct</span> sockaddr* addr, socklen_t *addrlen )</span></span>;</span><br></pre></td></tr></table></figure>
<h3 id="u5173_u95ED_u8FDE_u63A5"><a href="#u5173_u95ED_u8FDE_u63A5" class="headerlink" title="关闭连接"></a>关闭连接</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="comment">/**</span><br><span class="line"> * 通过将fd的引用计数减1，当fd的引用计数为0时，才是真正的关闭连接</span><br><span class="line"> */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">close</span><span class="params">( <span class="keyword">int</span> fd )</span></span>;</span><br></pre></td></tr></table></figure>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">#<span class="keyword">include</span> <span class="string">&lt;sys/socket.h&gt;</span></span></span><br><span class="line"><span class="comment">/**</span><br><span class="line"> * howto：SHUT_RD（关闭读），SHUT_WR（关闭写），SHUT_RDWR（关闭读写）</span><br><span class="line"> */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">shutdown</span><span class="params">( <span class="keyword">int</span> sockfd, <span class="keyword">int</span> howto )</span></span></span><br></pre></td></tr></table></figure>
<h3 id="u8BFB_u5199_u6570_u636E"><a href="#u8BFB_u5199_u6570_u636E" class="headerlink" title="读写数据"></a>读写数据</h3><h4 id="tcp_u6570_u636E_u8BFB_u5199"><a href="#tcp_u6570_u636E_u8BFB_u5199" class="headerlink" title="tcp数据读写"></a>tcp数据读写</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">#<span class="keyword">include</span> <span class="string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> <span class="string">&lt;sys/socket.h&gt;</span></span></span><br><span class="line"><span class="comment">/**</span><br><span class="line"> * recv读取sockfd上的数据，buf和len参数分别指定缓冲区的位置和大小，</span><br><span class="line"> * flags平常使用0即可</span><br><span class="line"> * recv执行成功时返回实际读取到的数据的长度，</span><br><span class="line"> * 有可能小于期望的长度，因此要多次调用recv，才能读取到完整的数据。</span><br><span class="line"> * recv返回0，表示通信对方已经关闭连接了</span><br><span class="line"> * recv返回-1，表示失败。</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">ssize_t</span> recv( <span class="keyword">int</span> sockfd, <span class="keyword">void</span>* buf, <span class="keyword">size_t</span> len, <span class="keyword">int</span> flags )</span><br><span class="line"><span class="comment">/**</span><br><span class="line"> * send往sockfd上定入数据，buf和len分别指定写缓冲区的位置和大小，</span><br><span class="line"> * flags平常使用0即可</span><br><span class="line"> * send成功时返回实际定入的数据长度</span><br><span class="line"> * send失败时返回-1</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">ssize_t</span> send( <span class="keyword">int</span> sockfd, <span class="keyword">const</span> <span class="keyword">void</span>* buf, <span class="keyword">size_t</span> len, <span class="keyword">int</span> flags )</span><br></pre></td></tr></table></figure>
<h4 id="udp_u6570_u636E_u8BFB_u5199"><a href="#udp_u6570_u636E_u8BFB_u5199" class="headerlink" title="udp数据读写"></a>udp数据读写</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">#<span class="keyword">include</span> <span class="string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> <span class="string">&lt;sys/socket.h&gt;</span></span></span><br><span class="line"><span class="keyword">ssize_t</span> recvfrom( <span class="keyword">int</span> sockfd, <span class="keyword">void</span>* buf, <span class="keyword">size_t</span> leng, <span class="keyword">int</span> flags, <span class="keyword">struct</span> sockaddr* src_addr, <span class="keyword">socklen_t</span>* addrlen );</span><br><span class="line"><span class="keyword">ssize_t</span> sendto( <span class="keyword">int</span> sockfd, <span class="keyword">void</span>* buf, <span class="keyword">size_t</span> leng, <span class="keyword">int</span> flags, <span class="keyword">struct</span> sockaddr* dest_addr, <span class="keyword">socklen_t</span>* addrlen );</span><br></pre></td></tr></table></figure>
<h3 id="socket_API_u529F_u80FD"><a href="#socket_API_u529F_u80FD" class="headerlink" title="socket API功能"></a>socket API功能</h3><p>1：将应用程序数据从用户缓冲区中复制到TCP/UDP内核发送缓冲区，以交付内核发送数据；或者是从内核TCP/UDP接收缓冲区中复制数据到用户缓冲区，以读取数据。<br>2：应用程序可以通过它们来修改内核中各层协议的某些头部信息或其他数据结构。</p>
]]></content>
    <summary type="html">
    <![CDATA[<h3 id="u529F_u80FD_u51FD_u6570"><a href="#u529F_u80FD_u51FD_u6570" class="headerlink" title="功能函数"></a>功能函数</h3><h4 id="u4E3B_u673A_u5B57_u8282_u5E8F_u4E0E_u7F51_u7EDC_u5B57_u8282_u5E8F_u4E4B_u95F4_u7684_u8F6C_u6362"><a href="#u4E3B_u673A_u5B57_u8282_u5E8F_u4E0E_u7F51_u7EDC_u5B57_u8282_u5E8F_u4E4B_u95F4_u7684_u8F6C_u6362" class="headerlink" title="主机字节序与网络字节序之间的转换"></a>主机字节序与网络字节序之间的转换</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">大小端转换函数</span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> <span class="string">&lt;netinet/in.h&gt;</span></span></span><br><span class="line"><span class="comment">//host to network long，即长整形32位</span></span><br><span class="line"><span class="function"><span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="title">htonl</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">int</span> hostlong)</span></span>;</span><br><span class="line"><span class="comment">//host to network short</span></span><br><span class="line"><span class="function"><span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="title">htons</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">short</span> <span class="keyword">int</span> hostshort)</span></span>;</span><br><span class="line"><span class="comment">//network to host long</span></span><br><span class="line"><span class="function"><span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="title">ntohl</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">int</span> netlong)</span></span>;</span><br><span class="line"><span class="comment">//host to network short</span></span><br><span class="line"><span class="function"><span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="title">ntohs</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">int</span> netshort)</span></span>;</span><br></pre></td></tr></table></figure>]]>
    
    </summary>
    
      <category term="服务器编程" scheme="http://jinpingwang.github.io/tags/%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%BC%96%E7%A8%8B/"/>
    
      <category term="服务器编程" scheme="http://jinpingwang.github.io/categories/%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[mysql之安装配置]]></title>
    <link href="http://jinpingwang.github.io/2016/04/11/database/mysql%E4%B9%8B%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE/"/>
    <id>http://jinpingwang.github.io/2016/04/11/database/mysql之安装配置/</id>
    <published>2016-04-11T13:47:34.000Z</published>
    <updated>2016-04-21T12:17:42.458Z</updated>
    <content type="html"><![CDATA[<p>介绍了linux下mysql-server的安装与卸载；登陆；编码配置；启动与关闭；root用户无法登陆解决。</p>
<h3 id="u5B89_u88C5_u4E0E_u5378_u8F7D"><a href="#u5B89_u88C5_u4E0E_u5378_u8F7D" class="headerlink" title="安装与卸载"></a>安装与卸载</h3><h4 id="u5B89_u88C5"><a href="#u5B89_u88C5" class="headerlink" title="安装"></a>安装</h4><p>mysql-server, mysql-client, libmysqlclient-dev。一般安装mysql-server就可以了。<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt-get <span class="operator"><span class="keyword">install</span> mysql-<span class="keyword">server</span></span></span><br></pre></td></tr></table></figure></p>
<p>将/etc/mysql/my.cnf中的这一行<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bind-address           = <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span></span><br></pre></td></tr></table></figure></p>
<a id="more"></a>
<p>注释掉，修改为<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">#bind-address           = <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span></span></span><br></pre></td></tr></table></figure></p>
<p>然后重启<br><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="regexp">/etc/i</span>nit.d<span class="regexp">/mysql restart</span></span><br></pre></td></tr></table></figure></p>
<h4 id="u5378_u8F7D"><a href="#u5378_u8F7D" class="headerlink" title="卸载"></a>卸载</h4><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">//如果不知道版本号就直接用*来代替</span><br><span class="line">apt-<span class="built_in">get</span> autoremove --purge mysql-server-*</span><br><span class="line">apt-<span class="built_in">get</span> <span class="built_in">remove</span> mysql-server</span><br><span class="line">apt-<span class="built_in">get</span> autoremove mysql-server</span><br><span class="line">apt-<span class="built_in">get</span> <span class="built_in">remove</span> mysql-common</span><br></pre></td></tr></table></figure>
<h3 id="u767B_u9646"><a href="#u767B_u9646" class="headerlink" title="登陆"></a>登陆</h3><h4 id="u767B_u9646_u672C_u673A_u6570_u636E_u5E93"><a href="#u767B_u9646_u672C_u673A_u6570_u636E_u5E93" class="headerlink" title="登陆本机数据库"></a>登陆本机数据库</h4><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mysql -u username -<span class="tag">p</span></span><br><span class="line">mysql -u username -<span class="tag">p</span> dbname</span><br></pre></td></tr></table></figure>
<h4 id="u767B_u9646_u8FDC_u7A0B_u6570_u636E_u5E93"><a href="#u767B_u9646_u8FDC_u7A0B_u6570_u636E_u5E93" class="headerlink" title="登陆远程数据库"></a>登陆远程数据库</h4><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//默认下root用户不支持远程登陆</span></span><br><span class="line">mysql -<span class="keyword">h</span> ip -<span class="keyword">u</span> username</span><br></pre></td></tr></table></figure>
<h3 id="u7F16_u7801_u914D_u7F6E"><a href="#u7F16_u7801_u914D_u7F6E" class="headerlink" title="编码配置"></a>编码配置</h3><h4 id="u67E5_u770B_u5F53_u524D_u6570_u636E_u5E93_u7684_u5B57_u7B26_u96C6"><a href="#u67E5_u770B_u5F53_u524D_u6570_u636E_u5E93_u7684_u5B57_u7B26_u96C6" class="headerlink" title="查看当前数据库的字符集"></a>查看当前数据库的字符集</h4><p>登入mysql后输入<br><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">status<span class="comment">;</span></span><br></pre></td></tr></table></figure></p>
<p>然后可以看到<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">Server <span class="string">characterset:</span>	latin1</span><br><span class="line">Db     <span class="string">characterset:</span>	latin1</span><br><span class="line">Client <span class="string">characterset:</span>	latin1</span><br><span class="line">Conn.  <span class="string">characterset:</span>	latin1</span><br><span class="line">...</span><br></pre></td></tr></table></figure></p>
<h4 id="u5C06_u5B57_u7B26_u96C6_u4FEE_u6539_u6210utf-8"><a href="#u5C06_u5B57_u7B26_u96C6_u4FEE_u6539_u6210utf-8" class="headerlink" title="将字符集修改成utf-8"></a>将字符集修改成utf-8</h4><p>编辑/etc/mysql/my.cnf，修改以下两个地方<br>其一：<br><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">[client]</span></span><br><span class="line"><span class="setting">port        =<span class="value"><span class="number">3306</span></span></span></span><br><span class="line"><span class="setting">socket     =<span class="value">/var/run/mysqld/mysqld.sock</span></span></span><br></pre></td></tr></table></figure></p>
<p>在port前添加一行，修改成<br><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">[client]</span></span><br><span class="line"><span class="setting">default-character-set=<span class="value">utf8</span></span></span><br><span class="line"><span class="setting">port        =<span class="value"><span class="number">3306</span></span></span></span><br><span class="line"><span class="setting">socket     =<span class="value">/var/run/mysqld/mysqld.sock</span></span></span><br></pre></td></tr></table></figure></p>
<p>其二：<br><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[mysqld]</span><br><span class="line"><span class="keyword">user</span>        <span class="title">=mysql</span></span><br><span class="line">pid-file     =/var/run/mysqld/mysqld.pid</span><br></pre></td></tr></table></figure></p>
<p>在user前添加一行，修改成<br><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">[mysqld]</span></span><br><span class="line"><span class="setting">character_set_server=<span class="value">utf8</span></span></span><br><span class="line"><span class="setting">user        =<span class="value">mysql</span></span></span><br><span class="line"><span class="setting">pid-file     =<span class="value">/var/run/mysqld/mysqld.pid</span></span></span><br></pre></td></tr></table></figure></p>
<h4 id="u91CD_u542F_u6570_u636E_u5E93"><a href="#u91CD_u542F_u6570_u636E_u5E93" class="headerlink" title="重启数据库"></a>重启数据库</h4><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="regexp">/etc/i</span>nit.d<span class="regexp">/mysql restart</span></span><br></pre></td></tr></table></figure>
<h4 id="u5220_u9664_u539F_u5148_u6570_u636E_u5E93"><a href="#u5220_u9664_u539F_u5148_u6570_u636E_u5E93" class="headerlink" title="删除原先数据库"></a>删除原先数据库</h4><p>修改编码后，原先的数据库还是乱码。但新建的数据库中创建的数据就不会乱码了。注意，在原先数据库中创建的新表还是乱码，必需在新创建的数据库中创建的表才不会乱码。</p>
<h3 id="u542F_u52A8_u4E0E_u5173_u95ED"><a href="#u542F_u52A8_u4E0E_u5173_u95ED" class="headerlink" title="启动与关闭"></a>启动与关闭</h3><h4 id="u542F_u52A8"><a href="#u542F_u52A8" class="headerlink" title="启动"></a>启动</h4><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/etc/init.d/mysql <span class="literal">start</span></span><br></pre></td></tr></table></figure>
<h4 id="u5173_u95ED"><a href="#u5173_u95ED" class="headerlink" title="关闭"></a>关闭</h4><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/etc/init.d/mysql <span class="literal">stop</span></span><br></pre></td></tr></table></figure>
<h3 id="root_u7528_u6237_u65E0_u6CD5_u767B_u9646_u89E3_u51B3"><a href="#root_u7528_u6237_u65E0_u6CD5_u767B_u9646_u89E3_u51B3" class="headerlink" title="root用户无法登陆解决"></a>root用户无法登陆解决</h3><p>直接使用/etc/mysql/debian.cnf文件中[client]节提供的用户名和密码，进入数据库后删除root，然后重新创建并授权root用户。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>介绍了linux下mysql-server的安装与卸载；登陆；编码配置；启动与关闭；root用户无法登陆解决。</p>
<h3 id="u5B89_u88C5_u4E0E_u5378_u8F7D"><a href="#u5B89_u88C5_u4E0E_u5378_u8F7D" class="headerlink" title="安装与卸载"></a>安装与卸载</h3><h4 id="u5B89_u88C5"><a href="#u5B89_u88C5" class="headerlink" title="安装"></a>安装</h4><p>mysql-server, mysql-client, libmysqlclient-dev。一般安装mysql-server就可以了。<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt-get <span class="operator"><span class="keyword">install</span> mysql-<span class="keyword">server</span></span></span><br></pre></td></tr></table></figure></p>
<p>将/etc/mysql/my.cnf中的这一行<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bind-address           = <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span></span><br></pre></td></tr></table></figure></p>]]>
    
    </summary>
    
      <category term="mysql" scheme="http://jinpingwang.github.io/tags/mysql/"/>
    
      <category term="数据库" scheme="http://jinpingwang.github.io/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
      <category term="数据库" scheme="http://jinpingwang.github.io/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[bootstrap源码之Images]]></title>
    <link href="http://jinpingwang.github.io/2016/04/07/bootstrap/11:bootstrap%E6%BA%90%E7%A0%81%E4%B9%8BImages/"/>
    <id>http://jinpingwang.github.io/2016/04/07/bootstrap/11:bootstrap源码之Images/</id>
    <published>2016-04-07T01:08:54.000Z</published>
    <updated>2016-04-21T10:58:42.876Z</updated>
    <content type="html"><![CDATA[<p>介绍了bootstrap中Images。简单介绍有关Responsive images，Image shapes。<br><a id="more"></a></p>
<h3 id="u6E90_u7801"><a href="#u6E90_u7801" class="headerlink" title="源码"></a>源码</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="class">.img-responsive</span> <span class="rules">&#123;</span><br><span class="line">  <span class="rule"><span class="attribute">display</span>:<span class="value"> block</span></span>;</span><br><span class="line">  <span class="rule"><span class="attribute">max-width</span>:<span class="value"> <span class="number">100%</span></span></span>;</span><br><span class="line">  <span class="rule"><span class="attribute">height</span>:<span class="value"> auto</span></span>;</span><br><span class="line">&#125;</span></span><br><span class="line"><span class="class">.center-block</span> <span class="rules">&#123;</span><br><span class="line">  <span class="rule"><span class="attribute">display</span>:<span class="value"> block</span></span>;</span><br><span class="line">  <span class="rule"><span class="attribute">margin-right</span>:<span class="value"> auto</span></span>;</span><br><span class="line">  <span class="rule"><span class="attribute">margin-left</span>:<span class="value"> auto</span></span>;</span><br><span class="line">&#125;</span></span><br><span class="line"><span class="class">.img-rounded</span> <span class="rules">&#123;</span><br><span class="line">  <span class="rule"><span class="attribute">border-radius</span>:<span class="value"> <span class="number">6px</span></span></span>;</span><br><span class="line">&#125;</span></span><br><span class="line"><span class="class">.img-thumbnail</span> <span class="rules">&#123;</span><br><span class="line">  <span class="rule"><span class="attribute">display</span>:<span class="value"> inline-block</span></span>;</span><br><span class="line">  <span class="rule"><span class="attribute">max-width</span>:<span class="value"> <span class="number">100%</span></span></span>;</span><br><span class="line">  <span class="rule"><span class="attribute">height</span>:<span class="value"> auto</span></span>;</span><br><span class="line">  <span class="rule"><span class="attribute">padding</span>:<span class="value"> <span class="number">4px</span></span></span>;</span><br><span class="line">  <span class="rule"><span class="attribute">line-height</span>:<span class="value"> <span class="number">1.42857143</span></span></span>;</span><br><span class="line">  <span class="rule"><span class="attribute">background-color</span>:<span class="value"> <span class="hexcolor">#fff</span></span></span>;</span><br><span class="line">  <span class="rule"><span class="attribute">border</span>:<span class="value"> <span class="number">1px</span> solid <span class="hexcolor">#ddd</span></span></span>;</span><br><span class="line">  <span class="rule"><span class="attribute">border-radius</span>:<span class="value"> <span class="number">4px</span></span></span>;</span><br><span class="line">  <span class="rule"><span class="attribute">-webkit-transition</span>:<span class="value"> all .<span class="number">2s</span> ease-in-out</span></span>;</span><br><span class="line">       <span class="rule"><span class="attribute">-o-transition</span>:<span class="value"> all .<span class="number">2s</span> ease-in-out</span></span>;</span><br><span class="line">          <span class="rule"><span class="attribute">transition</span>:<span class="value"> all .<span class="number">2s</span> ease-in-out</span></span>;</span><br><span class="line">&#125;</span></span><br><span class="line"><span class="class">.img-circle</span> <span class="rules">&#123;</span><br><span class="line">  <span class="rule"><span class="attribute">border-radius</span>:<span class="value"> <span class="number">50%</span></span></span>;</span><br><span class="line">&#125;</span></span><br></pre></td></tr></table></figure>
<h3 id="u5256_u6790"><a href="#u5256_u6790" class="headerlink" title="剖析"></a>剖析</h3><h4 id="Responsive_images"><a href="#Responsive_images" class="headerlink" title="Responsive images"></a>Responsive images</h4><p><code>display: block</code>：将元素设置为块元素；<br><code>max-width: 100%;</code>：将元素的max-width设置为父元素的宽度。如果父元素的宽度大于元素本身的宽度，则使用元素的本身宽度。如果使用的是width: 100%，则不论元素的宽度是否大于父元素，则元素的的宽度都为父元素的宽度。<br><code>height: auto;</code>：将元素的height设置为auto。</p>
<h4 id="Image_shapes"><a href="#Image_shapes" class="headerlink" title="Image shapes"></a>Image shapes</h4><h5 id="image-rounded"><a href="#image-rounded" class="headerlink" title="image-rounded"></a>image-rounded</h5><p>边角是圆弧形。如果圆弧不明显，可以重新设置border-radius的值。</p>
<h5 id="image-thumbnail"><a href="#image-thumbnail" class="headerlink" title="image-thumbnail"></a>image-thumbnail</h5><p><code>display: inline-block;</code>：把元素设置为块元素，但可以在同一行。<br><code>max-width: 100%;</code>：宽度设置为父元素的宽度，超过了父元素的宽度则使用元素自己的宽度。<br>其它的就是设置边框与边界。</p>
<h5 id="img-circle"><a href="#img-circle" class="headerlink" title="img-circle"></a>img-circle</h5><p>与image-rounded类似，通过设置border-radius来实现。</p>
<h4 id="center-block_u4E0Etext-center"><a href="#center-block_u4E0Etext-center" class="headerlink" title="center-block与text-center"></a>center-block与text-center</h4><p>为了使img元素能居中，则通过为img元素添加center-block样式即可。<br>如果是为了使块元素中的文字居中，则通过为块元素添加text-center样式即可。但如果是非块元素，因为无法设置长宽，所以没办法通过text-center来使非块元素居中。<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class">.text-center</span> <span class="rules">&#123;</span><br><span class="line">  <span class="rule"><span class="attribute">text-align</span>:<span class="value"> center</span></span>;</span><br><span class="line">&#125;</span></span><br></pre></td></tr></table></figure></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>介绍了bootstrap中Images。简单介绍有关Responsive images，Image shapes。<br>]]>
    
    </summary>
    
      <category term="bootstrap" scheme="http://jinpingwang.github.io/tags/bootstrap/"/>
    
      <category term="前端" scheme="http://jinpingwang.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="bootstrap" scheme="http://jinpingwang.github.io/categories/bootstrap/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[URL访问路径在服务器上的匹配详解]]></title>
    <link href="http://jinpingwang.github.io/2016/04/02/web/URL%E8%AE%BF%E9%97%AE%E8%B7%AF%E5%BE%84%E5%9C%A8%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B8%8A%E7%9A%84%E5%8C%B9%E9%85%8D%E8%AF%A6%E8%A7%A3/"/>
    <id>http://jinpingwang.github.io/2016/04/02/web/URL访问路径在服务器上的匹配详解/</id>
    <published>2016-04-02T07:45:24.000Z</published>
    <updated>2016-04-22T13:32:15.864Z</updated>
    <content type="html"><![CDATA[<p>讲述了服务器是如何根据客户端访问的URL来返回相应的资源：servlet，目录下的欢迎文件还是真实存在的资源。<br><a id="more"></a></p>
<h3 id="u6E90_u7801"><a href="#u6E90_u7801" class="headerlink" title="源码"></a>源码</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">servlet</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="title">servlet-name</span>&gt;</span>test01<span class="tag">&lt;/<span class="title">servlet-name</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="title">servlet-class</span>&gt;</span>test.test01<span class="tag">&lt;/<span class="title">servlet-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">servlet</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">servlet-mapping</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="title">servlet-name</span>&gt;</span>test01<span class="tag">&lt;/<span class="title">servlet-name</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="title">url-pattern</span>&gt;</span>/test<span class="tag">&lt;/<span class="title">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">servlet-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="title">servlet</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="title">servlet-name</span>&gt;</span>test02<span class="tag">&lt;/<span class="title">servlet-name</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="title">servlet-class</span>&gt;</span>test.test02<span class="tag">&lt;/<span class="title">servlet-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">servlet</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">servlet-mapping</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="title">servlet-name</span>&gt;</span>test02<span class="tag">&lt;/<span class="title">servlet-name</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="title">url-pattern</span>&gt;</span>/test.html<span class="tag">&lt;/<span class="title">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">servlet-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="title">welcome-file-list</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">welcom-file</span>&gt;</span>index.html<span class="tag">&lt;/<span class="title">welcome-file</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">welcome-file-list</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="u5256_u6790"><a href="#u5256_u6790" class="headerlink" title="剖析"></a>剖析</h3><p>一：先匹配servlet<br>servlet中url-pattern匹配顺序：<br>first：完全匹配<br>second：目录匹配<br>third：扩展名匹配</p>
<p>二：servlet无法匹配，执行如下匹配操作<br>1：如果url访问的不是文件夹，则查看服务器对应的路径下是否有这个文件，有则返回，无则返回404。假设服务器上存在myapp/error/errorPage.html，则访问：<br>host/myapp/error/errorPage.html    :   能访问<br>2：如果是文件夹，则查看该文件夹下是否有web.xml中welcome-file-list匹配的文件，有则返回，无则返回404。假设服务器上存在myapp/hello/index.html，则访问：<br>host/myapp/hello    :   能访问（返回hello/index.html）</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>讲述了服务器是如何根据客户端访问的URL来返回相应的资源：servlet，目录下的欢迎文件还是真实存在的资源。<br>]]>
    
    </summary>
    
      <category term="web" scheme="http://jinpingwang.github.io/tags/web/"/>
    
      <category term="web" scheme="http://jinpingwang.github.io/categories/web/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[深入浅出部署描述文件web.xml]]></title>
    <link href="http://jinpingwang.github.io/2016/04/02/web/%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BA%E9%83%A8%E7%BD%B2%E6%8F%8F%E8%BF%B0%E6%96%87%E4%BB%B6web.xml/"/>
    <id>http://jinpingwang.github.io/2016/04/02/web/深入浅出部署描述文件web.xml/</id>
    <published>2016-04-02T05:10:47.000Z</published>
    <updated>2016-05-04T08:10:48.913Z</updated>
    <content type="html"><![CDATA[<p>详解了web.xml中servlet映射配置，ServletContext的初始化参数配置，监听类配置，会话超时设置，过滤器设置，错误页面配置，欢迎文件配置。<br><a id="more"></a></p>
<h3 id="u6E90_u7801"><a href="#u6E90_u7801" class="headerlink" title="源码"></a>源码</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br></pre></td><td class="code"><pre><span class="line"><span class="pi">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">web-app</span> <span class="attribute">xmlns:xsi</span>=<span class="value">"http://www.w3.org/2001/XMLSchema-instance"</span></span><br><span class="line">	<span class="attribute">xmlns</span>=<span class="value">"http://java.sun.com/xml/ns/javaee"</span></span><br><span class="line">	<span class="attribute">xsi:schemaLocation</span>=<span class="value">"http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd"</span></span><br><span class="line">	<span class="attribute">id</span>=<span class="value">"WebApp_ID"</span> <span class="attribute">version</span>=<span class="value">"3.0"</span>&gt;</span></span><br><span class="line">	</span><br><span class="line">	<span class="tag">&lt;<span class="title">display-name</span>&gt;</span>Archetype Created Web Application<span class="tag">&lt;/<span class="title">display-name</span>&gt;</span></span><br><span class="line">	</span><br><span class="line">	<span class="comment">&lt;!-- servlet映射配置 --&gt;</span>	</span><br><span class="line">	<span class="tag">&lt;<span class="title">servlet</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="title">servlet-name</span>&gt;</span>test<span class="tag">&lt;/<span class="title">servlet-name</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="title">servlet-class</span>&gt;</span>test.test01<span class="tag">&lt;/<span class="title">servlet-class</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="title">init-param</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="title">param-name</span>&gt;</span>test01<span class="tag">&lt;/<span class="title">param-name</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="title">param-value</span>&gt;</span>test02<span class="tag">&lt;/<span class="title">param-value</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="title">init-param</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="title">init-param</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="title">param-name</span>&gt;</span>hello<span class="tag">&lt;/<span class="title">param-name</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="title">param-value</span>&gt;</span>world<span class="tag">&lt;/<span class="title">param-value</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="title">init-param</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="title">servlet</span>&gt;</span></span><br><span class="line">	</span><br><span class="line">	<span class="tag">&lt;<span class="title">servlet-mapping</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="title">servlet-name</span>&gt;</span>test<span class="tag">&lt;/<span class="title">servlet-name</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="title">url-pattern</span>&gt;</span>/test<span class="tag">&lt;/<span class="title">url-pattern</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="title">servlet-mapping</span>&gt;</span></span><br><span class="line">	</span><br><span class="line">	<span class="comment">&lt;!-- ServletContext的初始化参数配置 --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="title">context-param</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="title">param-name</span>&gt;</span>test02<span class="tag">&lt;/<span class="title">param-name</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="title">param-value</span>&gt;</span>test03<span class="tag">&lt;/<span class="title">param-value</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="title">context-param</span>&gt;</span></span><br><span class="line">	</span><br><span class="line">	<span class="comment">&lt;!-- ServletcContext相关监听配置 --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="title">listener</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="title">listener-class</span>&gt;</span>test.MyServletContextListener<span class="tag">&lt;/<span class="title">listener-class</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="title">listener</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="title">listener</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="title">listener-class</span>&gt;</span>test.MyServletContextAttributeListener<span class="tag">&lt;/<span class="title">listener-class</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="title">listener</span>&gt;</span></span><br><span class="line">	</span><br><span class="line">	<span class="tag">&lt;<span class="title">listener</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="title">listener-class</span>&gt;</span>test.MyServletRequestListener<span class="tag">&lt;/<span class="title">listener-class</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="title">listener</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="title">listener</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="title">listener-class</span>&gt;</span>test.MyServletRequestAttributeListener<span class="tag">&lt;/<span class="title">listener-class</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="title">listener</span>&gt;</span></span><br><span class="line">	</span><br><span class="line">	<span class="comment">&lt;!-- 会话超时设置 --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="title">session-config</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="title">session-timeout</span>&gt;</span>1<span class="tag">&lt;/<span class="title">session-timeout</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="title">session-config</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 过滤器设置 --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="title">filter</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="title">filter-name</span>&gt;</span>filter<span class="tag">&lt;/<span class="title">filter-name</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="title">filter-class</span>&gt;</span>filters.setCharacterEncodingFilter<span class="tag">&lt;/<span class="title">filter-class</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="title">init-param</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="title">param-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="title">param-name</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="title">param-value</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="title">param-value</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="title">init-param</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="title">init-param</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="title">param-name</span>&gt;</span>ignore<span class="tag">&lt;/<span class="title">param-name</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="title">param-value</span>&gt;</span>true<span class="tag">&lt;/<span class="title">param-value</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="title">init-param</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="title">filter</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="tag">&lt;<span class="title">filter-mapping</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="title">filter-name</span>&gt;</span>filter<span class="tag">&lt;/<span class="title">filter-name</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="title">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="title">url-pattern</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="title">filter-mapping</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- 错误页面配置 --&gt;</span></span><br><span class="line">  	<span class="tag">&lt;<span class="title">error-page</span>&gt;</span></span><br><span class="line">  		<span class="tag">&lt;<span class="title">error-code</span>&gt;</span>404<span class="tag">&lt;/<span class="title">error-code</span>&gt;</span></span><br><span class="line">  		<span class="tag">&lt;<span class="title">location</span>&gt;</span>/error/error1.html<span class="tag">&lt;/<span class="title">location</span>&gt;</span></span><br><span class="line">  	<span class="tag">&lt;/<span class="title">error-page</span>&gt;</span></span><br><span class="line">  	</span><br><span class="line">  	<span class="tag">&lt;<span class="title">error-page</span>&gt;</span></span><br><span class="line">  		<span class="tag">&lt;<span class="title">exception-type</span>&gt;</span>java.lang.Throwable<span class="tag">&lt;/<span class="title">exception-type</span>&gt;</span></span><br><span class="line">  		<span class="tag">&lt;<span class="title">location</span>&gt;</span>/error/error2.jsp<span class="tag">&lt;/<span class="title">location</span>&gt;</span></span><br><span class="line">  	<span class="tag">&lt;/<span class="title">error-page</span>&gt;</span>	</span><br><span class="line">  	</span><br><span class="line">  	<span class="comment">&lt;!-- 欢迎文件配置 --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="title">welcome-file-list</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="title">welcome-file</span>&gt;</span>index.html<span class="tag">&lt;/<span class="title">welcome-file</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="title">welcome-file-list</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">&lt;!-- 认证，授权，机密性与数据完整性配置  --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="title">security-constraint</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="title">web-resource-collection</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="title">web-resource-name</span>&gt;</span>UpdateRecipes<span class="tag">&lt;/<span class="title">web-resource-name</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="title">url-pattern</span>&gt;</span>/test3<span class="tag">&lt;/<span class="title">url-pattern</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="title">http-method</span>&gt;</span>GET<span class="tag">&lt;/<span class="title">http-method</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="title">http-method</span>&gt;</span>POST<span class="tag">&lt;/<span class="title">http-method</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="title">web-resource-collection</span>&gt;</span></span><br><span class="line">		</span><br><span class="line">		<span class="tag">&lt;<span class="title">auth-constraint</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="title">role-name</span>&gt;</span>Admin<span class="tag">&lt;/<span class="title">role-name</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="title">role-name</span>&gt;</span>Member<span class="tag">&lt;/<span class="title">role-name</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="title">auth-constraint</span>&gt;</span></span><br><span class="line">		</span><br><span class="line">		<span class="tag">&lt;<span class="title">user-data-constraint</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="title">transport-guarantee</span>&gt;</span>CONFIDENTIAL<span class="tag">&lt;/<span class="title">transport-guarantee</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="title">user-data-constraint</span>&gt;</span></span><br><span class="line">		</span><br><span class="line">	<span class="tag">&lt;/<span class="title">security-constraint</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">  	<span class="tag">&lt;<span class="title">login-config</span>&gt;</span></span><br><span class="line">  		<span class="tag">&lt;<span class="title">auth-method</span>&gt;</span>FORM<span class="tag">&lt;/<span class="title">auth-method</span>&gt;</span></span><br><span class="line">  		<span class="tag">&lt;<span class="title">form-login-config</span>&gt;</span></span><br><span class="line">  			<span class="tag">&lt;<span class="title">form-login-page</span>&gt;</span>/loginPage.html<span class="tag">&lt;/<span class="title">form-login-page</span>&gt;</span></span><br><span class="line">  			<span class="tag">&lt;<span class="title">form-error-page</span>&gt;</span>/loginError.html<span class="tag">&lt;/<span class="title">form-error-page</span>&gt;</span></span><br><span class="line">  		<span class="tag">&lt;/<span class="title">form-login-config</span>&gt;</span></span><br><span class="line">  	<span class="tag">&lt;/<span class="title">login-config</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="tag">&lt;<span class="title">login-config</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="title">auth-method</span>&gt;</span>BASIC<span class="tag">&lt;/<span class="title">auth-method</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="title">login-config</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="u5256_u6790"><a href="#u5256_u6790" class="headerlink" title="剖析"></a>剖析</h3><h4 id="web_u4E2D_u5404_u6587_u4EF6_u7684_u76EE_u5F55_u7ED3_u6784"><a href="#web_u4E2D_u5404_u6587_u4EF6_u7684_u76EE_u5F55_u7ED3_u6784" class="headerlink" title="web中各文件的目录结构"></a>web中各文件的目录结构</h4><p>webapps<br>webapps/myapp<br>webapps/myapp/WEB-INF<br>webapps/myapp/classes<br>webapps/myapp/classes/package<br>webapps/myapp/lib<br>webapps/myapp/tags</p>
<h4 id="servlet_u6620_u5C04_u914D_u7F6E"><a href="#servlet_u6620_u5C04_u914D_u7F6E" class="headerlink" title="servlet映射配置"></a>servlet映射配置</h4><p>一：一个servlet对应一个servlet-mapping。<br>二：servlet与servlet-mapping是通过servlet-name进行相关联<br>三：ServletConfig可以获取servlet中的init-param的初始化参数</p>
<h4 id="ServletContext_u7684_u521D_u59CB_u5316_u53C2_u6570_u914D_u7F6E"><a href="#ServletContext_u7684_u521D_u59CB_u5316_u53C2_u6570_u914D_u7F6E" class="headerlink" title="ServletContext的初始化参数配置"></a>ServletContext的初始化参数配置</h4><p>在ServletContext中可以获取这些初始化参数，都是String类型。</p>
<h4 id="u76D1_u542C_u7C7B_u914D_u7F6E"><a href="#u76D1_u542C_u7C7B_u914D_u7F6E" class="headerlink" title="监听类配置"></a>监听类配置</h4><p>ServletContext相关的两个监听类（即继承了ServletContextListener与ServletContextAttributeListener），ServletRequest相关的两个监听类（即继承ServletRequestListener与ServletContextAttributeListener）需要在web.xml中设置，而与HttpSession的监听类不需要在web.xml中设置。</p>
<h4 id="u4F1A_u8BDD_u8D85_u65F6_u8BBE_u7F6E"><a href="#u4F1A_u8BDD_u8D85_u65F6_u8BBE_u7F6E" class="headerlink" title="会话超时设置"></a>会话超时设置</h4><p>以分钟为单位，如果设置为-1则代表永不会到期。</p>
<h4 id="u8FC7_u6EE4_u5668_u8BBE_u7F6E"><a href="#u8FC7_u6EE4_u5668_u8BBE_u7F6E" class="headerlink" title="过滤器设置"></a>过滤器设置</h4><h4 id="u9519_u8BEF_u9875_u9762_u914D_u7F6E"><a href="#u9519_u8BEF_u9875_u9762_u914D_u7F6E" class="headerlink" title="错误页面配置"></a>错误页面配置</h4><p>一个是异常的错误页面设置，另一个是返回状态码的页面设置。</p>
<h4 id="u6B22_u8FCE_u6587_u4EF6_u914D_u7F6E"><a href="#u6B22_u8FCE_u6587_u4EF6_u914D_u7F6E" class="headerlink" title="欢迎文件配置"></a>欢迎文件配置</h4><p>访问URL路径中如果是一个目录，则会在该目录中找与welcome-file-list中第一个匹配的文件。</p>
<h4 id="u8BA4_u8BC1_uFF0C_u6388_u6743_uFF0C_u673A_u5BC6_u6027_u4E0E_u6570_u636E_u5B8C_u6574_u6027_u914D_u7F6E"><a href="#u8BA4_u8BC1_uFF0C_u6388_u6743_uFF0C_u673A_u5BC6_u6027_u4E0E_u6570_u636E_u5B8C_u6574_u6027_u914D_u7F6E" class="headerlink" title="认证，授权，机密性与数据完整性配置"></a>认证，授权，机密性与数据完整性配置</h4><p>详见”基于tomcat的web应用安全”这一篇博客。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>详解了web.xml中servlet映射配置，ServletContext的初始化参数配置，监听类配置，会话超时设置，过滤器设置，错误页面配置，欢迎文件配置。<br>]]>
    
    </summary>
    
      <category term="web" scheme="http://jinpingwang.github.io/tags/web/"/>
    
      <category term="web" scheme="http://jinpingwang.github.io/categories/web/"/>
    
  </entry>
  
</feed>
