<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[Quick notes]]></title>
  <subtitle><![CDATA[等风来]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://jinpingwang.github.io/"/>
  <updated>2016-07-13T12:17:09.641Z</updated>
  <id>http://jinpingwang.github.io/</id>
  
  <author>
    <name><![CDATA[等风来]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[策略模式]]></title>
    <link href="http://jinpingwang.github.io/2016/05/27/designPattern/%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F/"/>
    <id>http://jinpingwang.github.io/2016/05/27/designPattern/策略模式/</id>
    <published>2016-05-27T02:13:28.000Z</published>
    <updated>2016-07-13T12:17:09.641Z</updated>
    <content type="html"><![CDATA[<h3 id="what"><a href="#what" class="headerlink" title="what"></a>what</h3><p>定义了算法族，分别封装起来，让它们之间可以互相替换，此模式让算法的变化独立于算法的客户。</p>
<h3 id="why"><a href="#why" class="headerlink" title="why"></a>why</h3><p>如果不把变化的部分抽取出来，程序的健壮性不高。<br>在抽象类中实现代码，子类与这个方法不同是需要进行覆盖，而如果这样的子类很多的话，则需要覆盖很多次；利用组合的做法扩展对象的行为，可以在运行行为动态地进行扩展。<br><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">abstract</span> <span class="title">Duck</span>&#123;</span></span><br><span class="line">    public void fly()&#123;</span><br><span class="line">        <span class="type">System</span>.out.println(<span class="string">"i can fly"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//剩余其它方法</span></span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RubberDuck</span> <span class="keyword"><span class="keyword">extends</span></span> <span class="title">Duck</span>&#123;</span></span><br><span class="line">    <span class="comment">//橡皮鸭不会飞，所以它要覆盖父类的fly方法，而如果类似这样的类多的话则每一个方法都要覆盖</span></span><br><span class="line">    public void fly()&#123;</span><br><span class="line">        <span class="type">System</span>.out.println(<span class="string">"i can't fly"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>如果使用接口，则让类去实现这些接口，可如果类很多的话，则每一个类都要去实现这个接口的方法；<br><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Interface</span> <span class="type">Flyable</span>&#123;</span><br><span class="line">    void fly();</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">abstract</span> <span class="title">Duck</span>&#123;</span></span><br><span class="line">    <span class="comment">//剩余其它方法</span></span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RubberDuck</span> <span class="keyword"><span class="keyword">extends</span></span> <span class="title">Duck</span> <span class="title">implements</span> <span class="title">Flyable</span>&#123;</span></span><br><span class="line">    public void fly()&#123;</span><br><span class="line">        <span class="type">System</span>.out.println(<span class="string">"i cat't fly"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CommonDuck</span> <span class="keyword"><span class="keyword">extends</span></span> <span class="title">Duck</span> <span class="title">implements</span> <span class="title">Flyable</span>&#123;</span></span><br><span class="line">    public void fly()&#123;</span><br><span class="line">        <span class="type">System</span>.out.println(<span class="string">"i can fly"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="how"><a href="#how" class="headerlink" title="how"></a>how</h3><h4 id="FlyBehavior"><a href="#FlyBehavior" class="headerlink" title="FlyBehavior"></a>FlyBehavior</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">FlyBehavior</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fly</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FlyWithWings</span> <span class="keyword">implements</span> <span class="title">FlyBehavior</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fly</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"I'm, flying"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FlyNoWay</span> <span class="keyword">implements</span> <span class="title">FlyBehavior</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fly</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"I can't fly"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="QuackBehavior"><a href="#QuackBehavior" class="headerlink" title="QuackBehavior"></a>QuackBehavior</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">QuackBehavior</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">quack</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Quack</span> <span class="keyword">implements</span> <span class="title">QuackBehavior</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">quack</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Quack"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MuteQuack</span> <span class="keyword">implements</span> <span class="title">QuackBehavior</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">quack</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"&lt;&lt; Slience &gt;&gt;"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="Duck"><a href="#Duck" class="headerlink" title="Duck"></a>Duck</h4><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title">Duck</span>&#123;</span><br><span class="line">    <span class="comment">//可以添加相应的get和set方法，这样就可以动态的绑定他们的行为。</span></span><br><span class="line">    FlyBehavior flyBehavior;</span><br><span class="line">    QuackBehavior quackBehavior;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Duck</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">performFly</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        flyBehavior.fly();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">performQuack</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        quackBehavior.quack();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">swim</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        System.<span class="keyword">out</span>.println(<span class="string">"All ducks float, even decoys!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="MallardDuck"><a href="#MallardDuck" class="headerlink" title="MallardDuck"></a>MallardDuck</h4><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">MallardDuck</span> <span class="keyword"><span class="keyword">extends</span></span> <span class="title">Duck</span>&#123;</span></span><br><span class="line">    public <span class="type">MallardDuck</span>()&#123;</span><br><span class="line">        quackBehavior = <span class="keyword">new</span> <span class="type">Quack</span>();</span><br><span class="line">        flyBehavior = <span class="keyword">new</span> <span class="type">FlyWithWings</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    public void display()&#123;</span><br><span class="line">        <span class="type">System</span>.out.println(<span class="string">"I'm a real Mallard duck"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="Main"><a href="#Main" class="headerlink" title="Main"></a>Main</h4><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">MiniDucksimulator</span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span>(<span class="params">String args[]</span>)</span>&#123;</span><br><span class="line">        Duck mallard = <span class="keyword">new</span> MallardDuck();</span><br><span class="line">        mallard.performQuack();</span><br><span class="line">        mallard.performFly();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[<h3 id="what"><a href="#what" class="headerlink" title="what"></a>what</h3><p>定义了算法族，分别封装起来，让它们之间可以互相替换，此模式让算法的变化独立于算法的客户。</p>
<h3 id="why">]]>
    </summary>
    
      <category term="设计模式" scheme="http://jinpingwang.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
      <category term="设计模式" scheme="http://jinpingwang.github.io/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[HTTPS安全篇]]></title>
    <link href="http://jinpingwang.github.io/2016/05/23/web/HTTPS%E5%AE%89%E5%85%A8%E7%AF%87/"/>
    <id>http://jinpingwang.github.io/2016/05/23/web/HTTPS安全篇/</id>
    <published>2016-05-23T14:16:28.000Z</published>
    <updated>2016-07-13T12:12:10.447Z</updated>
    <content type="html"><![CDATA[<p><div align="center"><img src="/myImages/细细品酌HTTPS安全篇.jpg"></div><br>HTTP通信中存在很多隐患，比如：认证，授权，机密性，数据完整性等。如果没有使用安全措施，通信的信息就很容易被劫获并被修改等。由此，HTTPS（HTTP＋SSL/TLS）应孕而生。本文先使用HTTP协议通信，通过wireshark抓取通信内容来佐证通信的安全隐患；然后引入一些密码学基础概念；接着介绍SSL/TLS协议；最后通过HTTPS协议通信，使用wireshark抓取通信内容来佐证通信的安全性。<br><a id="more"></a></p>
<h3 id="HTTP_u901A_u4FE1_u9690_u60A3"><a href="#HTTP_u901A_u4FE1_u9690_u60A3" class="headerlink" title="HTTP通信隐患"></a>HTTP通信隐患</h3><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">HTML <span class="keyword">Form</span> URL <span class="keyword">Encode</span>: application/x-www-<span class="keyword">form</span>-urlencoded</span><br><span class="line">    <span class="keyword">Form</span> item: <span class="string">"username"</span> = <span class="string">"kitty"</span></span><br><span class="line">        Key: username</span><br><span class="line">        Value: kitty</span><br><span class="line">    <span class="keyword">Form</span> item: <span class="string">"password"</span> = <span class="string">"867954"</span></span><br><span class="line">        Key: password</span><br><span class="line">        Value: 867954</span><br></pre></td></tr></table></figure>
<p>从wireshark捕获到的HTTP报文，可以看到username与password的信息完全暴露了。</p>
<h3 id="u5BC6_u7801_u5B66_u57FA_u7840"><a href="#u5BC6_u7801_u5B66_u57FA_u7840" class="headerlink" title="密码学基础"></a>密码学基础</h3><h4 id="u5BF9_u79F0_u52A0_u5BC6"><a href="#u5BF9_u79F0_u52A0_u5BC6" class="headerlink" title="对称加密"></a>对称加密</h4><h5 id="u5B9A_u4E49"><a href="#u5B9A_u4E49" class="headerlink" title="定义"></a>定义</h5><p>对称加密指加密和解密使用相同密钥的加密算法，即加密和解密的密钥是相同的。</p>
<h5 id="u4F18_u70B9"><a href="#u4F18_u70B9" class="headerlink" title="优点"></a>优点</h5><p>算法公开，计算量小，加密速度快，加密效率高。</p>
<h5 id="u7F3A_u70B9"><a href="#u7F3A_u70B9" class="headerlink" title="缺点"></a>缺点</h5><p>双方都使用相同的密钥，安全性得不到保障。</p>
<h5 id="u7C7B_u578B"><a href="#u7C7B_u578B" class="headerlink" title="类型"></a>类型</h5><p>DES(Data Encryption Standard)：数据加密标准<br>AES(Advanced Encryption Standard)：高级加密标准<br>AES与DES的区别在于AES比DES的位数更多。</p>
<h4 id="u975E_u5BF9_u79F0_u52A0_u5BC6"><a href="#u975E_u5BF9_u79F0_u52A0_u5BC6" class="headerlink" title="非对称加密"></a>非对称加密</h4><h5 id="u5B9A_u4E49-1"><a href="#u5B9A_u4E49-1" class="headerlink" title="定义"></a>定义</h5><p>非对称密码有两个密钥。其中一个密钥对外公开，所有人都能获取到的，称为公钥；另一个密钥是不公开的称为私钥。由公钥很难推算出私钥，由私钥也很验难推算出公钥。使用公钥加密后，只能使用私钥来解密；使用私钥加密后，只能使用公钥来解密。</p>
<h5 id="u4F18_u70B9-1"><a href="#u4F18_u70B9-1" class="headerlink" title="优点"></a>优点</h5><p>安全性高</p>
<h5 id="u7F3A_u70B9-1"><a href="#u7F3A_u70B9-1" class="headerlink" title="缺点"></a>缺点</h5><p>加密耗时</p>
<h5 id="u7C7B_u578B-1"><a href="#u7C7B_u578B-1" class="headerlink" title="类型"></a>类型</h5><p>RSA：三个发明者的首字母<br>RSA密钥长达2048位</p>
<h4 id="u6458_u8981_u7B97_u6CD5"><a href="#u6458_u8981_u7B97_u6CD5" class="headerlink" title="摘要算法"></a>摘要算法</h4><h5 id="u4F5C_u7528"><a href="#u4F5C_u7528" class="headerlink" title="作用"></a>作用</h5><p>使用一个散列算法，将任意长度的一块数据转换为一个定长的，不可逆的数字，其长度通常在128-256位之间。</p>
<h5 id="u7C7B_u578B-2"><a href="#u7C7B_u578B-2" class="headerlink" title="类型"></a>类型</h5><p>MD5</p>
<h4 id="u6570_u5B57_u7B7E_u540D"><a href="#u6570_u5B57_u7B7E_u540D" class="headerlink" title="数字签名"></a>数字签名</h4><p>1：使用摘要算法对要发送明文生成摘要，<br>2：使用非对称加密中的私钥对摘要进行加密。<br>3：将加密后的摘要附加到明文后面，然后对外发送<br>4：客户收到后，对明文使用相同的摘要算法得到摘要（客户端），使用公钥对加密的摘要进行解密得到摘要（服务器）。比较摘要（客户端）与摘要（服务器）是否相等，若相等则表示是服务器发送的（因为只有服务器才有私钥），不相等则表示内容被修改或不是服务器发送的。</p>
<h4 id="u6570_u5B57_u8BC1_u4E66"><a href="#u6570_u5B57_u8BC1_u4E66" class="headerlink" title="数字证书"></a>数字证书</h4><p>包含的内容：</p>
<h5 id="Issuer"><a href="#Issuer" class="headerlink" title="Issuer"></a>Issuer</h5><p>证书的发布机构。指出是什么机构发布这个证书。</p>
<h5 id="Valid_from_2C_Valid_to"><a href="#Valid_from_2C_Valid_to" class="headerlink" title="Valid from, Valid to"></a>Valid from, Valid to</h5><p>证书的有效期。</p>
<h5 id="Public_key"><a href="#Public_key" class="headerlink" title="Public key"></a>Public key</h5><p>公钥。</p>
<h5 id="Subject"><a href="#Subject" class="headerlink" title="Subject"></a>Subject</h5><p>主题。这个证书的所有者，一般指某个人或某个公司名称，公司网站的网址等。</p>
<h5 id="Signature_algorithm"><a href="#Signature_algorithm" class="headerlink" title="Signature algorithm"></a>Signature algorithm</h5><p>签名所使用的算法。即服务器给客户端发送证书时，要保证这个证书在发送过程中没被别人修改过，因此使用摘要算法，计算这个证书获得摘要，然后使用私钥对这个摘要进行加密得到加密后的摘要（服务器加密），并与证书放到一块。客户端得到后就使用这个签名算法得到摘要，然后使用公钥解密摘要（服务器加密）与客户端生成的摘要相比较看是不是相等。可参见数字签名一节。</p>
<h5 id="Thumbprint_2C_Thumbprint_algorithm"><a href="#Thumbprint_2C_Thumbprint_algorithm" class="headerlink" title="Thumbprint, Thumbprint algorithm"></a>Thumbprint, Thumbprint algorithm</h5><p>指纹以及指纹算法。保证这个证书不是伪造的。CA在发布证书时，证书的指纹（相当于摘要）和指纹算法（摘要算法），都会加密后再和证书放到一起发布。而证书的指纹是用CA的私钥进行加密生成的，即CA自己本身也是有一个证书，而这个证书在操作系统刚安装好时就已经被微软安装在操作系统中了，另外浏览器中也内嵌安装了一些CA的证书。所以，可以使用指纹算法去得到证书的摘要，使用CA的公钥解密指纹得到摘要，然后比较这两个摘要看是不是相等，即是CA的数字签名。</p>
<h4 id="CA"><a href="#CA" class="headerlink" title="CA"></a>CA</h4><p>CA是证书的签发机构，负责签发证书，认证证书等。CA自己本身也拥有私钥和一个证书（内含公钥），而且这个证书一般在操作系统或浏览器安装时就内嵌在系统中或浏览器中了。<br>这里有一个漏洞是，有一些CA公司为了私利给一些非法公司颁发证书。如CA已经给taobao颁发了一个证书，现在另一家非法公司让这家CA也给他颁发一个taobao证书。这样，这家公司就可以使用这个证书来冒充taobao了。</p>
<h3 id="SSL/TLS"><a href="#SSL/TLS" class="headerlink" title="SSL/TLS"></a>SSL/TLS</h3><h4 id="u540D_u8BCD_u89E3_u91CA"><a href="#u540D_u8BCD_u89E3_u91CA" class="headerlink" title="名词解释"></a>名词解释</h4><p>SSL(Secure Socket Layer)：安全套接字层<br>TLS(Transport Layer Security)：传输层安全协议</p>
<h4 id="u7248_u672C_u5386_u53F2"><a href="#u7248_u672C_u5386_u53F2" class="headerlink" title="版本历史"></a>版本历史</h4><p>首先，网景公司制定了SSL协议，一直到SSL3.0版本<br>然后，互联网标准化组织接替网景公司，发布了SSL的升级版TLS1.0<br>接着，TLS又升级了两次，分别为TSL1.1, TLS1.2</p>
<h4 id="u4F5C_u7528-1"><a href="#u4F5C_u7528-1" class="headerlink" title="作用"></a>作用</h4><p>1：机密性（会话密钥）<br>2：数据完整性（数字签名）<br>3：完成客户端与服务器的认证（数字证书）</p>
<h4 id="u534F_u8BAE_u7ED3_u6784"><a href="#u534F_u8BAE_u7ED3_u6784" class="headerlink" title="协议结构"></a>协议结构</h4><p>TLS握手协议：完成认证以及生成会话密钥<br>TLS记录协议：用会话密钥对数据加密传输</p>
<h4 id="u534F_u8BAE_u6D41_u7A0B"><a href="#u534F_u8BAE_u6D41_u7A0B" class="headerlink" title="协议流程"></a>协议流程</h4><h5 id="u5BA2_u6237_u7AEF_u2013_26gt_3B_u670D_u52A1_u5668"><a href="#u5BA2_u6237_u7AEF_u2013_26gt_3B_u670D_u52A1_u5668" class="headerlink" title="客户端–&gt;服务器"></a>客户端–&gt;服务器</h5><p>1：协议版本（如TLS1.0）<br>2：加密算法（如RSA)<br>3：支持的压缩方法<br>4：产生一个随机数</p>
<h5 id="u670D_u52A1_u5668_u2013_26gt_3B_u5BA2_u6237_u7AEF"><a href="#u670D_u52A1_u5668_u2013_26gt_3B_u5BA2_u6237_u7AEF" class="headerlink" title="服务器–&gt;客户端"></a>服务器–&gt;客户端</h5><p>1：确认使用协议版本（如TLS1.0）（如果客户端与服务器的版本不一致，则服务器关闭通信）<br>2：确认使用的加密算法（如RSA）<br>3：服务器数字证书<br>4：产生一个随机数<br>【注：如果服务器也要对客户端实行认证，则会在这一步告知客户端向服务器发送证书】</p>
<h5 id="u5BA2_u6237_u7AEF_u2013_26gt_3B_u670D_u52A1_u5668-1"><a href="#u5BA2_u6237_u7AEF_u2013_26gt_3B_u670D_u52A1_u5668-1" class="headerlink" title="客户端–&gt;服务器"></a>客户端–&gt;服务器</h5><p>1：产生一个随机数，使用服务器的公钥加密<br>2：编码改变通知，表示随后的信息都使用双方协定好的协议进行发送<br>3：客户端握手结束通知。表示客户端握手结束。这一项也是前面1，2发送内容的hash值，供服务器校验。<br>【注：如果服务器有对客户端实行认证，则客户端会在这一步向服务器发送自己的证书】</p>
<h5 id="u670D_u52A1_u5668_u2013_26gt_3B_u5BA2_u6237_u7AEF-1"><a href="#u670D_u52A1_u5668_u2013_26gt_3B_u5BA2_u6237_u7AEF-1" class="headerlink" title="服务器–&gt;客户端"></a>服务器–&gt;客户端</h5><p>1：编码改变通知，表示随后的信息都使用双方协定好的协议进行发送<br>2：服务器握手结束通知。表示服务器握手结束。这一项也是前面1发送内容的hash值，供客户端校验。<br>【注：如果服务器有对客户端实行认证，则在这一步服务器会对客户端发过来的证书进行验证，如果验证不通过则中断通信】</p>
<h3 id="HTTPS_u901A_u4FE1_u5B89_u5168_u4FDD_u8BC1"><a href="#HTTPS_u901A_u4FE1_u5B89_u5168_u4FDD_u8BC1" class="headerlink" title="HTTPS通信安全保证"></a>HTTPS通信安全保证</h3><p>在tomcat中使用SSH/TLS协议，并用8443端口来接收数据，传输的数据都给过了会话密钥的加密。<br><img src="http://i2.piimg.com/93eb5bffdcfcb5a1.jpg" alt=""></p>
<h3 id="HTTPS_u4F18_u7F3A_u70B9"><a href="#HTTPS_u4F18_u7F3A_u70B9" class="headerlink" title="HTTPS优缺点"></a>HTTPS优缺点</h3><h4 id="u4F18_u70B9-2"><a href="#u4F18_u70B9-2" class="headerlink" title="优点"></a>优点</h4><p>详见SSL/TLS中的”作用”小节</p>
<h4 id="u7F3A_u70B9-2"><a href="#u7F3A_u70B9-2" class="headerlink" title="缺点"></a>缺点</h4><p>1：费用<br>2：响应<br>3：消耗cpu<br>4：有些浏览器不能很好缓存https</p>
]]></content>
    <summary type="html">
    <![CDATA[<p><div align="center"><img src="/myImages/细细品酌HTTPS安全篇.jpg"></div><br>HTTP通信中存在很多隐患，比如：认证，授权，机密性，数据完整性等。如果没有使用安全措施，通信的信息就很容易被劫获并被修改等。由此，HTTPS（HTTP＋SSL/TLS）应孕而生。本文先使用HTTP协议通信，通过wireshark抓取通信内容来佐证通信的安全隐患；然后引入一些密码学基础概念；接着介绍SSL/TLS协议；最后通过HTTPS协议通信，使用wireshark抓取通信内容来佐证通信的安全性。<br>]]>
    
    </summary>
    
      <category term="web安全" scheme="http://jinpingwang.github.io/tags/web%E5%AE%89%E5%85%A8/"/>
    
      <category term="web" scheme="http://jinpingwang.github.io/categories/web/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[观察者模式]]></title>
    <link href="http://jinpingwang.github.io/2016/05/21/designPattern/%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F/"/>
    <id>http://jinpingwang.github.io/2016/05/21/designPattern/观察者模式/</id>
    <published>2016-05-21T07:38:54.000Z</published>
    <updated>2016-07-13T12:18:51.368Z</updated>
    <content type="html"><![CDATA[<h3 id="what"><a href="#what" class="headerlink" title="what"></a>what</h3><p>在对象之间定义一对多的依赖，这样一来，当一个对象改变状态，依赖它的对象都会收到通知，并自动更新。</p>
<h3 id="why"><a href="#why" class="headerlink" title="why"></a>why</h3><p>以松耦合方式在一系列对象之间沟通状态。让主题(Subject)与观察者(Observer)之间松耦合。主题和观察者定义了一对多的关系，观察者依赖于此主题，只要主题状态一有变化，观察者就会被通知。</p>
<h3 id="how"><a href="#how" class="headerlink" title="how"></a>how</h3><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">Subject</span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">regisiterObserver</span>(<span class="params">Observer o</span>)</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">removeObserver</span>(<span class="params">Observer o</span>)</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">notifyObservers</span>(<span class="params"></span>)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">Observer</span>&#123;</span><br><span class="line">    <span class="function">pblic <span class="keyword">void</span> <span class="title">update</span>(<span class="params"><span class="keyword">float</span> temp, <span class="keyword">float</span> humidity, <span class="keyword">float</span> presure</span>)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">DisplayElement</span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">display</span>(<span class="params"></span>)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WeatherData</span> <span class="keyword">implements</span> <span class="title">Subject</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> ArrayList&lt;Observer&gt; observers;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">float</span> temperature;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">float</span> humidity;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">float</span> pressure;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">WeatherData</span><span class="params">()</span></span>&#123;</span><br><span class="line">        observers = <span class="keyword">new</span> ArrayList&lt;Observer&gt;();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">regisiterObserver</span><span class="params">(Observer o)</span></span>&#123;</span><br><span class="line">        observers.add(o);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">removeObserver</span><span class="params">(Observer o)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> i = observers.indexOf(o);</span><br><span class="line">        <span class="keyword">if</span>(i &gt;=<span class="number">0</span> )&#123;</span><br><span class="line">            observers.remover(i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">notifyObservers</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;observers.size(); i++)&#123;</span><br><span class="line">            Observer observer = (Observer)observers.get(i);</span><br><span class="line">            <span class="comment">//推</span></span><br><span class="line">            observer.update(temperature, humidity, pressure);</span><br><span class="line">            <span class="comment">//拉，在Obeserve的update中通过getter方法从Subject中获取数据</span></span><br><span class="line">            <span class="comment">//observer.update();</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">measurementsChanged</span><span class="params">()</span></span>&#123;</span><br><span class="line">        notifyObservers();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMeasurements</span><span class="params">(<span class="keyword">float</span> temperature, <span class="keyword">float</span> humidity, <span class="keyword">float</span> pressure)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.temperature = temperature;</span><br><span class="line">        <span class="keyword">this</span>.humidity = humidity;</span><br><span class="line">        <span class="keyword">this</span>.pressure = pressure;</span><br><span class="line">        measurementsChanged();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CurrentConditionsDisplay</span> <span class="keyword">implements</span> <span class="title">Observer</span>, <span class="title">DisplayElement</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">float</span> temperature;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">float</span> humidity;</span><br><span class="line">    <span class="keyword">private</span> Subject weatherData;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CurrentConditionsDisplay</span><span class="params">(Subject weatherData)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.weatherData = weatherData;</span><br><span class="line">        weatherData.registerObserver(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">float</span> temperature, <span class="keyword">float</span> humidity, <span class="keyword">float</span> pressure)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.temperature = temperature;</span><br><span class="line">        <span class="keyword">this</span>.humidity = humidity;</span><br><span class="line">        display();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">display</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Current conditions: "</span> + temperature + <span class="string">"F degrees and "</span> + humidity + <span class="string">"% humidity"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> WeatherStation&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span>&#123;</span><br><span class="line">        WeatherData weatherData = <span class="keyword">new</span> WeatherData();</span><br><span class="line">        </span><br><span class="line">        CurrentConditionsDisplay currentDisplay = <span class="keyword">new</span> CurrentConditionsDisplay(weatherData);</span><br><span class="line">        </span><br><span class="line">        weatherData.setMeasurements(<span class="number">80</span>, <span class="number">65</span>, <span class="number">30.4f</span>);</span><br><span class="line">        weatherData.setMeasurements(<span class="number">82</span>, <span class="number">70</span>, <span class="number">29.2f</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="java_u4E2D_u5185_u7F6E_u7684_u89C2_u5BDF_u8005_u6A21_u5F0F"><a href="#java_u4E2D_u5185_u7F6E_u7684_u89C2_u5BDF_u8005_u6A21_u5F0F" class="headerlink" title="java中内置的观察者模式"></a>java中内置的观察者模式</h3><p>Observable相当于Subject，只不过Observable是一个类，里面实现了方法<br>缺陷：Observable是一个类，如果某个类想同时具有Observable类和另一个超类就会陷入两难。另外Observable将setChanged方法保护起来（protected），即除非继承自Observable，否则无法创建Observable实例并组合到自己的对象中（即违反多用组合，少用继承）。</p>
]]></content>
    <summary type="html">
    <![CDATA[<h3 id="what"><a href="#what" class="headerlink" title="what"></a>what</h3><p>在对象之间定义一对多的依赖，这样一来，当一个对象改变状态，依赖它的对象都会收到通知，并自动更新。</p>
<h3 id="w]]>
    </summary>
    
      <category term="设计模式" scheme="http://jinpingwang.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
      <category term="设计模式" scheme="http://jinpingwang.github.io/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[基于TCP协议的RPC]]></title>
    <link href="http://jinpingwang.github.io/2016/05/21/web/%E5%9F%BA%E4%BA%8ETCP%E5%8D%8F%E8%AE%AE%E7%9A%84RPC/"/>
    <id>http://jinpingwang.github.io/2016/05/21/web/基于TCP协议的RPC/</id>
    <published>2016-05-21T00:10:38.000Z</published>
    <updated>2016-05-24T01:27:23.620Z</updated>
    <content type="html"><![CDATA[<p>RPC（Remote Procedure Call Protocol），即远程过程调用协议，是一种通过网络从远程计算机程序上请求服务，而不需要了解底层网络技术协议。基于TCP协议的RPC能够更灵活地对协议字段进行定制，减少网络传输字节数，降低网络开销，提高性能，但需要关注底层复杂的细节，且所定义的协议自身局限性，难以得到平台厂商和开源社区的支持，较难实现跨平台调用。如不同平台的移动终端应用程序，像Android, HTML5, IOS等，需要重新开发不同的工具包来进行请求发送和响应解析，工作量大。另外基于TCP协议的RPC的实现，程序需要考虑多线程并发，锁，I/O等复杂的底层细节现实。<br><a id="more"></a></p>
<h3 id="u6E90_u7801"><a href="#u6E90_u7801" class="headerlink" title="源码"></a>源码</h3><h4 id="Server"><a href="#Server" class="headerlink" title="Server"></a>Server</h4><figure class="highlight nimrod"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.<span class="type">IOException</span>;</span><br><span class="line"><span class="keyword">import</span> java.io.<span class="type">ObjectInputStream</span>;</span><br><span class="line"><span class="keyword">import</span> java.io.<span class="type">ObjectOutputStream</span>;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.<span class="type">InvocationTargetException</span>;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.<span class="type">Method</span>;</span><br><span class="line"><span class="keyword">import</span> java.net.<span class="type">ServerSocket</span>;</span><br><span class="line"><span class="keyword">import</span> java.net.<span class="type">Socket</span>;</span><br><span class="line"><span class="keyword">import</span> java.util.<span class="type">HashMap</span>;</span><br><span class="line"></span><br><span class="line">public class <span class="type">Server</span> &#123;</span><br><span class="line">    public <span class="keyword">static</span> <span class="type">void</span> main(<span class="type">String</span>[] args) throws <span class="type">IOException</span>, <span class="type">ClassNotFoundException</span>, <span class="type">NoSuchMethodException</span>, <span class="type">SecurityException</span>, <span class="type">IllegalAccessException</span>, <span class="type">IllegalArgumentException</span>, <span class="type">InvocationTargetException</span>, <span class="type">InterruptedException</span> &#123;</span><br><span class="line">        // <span class="type">TODO</span> <span class="type">Auto</span>-generated <span class="keyword">method</span> stub</span><br><span class="line">    </span><br><span class="line">        //启用服务，监听<span class="number">52000</span></span><br><span class="line">        <span class="type">ServerSocket</span> server = new <span class="type">ServerSocket</span>(<span class="number">52000</span>);</span><br><span class="line">        //将接口与对应具体实现，使用map进行匹配</span><br><span class="line">        <span class="type">HashMap</span>&lt;<span class="type">String</span>, <span class="type">Object</span>&gt; services = new <span class="type">HashMap</span>&lt;<span class="type">String</span>, <span class="type">Object</span>&gt;();</span><br><span class="line">        <span class="type">SayHelloServiceImpl</span> shsi = new <span class="type">SayHelloServiceImpl</span>();</span><br><span class="line">        services.put(<span class="string">"SayHelloService"</span>, shsi);</span><br><span class="line">    </span><br><span class="line">        <span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">                //获取一个socket</span><br><span class="line">                <span class="type">Socket</span> socket = server.accept();</span><br><span class="line">    </span><br><span class="line">                //读取客户端需要服务器调用的接口名，调用方法，使用实际参数</span><br><span class="line">                <span class="type">ObjectInputStream</span> input = new <span class="type">ObjectInputStream</span>(socket.getInputStream());</span><br><span class="line">                <span class="type">String</span> interfacename = input.readUTF();</span><br><span class="line">                <span class="type">String</span> methodName = input.readUTF();</span><br><span class="line">                <span class="type">Class</span>&lt;?&gt;[] parameterTypes = (<span class="type">Class</span>&lt;?&gt;[])input.readObject();</span><br><span class="line">                <span class="type">Object</span> arguments[] = (<span class="type">Object</span>[])input.readObject();</span><br><span class="line">    </span><br><span class="line">                //得到<span class="type">Class</span>对象，从map中取得实现接口的对象，</span><br><span class="line">                //创建<span class="type">Method</span>，使用<span class="type">Method</span>的invoke方法调用对象中的函数</span><br><span class="line">                <span class="type">Class</span> serviceinterfaceclass = <span class="type">Class</span>.forName(interfacename);</span><br><span class="line">                <span class="type">Object</span> service = services.get(interfacename);</span><br><span class="line">                <span class="type">Method</span> <span class="keyword">method</span> = service.getClass().getMethod(methodName, parameterTypes);</span><br><span class="line">                <span class="type">Object</span> <span class="literal">result</span> = <span class="keyword">method</span>.invoke(service, arguments);</span><br><span class="line">    </span><br><span class="line">                //将结果返回给客户端</span><br><span class="line">                <span class="type">ObjectOutputStream</span> output = new <span class="type">ObjectOutputStream</span>(socket.getOutputStream());</span><br><span class="line">                output.writeObject(<span class="literal">result</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="Client"><a href="#Client" class="headerlink" title="Client"></a>Client</h4><figure class="highlight nimrod"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.<span class="type">IOException</span>;</span><br><span class="line"><span class="keyword">import</span> java.io.<span class="type">ObjectInputStream</span>;</span><br><span class="line"><span class="keyword">import</span> java.io.<span class="type">ObjectOutputStream</span>;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.<span class="type">Method</span>;</span><br><span class="line"><span class="keyword">import</span> java.net.<span class="type">Socket</span>;</span><br><span class="line"><span class="keyword">import</span> java.net.<span class="type">UnknownHostException</span>;</span><br><span class="line"></span><br><span class="line">public class <span class="type">Client</span> &#123;</span><br><span class="line"></span><br><span class="line">        public <span class="keyword">static</span> <span class="type">void</span> main(<span class="type">String</span>[] args) throws <span class="type">NoSuchMethodException</span>,</span><br><span class="line">                <span class="type">SecurityException</span>, <span class="type">UnknownHostException</span>, <span class="type">IOException</span>, <span class="type">ClassNotFoundException</span> &#123;</span><br><span class="line">                // <span class="type">TODO</span> <span class="type">Auto</span>-generated <span class="keyword">method</span> stub</span><br><span class="line"></span><br><span class="line">                //此次需要的服务器调用的接口名，调用方法，使用实际参数</span><br><span class="line">                <span class="type">String</span> interfaceName = <span class="type">SayHelloService</span>.class.getName();</span><br><span class="line">                <span class="type">Method</span> <span class="keyword">method</span> = <span class="type">SayHelloService</span>.class.getMethod(<span class="string">"sayHello"</span>, java.lang.<span class="type">String</span>.class);</span><br><span class="line">                <span class="type">Object</span> arguments[] = &#123;<span class="string">"hello"</span>&#125;;</span><br><span class="line"></span><br><span class="line">                //创建与服务器ip，端口相连接的<span class="type">Socket</span></span><br><span class="line">                <span class="type">Socket</span> socket = new <span class="type">Socket</span>(<span class="string">"192.168.91.201"</span>, <span class="number">52000</span>);</span><br><span class="line"></span><br><span class="line">                //将接口名，方法，方法类型参数，方法实际参数发送给服务器</span><br><span class="line">                <span class="type">ObjectOutputStream</span> output = new <span class="type">ObjectOutputStream</span>(socket.getOutputStream());</span><br><span class="line">                output.writeUTF(interfaceName);</span><br><span class="line">                output.writeUTF(<span class="keyword">method</span>.getName());</span><br><span class="line">                output.writeObject(<span class="keyword">method</span>.getParameterTypes());</span><br><span class="line">                output.writeObject(arguments);</span><br><span class="line"></span><br><span class="line">                //等待服务器发送回的数据</span><br><span class="line">                <span class="type">ObjectInputStream</span> input = new <span class="type">ObjectInputStream</span>(socket.getInputStream());</span><br><span class="line">                <span class="type">String</span> <span class="literal">result</span> = (<span class="type">String</span>)input.readObject();</span><br><span class="line">                <span class="type">System</span>.<span class="keyword">out</span>.println(<span class="literal">result</span>);</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="SayHelloService"><a href="#SayHelloService" class="headerlink" title="SayHelloService"></a>SayHelloService</h4><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="interface"><span class="keyword">interface</span> SayHelloService </span>&#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">String</span> sayHello(<span class="built_in">String</span> helloArg);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="SayHelloServiceImpl"><a href="#SayHelloServiceImpl" class="headerlink" title="SayHelloServiceImpl"></a>SayHelloServiceImpl</h4><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">SayHelloServiceImpl</span> &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">sayHello</span>(<span class="params">String helloArg</span>)</span>&#123;</span><br><span class="line">                <span class="keyword">if</span>(helloArg.equals(<span class="string">"hello"</span>))&#123;</span><br><span class="line">                        <span class="keyword">return</span> <span class="string">"hello client"</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span>&#123;</span><br><span class="line">                        <span class="keyword">return</span> <span class="string">"bye bye client"</span>;</span><br><span class="line">                &#125;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="u89E3_u6790"><a href="#u89E3_u6790" class="headerlink" title="解析"></a>解析</h3><h4 id="u6D41_u7A0B_u89E3_u6790"><a href="#u6D41_u7A0B_u89E3_u6790" class="headerlink" title="流程解析"></a>流程解析</h4><p>服务器地址：192.168.91.201<br>Server.java, SayHelloService.java, SayHelloServiceImpl.java存储在服务器同一目录内，通过javac将三个文件编译成class文件，然后使用以下命令运行。<br><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">java</span> Server</span><br></pre></td></tr></table></figure></p>
<p>客户端地址：192.168.91.202<br>Client.java, SayHelloService.java存储在客户端同一目录内，通过javac将三个文件编译成class文件，然后使用以下命令运行。<br><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">java</span> Client</span><br></pre></td></tr></table></figure></p>
<p>服务器监听52000端口，接收客户端的请求<br>客户端的端口自动创建，连接服务器192.168.91.201:52000<br>客户端向服务器请求服务，告诉服务器客户端要调用服务器上的哪个接口，接口中对应的方法，以及方法所需要的参数。<br>服务器接收到请求服务后，使用反射机制，通过Method的invoke完成方法的调用，并将调用的结果返回给客户端。</p>
<h4 id="u6CE8_u610F_u7684_u70B9"><a href="#u6CE8_u610F_u7684_u70B9" class="headerlink" title="注意的点"></a>注意的点</h4><p>1：客户端向服务器请求服务时，使用的是接口而不是具体类，这样可以实现松耦合，更具有健壮性。<br>2：服务器使用HashMap将接口与具体类进行匹配，这样从客户端得到的接口名，就可以获得相应具体类来完成服务。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>RPC（Remote Procedure Call Protocol），即远程过程调用协议，是一种通过网络从远程计算机程序上请求服务，而不需要了解底层网络技术协议。基于TCP协议的RPC能够更灵活地对协议字段进行定制，减少网络传输字节数，降低网络开销，提高性能，但需要关注底层复杂的细节，且所定义的协议自身局限性，难以得到平台厂商和开源社区的支持，较难实现跨平台调用。如不同平台的移动终端应用程序，像Android, HTML5, IOS等，需要重新开发不同的工具包来进行请求发送和响应解析，工作量大。另外基于TCP协议的RPC的实现，程序需要考虑多线程并发，锁，I/O等复杂的底层细节现实。<br>]]>
    
    </summary>
    
      <category term="web" scheme="http://jinpingwang.github.io/tags/web/"/>
    
      <category term="web" scheme="http://jinpingwang.github.io/categories/web/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[基于socket的C与java通信并实现json的反序列化]]></title>
    <link href="http://jinpingwang.github.io/2016/05/19/java/%E5%9F%BA%E4%BA%8Esocket%E7%9A%84C%E4%B8%8Ejava%E9%80%9A%E4%BF%A1%E5%B9%B6%E5%AE%8C%E6%88%90json%E7%9A%84%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    <id>http://jinpingwang.github.io/2016/05/19/java/基于socket的C与java通信并完成json的反序列化/</id>
    <published>2016-05-19T04:08:16.000Z</published>
    <updated>2016-05-28T11:34:10.100Z</updated>
    <content type="html"><![CDATA[<p>客户端与服务器的通信一般是基于HTTP通信方式或Socket通信方式。本文讲解了客户端如何通过java的socket与服务器c语言的socket进行通信，以及将服务器端通过CJson得到json序列化的结果返回给客户端，客户端利用Jackson进行反序列化得到对象。<br><a id="more"></a></p>
<h3 id="u6E90_u7801"><a href="#u6E90_u7801" class="headerlink" title="源码"></a>源码</h3><h4 id="u670D_u52A1_u5668"><a href="#u670D_u52A1_u5668" class="headerlink" title="服务器"></a>服务器</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">#<span class="keyword">include</span> <span class="string">&lt;sys/socket.h&gt;</span></span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> <span class="string">&lt;netinet/in.h&gt;</span></span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> <span class="string">&lt;arpa/inet.h&gt;</span></span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> <span class="string">&lt;signal.h&gt;</span></span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> <span class="string">&lt;assert.h&gt;</span></span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> <span class="string">&lt;errno.h&gt;</span></span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> <span class="string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> <span class="string">&lt;sys/stat.h&gt;</span></span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> <span class="string">&lt;sys/sendfile.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> BUFFER_SIZE <span class="number">1024</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">( <span class="keyword">int</span> argc, <span class="keyword">char</span>* argv[] )</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="comment">//创建服务，监听端口</span></span><br><span class="line">    <span class="keyword">if</span>( argc &lt;= <span class="number">2</span> )&#123;</span><br><span class="line">            <span class="built_in">printf</span>( <span class="string">"wrong"</span> );</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">char</span> * ip = argv[<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">int</span> port = atoi( argv[<span class="number">2</span>] );</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> sock = socket( PF_INET, SOCK_STREAM, <span class="number">0</span> );</span><br><span class="line">    assert( sock &gt;=<span class="number">0</span> );</span><br><span class="line"></span><br><span class="line">    <span class="keyword">struct</span> sockaddr_in address;</span><br><span class="line">    bzero( &amp;address, <span class="keyword">sizeof</span>(address) );</span><br><span class="line">    address.sin_family = AF_INET;</span><br><span class="line">    inet_pton( AF_INET, ip, &amp;address.sin_addr );</span><br><span class="line">    address.sin_port = htons( port );</span><br><span class="line">    <span class="keyword">int</span> ret = bind( sock, ( <span class="keyword">struct</span> sockaddr* )&amp;address, <span class="keyword">sizeof</span>( address ) );</span><br><span class="line">    assert( ret != -<span class="number">1</span> );</span><br><span class="line"></span><br><span class="line">    ret = listen( sock, <span class="number">5</span> );</span><br><span class="line">    assert( ret != -<span class="number">1</span> );</span><br><span class="line"></span><br><span class="line">    <span class="comment">//接收客户端连接请求</span></span><br><span class="line">    <span class="keyword">struct</span> sockaddr_in client;</span><br><span class="line">    <span class="keyword">socklen_t</span> client_addrlength = <span class="keyword">sizeof</span>( client );</span><br><span class="line">    <span class="keyword">int</span> connfd = accept( sock, ( <span class="keyword">struct</span> sockaddr* )&amp;client, &amp;client_addrlength );</span><br><span class="line">    <span class="keyword">if</span>( connfd &lt; <span class="number">0</span> )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>( <span class="string">"errno is: %d\n"</span>, errno );</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//向客户端发送数据</span></span><br><span class="line">        <span class="keyword">char</span> buf1[<span class="number">1</span>];</span><br><span class="line">        <span class="built_in">memset</span>( buf1, <span class="string">'\0'</span>, <span class="number">1</span> );</span><br><span class="line">        buf1[<span class="number">0</span>] = <span class="number">2</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">char</span> buf3[] = <span class="string">"&#123;\"id\":1,\"name\":\"kitty\",\"hobby\":[3,4]&#125;"</span>;</span><br><span class="line">        <span class="keyword">char</span> buf4[] = <span class="string">"&#123;\"id\":1,\"name\":\"coddycraft\",\"hobby\":[1,2]&#125;"</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">char</span> buf2[<span class="number">2</span>];</span><br><span class="line">        <span class="built_in">memset</span>( buf2, <span class="string">'\0'</span>, <span class="number">2</span> );</span><br><span class="line">        buf2[<span class="number">0</span>] = <span class="built_in">strlen</span>(buf3);</span><br><span class="line">        buf2[<span class="number">1</span>] = <span class="built_in">strlen</span>(buf4);</span><br><span class="line"></span><br><span class="line">        send( connfd, buf1, <span class="number">1</span>, <span class="number">0</span> );</span><br><span class="line">        send( connfd, buf2, <span class="number">2</span>, <span class="number">0</span> );</span><br><span class="line">        send( connfd, buf3, <span class="built_in">strlen</span>( buf3 ), <span class="number">0</span> );</span><br><span class="line">        send( connfd, buf4, <span class="built_in">strlen</span>( buf4 ), <span class="number">0</span> );</span><br><span class="line">        close( connfd );</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    close( sock );</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="u5BA2_u6237_u7AEF"><a href="#u5BA2_u6237_u7AEF" class="headerlink" title="客户端"></a>客户端</h4><h5 id="Maven"><a href="#Maven" class="headerlink" title="Maven"></a>Maven</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">   <span class="tag">&lt;<span class="title">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">groupId</span>&gt;</span>org.codehaus.jackson<span class="tag">&lt;/<span class="title">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">artifactId</span>&gt;</span>jackson-mapper-asl<span class="tag">&lt;/<span class="title">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">version</span>&gt;</span>1.9.13<span class="tag">&lt;/<span class="title">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h5 id="POJO"><a href="#POJO" class="headerlink" title="POJO"></a>POJO</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.uestc.rpc;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">int</span> id;</span><br><span class="line">	<span class="keyword">public</span> String name;</span><br><span class="line">	<span class="keyword">public</span> List&lt;Integer&gt; hobby;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">()</span></span>&#123;</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(<span class="keyword">int</span> id, String name, List&lt;Integer&gt; hobby)</span></span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.id = id;</span><br><span class="line">		<span class="keyword">this</span>.name = name;</span><br><span class="line">		<span class="keyword">this</span>.hobby = hobby;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="u4E3B_u7A0B_u5E8F"><a href="#u4E3B_u7A0B_u5E8F" class="headerlink" title="主程序"></a>主程序</h5><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.uestc.rpc;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.DataInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.net.Socket;</span><br><span class="line"><span class="keyword">import</span> java.net.UnknownHostException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.codehaus.jackson.annotate.JsonAutoDetect.Visibility;</span><br><span class="line"><span class="keyword">import</span> org.codehaus.jackson.annotate.JsonMethod;</span><br><span class="line"><span class="keyword">import</span> org.codehaus.jackson.<span class="built_in">map</span>.ObjectMapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> class Client2 &#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> main(<span class="keyword">String</span>[] args) <span class="keyword">throws</span> NoSuchMethodException, </span><br><span class="line">		SecurityException, UnknownHostException, IOException, ClassNotFoundException &#123;</span><br><span class="line">		<span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">		</span><br><span class="line">		<span class="comment">//创建与服务器ip，端口相连接的Socket</span></span><br><span class="line">		Socket socket = <span class="keyword">new</span> Socket(<span class="string">"192.168.91.201"</span>, <span class="number">52000</span>);</span><br><span class="line">		</span><br><span class="line">		<span class="comment">//等待服务器发送回的数据</span></span><br><span class="line">		<span class="built_in">byte</span> data[] = <span class="keyword">new</span> <span class="built_in">byte</span>[<span class="number">1024</span>];</span><br><span class="line">		DataInputStream input = <span class="keyword">new</span> DataInputStream(socket.getInputStream());</span><br><span class="line">		input.read(data);</span><br><span class="line">		</span><br><span class="line">		<span class="built_in">int</span> count = data[<span class="number">0</span>];</span><br><span class="line">		<span class="built_in">int</span> start = count+<span class="number">1</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="built_in">int</span> <span class="built_in">loop</span>=<span class="number">1</span>; <span class="built_in">loop</span>&lt;=count; <span class="built_in">loop</span>++)&#123;</span><br><span class="line">			<span class="built_in">int</span> length = data[<span class="built_in">loop</span>];</span><br><span class="line">			</span><br><span class="line">			<span class="keyword">String</span> personJson = <span class="keyword">new</span> <span class="keyword">String</span>(data, start, length);</span><br><span class="line">			start += length;</span><br><span class="line">			System.out.<span class="built_in">println</span>(personJson);</span><br><span class="line">			</span><br><span class="line">			ObjectMapper mapper = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line">			mapper.setVisibility(JsonMethod.FIELD, Visibility.ANY);</span><br><span class="line">			Person personResult = (Person)mapper.readValue(personJson, Person.class);</span><br><span class="line">			System.out.<span class="built_in">println</span>(personResult.id+<span class="string">"\t"</span>+personResult.name+<span class="string">"\t"</span>+personResult.hobby);		</span><br><span class="line">		&#125;</span><br><span class="line">		input.close();</span><br><span class="line">		socket.close();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="u89E3_u6790"><a href="#u89E3_u6790" class="headerlink" title="解析"></a>解析</h3><p>需要注意以下几点：<br>1：因为服务器使用的是基于C语言的Socket，而客户端是基于java的Socket，所以双方的通信一概使用字节的形式通信，即java中使用DataInputStream，而不要使用ObjectInputStream等类。<br>2：因为使用字节流来传输，如果出现服务器发送给客户端的json反序列化有多个时，就没办法进行挨个处理。所以通过加入自己的一些标识字节。即，第一字节用来说明有几个json序列化，如果有两个，则第一字节后面紧跟的两个字节分别存放对应json序列化的字节数。这样客户端取到服务器传过来的全部字节时，通过获得第一字节，得知总共有几个待反序列化的json字符串。然后从字节中取出相应位置的字节集进行反序列化操作。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>客户端与服务器的通信一般是基于HTTP通信方式或Socket通信方式。本文讲解了客户端如何通过java的socket与服务器c语言的socket进行通信，以及将服务器端通过CJson得到json序列化的结果返回给客户端，客户端利用Jackson进行反序列化得到对象。<br>]]>
    
    </summary>
    
      <category term="web" scheme="http://jinpingwang.github.io/tags/web/"/>
    
      <category term="web" scheme="http://jinpingwang.github.io/categories/web/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[java中的多线程编程]]></title>
    <link href="http://jinpingwang.github.io/2016/05/16/java/java%E4%B8%AD%E7%9A%84%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%BC%96%E7%A8%8B/"/>
    <id>http://jinpingwang.github.io/2016/05/16/java/java中的多线程编程/</id>
    <published>2016-05-16T01:21:36.000Z</published>
    <updated>2016-06-13T12:33:34.566Z</updated>
    <content type="html"><![CDATA[<p>本篇文章介绍了java中多线程的概念。先简介多线程中的一些基本概念。然后介绍在java中如何编写多线程。从基本的实现Runnable接口，Callable接口，线程各个状态方法调用。然后介绍多线程编程中如何保证同步，引入了锁的概念，从锁接口(Lock)及其方法（lock，unLock，newCondition），条件接口(Condition)及其方法（await，singal，singalAll），锁类(ReentrantLock)，对象或类的内部锁(synchronized块)及内部条件(wait，notify，notifyAll三个方法)。还介绍了线程安全的一些集合，以及常用的线程池。最后介绍了有关Fork-Join框架。<br><a id="more"></a></p>
<h3 id="u5E76_u53D1__u4E92_u65A5__u540C_u6B65__u5F02_u6B65__u5E76_u884C__u591A_u7EBF_u7A0B_u57FA_u672C_u6982_u5FF5"><a href="#u5E76_u53D1__u4E92_u65A5__u540C_u6B65__u5F02_u6B65__u5E76_u884C__u591A_u7EBF_u7A0B_u57FA_u672C_u6982_u5FF5" class="headerlink" title="并发 互斥 同步 异步 并行 多线程基本概念"></a>并发 互斥 同步 异步 并行 多线程基本概念</h3><p>并发：在一段时间内，系统有多个程序处于已启动运行到运行完闭之间。在这其中需要考虑两个问题：互斥和同步。<br>互斥：如多个程序需要互斥的使用cpu<br>同步：程序B需要等待程序A的计算结果，作为程序B的输入。如果程序A的计算结果没计算出来，则程序B需要进行等待。<br>异步：程序B不需要等待程序A的计算结果，而是先做自己的事，等程序A计算结果出来了后，再去处理<br>并行：两个或多个cpu（或多核cpu）上同一时刻运行多个程序<br>多线程：实现多个线程并发执行</p>
<p>异步和多线程并不是一个同等关系，异步是最终目的，多线程只是我们实现异步的一种手段。</p>
<p>线程安全：多个线程访问同一段代码，不会产生不确定的结果。</p>
<h3 id="u521B_u5EFA_u7EBF_u7A0B"><a href="#u521B_u5EFA_u7EBF_u7A0B" class="headerlink" title="创建线程"></a>创建线程</h3><h4 id="u5B9E_u73B0Runnable_u63A5_u53E3"><a href="#u5B9E_u73B0Runnable_u63A5_u53E3" class="headerlink" title="实现Runnable接口"></a>实现Runnable接口</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Hello Thread"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span>&#123;</span><br><span class="line">        <span class="comment">//创建线程</span></span><br><span class="line">        Test test = <span class="keyword">new</span> Test();</span><br><span class="line">        Thread thread = <span class="keyword">new</span> Thread(test);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="u5B9E_u73B0Callable_u63A5_u53E3"><a href="#u5B9E_u73B0Callable_u63A5_u53E3" class="headerlink" title="实现Callable接口"></a>实现Callable接口</h4><p>因为Thread类的构造函数只接收实现Runnable接口的类对象，所以应将实现Callable接口的类转化为FutureTask类（可以将Callable转换成Future和Runnable）。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Callable是一个泛型接口，其中T就是返回类型</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span> <span class="keyword">implements</span> <span class="title">Callable</span>&lt;<span class="title">Integer</span>&gt;</span>&#123;</span><br><span class="line">    <span class="comment">//与Runnable接口不同，这里使用的是call名</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> Integer <span class="title">call</span><span class="params">()</span></span>&#123;</span><br><span class="line">	    System.out.println(<span class="string">"Hello Thread"</span>);</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">new</span> Integer(<span class="number">21</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span>&#123;</span><br><span class="line">        <span class="comment">//创建线程，这里使用FutureTask包装器，它可将Callable转换成Future与Runnable</span></span><br><span class="line">        Test test = <span class="keyword">new</span> Test();</span><br><span class="line">        FutureTask&lt;Integer&gt; futureTask = <span class="keyword">new</span> FutureTask&lt;Integer&gt;(test);</span><br><span class="line">        Thread thread = <span class="keyword">new</span> Thread(futureTask);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="u542F_u52A8_u8FDB_u7A0B"><a href="#u542F_u52A8_u8FDB_u7A0B" class="headerlink" title="启动进程"></a>启动进程</h3><h4 id="u5B9E_u73B0Runnable_u63A5_u53E3-1"><a href="#u5B9E_u73B0Runnable_u63A5_u53E3-1" class="headerlink" title="实现Runnable接口"></a>实现Runnable接口</h4><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Main</span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span>(<span class="params">String args[]</span>)</span>&#123;</span><br><span class="line">        <span class="comment">//创建线程</span></span><br><span class="line">        <span class="comment">//......</span></span><br><span class="line">        <span class="comment">//启动线程</span></span><br><span class="line">        thread.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="u5B9E_u73B0Callable_u63A5_u53E3-1"><a href="#u5B9E_u73B0Callable_u63A5_u53E3-1" class="headerlink" title="实现Callable接口"></a>实现Callable接口</h4><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Main</span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span>(<span class="params">String args[]</span>)</span>&#123;</span><br><span class="line">        <span class="comment">//创建线程</span></span><br><span class="line">        <span class="comment">//......</span></span><br><span class="line">        <span class="comment">//启动线程</span></span><br><span class="line">        thread.start();</span><br><span class="line">        <span class="comment">//线程返回值</span></span><br><span class="line">        Integer result = futureTask.<span class="keyword">get</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="u8FD0_u884C_u7EBF_u7A0B"><a href="#u8FD0_u884C_u7EBF_u7A0B" class="headerlink" title="运行线程"></a>运行线程</h3><p>start(),run()都是Thread中的方法。<br>其中start()方法是用来启动线程的，真正实现多线程的运行。调用start()方法后，这个线程就处于就绪状态，得到cpu后，会自动运行run()方法中的语句。调用完start()方法后，主程序可以不用等待这个线程中的run()执行完成，而直接继续执行后面的代码。<br>其中run()方法是普通方法的调用，如果直接调用run方法，则主程序需要等待run()方法执行完成后，才能继续执行后续的语句。</p>
<h3 id="u4E2D_u65AD_u7EBF_u7A0B"><a href="#u4E2D_u65AD_u7EBF_u7A0B" class="headerlink" title="中断线程"></a>中断线程</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> begin = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> stop = <span class="number">5</span>;</span><br><span class="line">        <span class="comment">//判断线程是否被中断</span></span><br><span class="line">        <span class="keyword">while</span>(Thread.currentThread().isInterrupt() == <span class="keyword">false</span>)&#123;</span><br><span class="line">            begin++;</span><br><span class="line">            <span class="keyword">if</span>(begin &gt; stop)&#123;</span><br><span class="line">                <span class="comment">//中断线程</span></span><br><span class="line">                Thread.currentThread().interrupt();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="u4E2D_u65AD_u5BFC_u81F4_u7684_u7EBF_u7A0B_u7761_u7720_u5F02_u5E38"><a href="#u4E2D_u65AD_u5BFC_u81F4_u7684_u7EBF_u7A0B_u7761_u7720_u5F02_u5E38" class="headerlink" title="中断导致的线程睡眠异常"></a>中断导致的线程睡眠异常</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> Test implements Runnable&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> begin = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> stop = <span class="number">5</span>;</span><br><span class="line">        <span class="comment">//判断线程是否被中断</span></span><br><span class="line">        <span class="keyword">while</span>(Thread.currentThread().isInterrupt() == <span class="literal">false</span>)&#123;</span><br><span class="line">            begin++;</span><br><span class="line">            <span class="keyword">if</span>(begin &gt; stop)&#123;</span><br><span class="line">                <span class="comment">//中断线程</span></span><br><span class="line">                Thread.currentThread().interrupt();</span><br><span class="line">                <span class="keyword">try</span>&#123;</span><br><span class="line">                    <span class="comment">/**由于前面已中断置位，所以此处调用睡眠会导致</span><br><span class="line">                     * java.lang.InterruptedException异常</span><br><span class="line">                     * 且原先的中断置位会被清除</span><br><span class="line">                     * 因此需要重新中断置位</span><br><span class="line">                     */</span></span><br><span class="line">                    Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">                &#125;<span class="keyword">catch</span>(Throwable e)&#123;</span><br><span class="line">                    System.out.println();</span><br><span class="line">                    Thread.currentThread().interrupt();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="u505C_u6B62_u6216_u6302_u8D77_u7EBF_u7A0B"><a href="#u505C_u6B62_u6216_u6302_u8D77_u7EBF_u7A0B" class="headerlink" title="停止或挂起线程"></a>停止或挂起线程</h3><p>1：一般不建议停止（stop方法）线程。<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">test052.lock.<span class="operator"><span class="keyword">lock</span>();</span></span><br><span class="line">//执行了<span class="operator"><span class="keyword">stop</span>后，后面<span class="keyword">unlock</span>这一句就不会执行了</span><br><span class="line"><span class="keyword">Thread</span>.currentThread().<span class="keyword">stop</span>();</span></span><br><span class="line">est052.lock.<span class="operator"><span class="keyword">unlock</span>();</span></span><br></pre></td></tr></table></figure></p>
<p>因为这样线程所持有的锁不会放，这样就会导致其它线程得不到锁。所以一般使用interrupt方法进行中断，然后使用interruptd方法获得线程是否中断，如果中断，则进行相应的处理：如退出线程执行并释放相应的持有锁。</p>
<p>2：一般也不建议挂起（suspend方法）线程，因为这样线程所持有的锁不会放，这样就会导致其它线程得不到锁。除非你调用resume方法来激活被挂起的线程。</p>
<h3 id="u7EBF_u7A0B_u72B6_u6001"><a href="#u7EBF_u7A0B_u72B6_u6001" class="headerlink" title="线程状态"></a>线程状态</h3><p>新创建 ： NEW<br>可运行 ： RUNNABLE<br>被阻塞 ： BLOCKED（如获取内部锁时而进入阻塞队列。当锁可用时，该线程可以获得锁，解除阻塞）<br>等待   ： WAITING（如等待另一个线程通知调度器一个条件时，如Thread.join。当锁可用时，不能马上解除阻塞，而是要直到另一个线程调用同一条件上的signalAll方法时为止）<br>被终止 ： TERMINATED<br><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Test05</span> &#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span>(<span class="params">String args[]</span>) throws InterruptedException</span>&#123;</span><br><span class="line">		Test051 t051 = <span class="keyword">new</span> Test051();</span><br><span class="line">		Thread t = <span class="keyword">new</span> Thread(t051);</span><br><span class="line">		System.<span class="keyword">out</span>.println(<span class="string">"1\t"</span>+t.getState());</span><br><span class="line">		t.start();</span><br><span class="line">		System.<span class="keyword">out</span>.println(<span class="string">"2\t"</span>+t.getState());</span><br><span class="line">		Thread.sleep(<span class="number">300</span>);</span><br><span class="line">		System.<span class="keyword">out</span>.println(<span class="string">"3\t"</span>+t.getState());</span><br><span class="line">		Thread.sleep(<span class="number">2000</span>);</span><br><span class="line">		System.<span class="keyword">out</span>.println(<span class="string">"4\t"</span>+t.getState());</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title">Test051</span> <span class="title">implements</span> <span class="title">Runnable</span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">		&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">			<span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>输出结果为：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>	NEW</span><br><span class="line"><span class="number">2</span>	RUNNABLE</span><br><span class="line"><span class="number">3</span>	TIMED_WAITING</span><br><span class="line"><span class="number">4</span>	TERMINATED</span><br></pre></td></tr></table></figure></p>
<h3 id="u540C_u6B65_u4FDD_u8BC1"><a href="#u540C_u6B65_u4FDD_u8BC1" class="headerlink" title="同步保证"></a>同步保证</h3><h4 id="u9501_u5BF9_u8C61_u4E0E_u6761_u4EF6_u5BF9_u8C61"><a href="#u9501_u5BF9_u8C61_u4E0E_u6761_u4EF6_u5BF9_u8C61" class="headerlink" title="锁对象与条件对象"></a>锁对象与条件对象</h4><h5 id="Lock"><a href="#Lock" class="headerlink" title="Lock"></a>Lock</h5><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">TransferRunnalbe</span> <span class="title">implements</span> <span class="title">Runnable</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Bank bank;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//通过构造函数将Bank对象传入，以便run方法中使用</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TransferRunnable</span>(<span class="params">Bank b</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.bank = bank;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//执行Bank中的transfer方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="comment">//......</span></span><br><span class="line">        bank.transfer(fromAccount, toAccount, amount);</span><br><span class="line">        <span class="comment">//......</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Bank</span>&#123;</span><br><span class="line">    <span class="comment">//锁对象是一个接口，可以通过ReentrantLock类来创建</span></span><br><span class="line">    <span class="keyword">private</span> Lock bankLock = <span class="keyword">new</span> ReentrantLock();</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">transfer</span>(<span class="params"><span class="keyword">int</span> <span class="keyword">from</span>, <span class="keyword">int</span> to, <span class="keyword">int</span> amout</span>)</span>&#123;</span><br><span class="line">        bankLock.<span class="keyword">lock</span>();</span><br><span class="line">        <span class="comment">/**</span><br><span class="line">         * 这里不能使用带资源（锁）的try</span><br><span class="line">         * 1：资源（锁）的关闭方法不是close</span><br><span class="line">         * 2：资源都是声明一个新变量，但锁是多个线程共享的变量</span><br><span class="line">         */</span></span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="comment">//critical section</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">finally</span>&#123;</span><br><span class="line">            bankLock.unLock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="Condition"><a href="#Condition" class="headerlink" title="Condition"></a>Condition</h5><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">Bank</span>&#123;</span><br><span class="line">    <span class="comment">//......</span></span><br><span class="line">    <span class="keyword">private</span> Lock bankLock = <span class="keyword">new</span> ReentrantLock();</span><br><span class="line">    <span class="comment">//Condition是一个接口</span></span><br><span class="line">    <span class="keyword">private</span> Condition sufficientFunds;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Bank</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//......</span></span><br><span class="line">        <span class="comment">//条件对象通过调用锁对象的方法获得</span></span><br><span class="line">        sufficientFunds = bankLock.newCondition();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">transfer</span>(<span class="params"><span class="keyword">int</span> <span class="keyword">from</span>, <span class="keyword">int</span> to, <span class="keyword">int</span> amount</span>)</span>&#123;</span><br><span class="line">        bankLock.<span class="keyword">lock</span>();</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="comment">/**</span><br><span class="line">             * 如果账户余额不够，则没法办进行转账，</span><br><span class="line">             * 需要等待别人将钱转进来，可是这个线程已经获取了锁，</span><br><span class="line">             * 所以其它线程就没办法获得锁来完成转账。</span><br><span class="line">             * 因此，要使用条件对象，调用await方法，</span><br><span class="line">             * 如果条件不满足，则释放当前锁，进入等待队列。</span><br><span class="line">             * 当另一个线程完成转账后，调用signal，随机通知在等待队列上一个，</span><br><span class="line">             * 或调用signalAll，通知等待队列上的所有</span><br><span class="line">             * 这样等待队列上得到通知的线程就会查看自己条件是否会满足，</span><br><span class="line">             * 如果满足，则等待锁；如果不满足，则继续加入等待队列。</span><br><span class="line">             */</span></span><br><span class="line">            <span class="keyword">while</span>(accounts[<span class="keyword">from</span>] &lt; amount)&#123;</span><br><span class="line">                <span class="comment">/**</span><br><span class="line">                 * 条件对象管理那些已经进入被保护的代码段</span><br><span class="line">                 * 但还不能运行的线程</span><br><span class="line">                 */</span></span><br><span class="line">                sufficientFunds.await();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//......</span></span><br><span class="line">            sufficientFunds.signalAll();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">finally</span>&#123;</span><br><span class="line">            bankLock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="u5BF9_u8C61_u7684_u5185_u90E8_u9501_u4E0E_u5185_u90E8_u6761_u4EF6_u5BF9_u8C61"><a href="#u5BF9_u8C61_u7684_u5185_u90E8_u9501_u4E0E_u5185_u90E8_u6761_u4EF6_u5BF9_u8C61" class="headerlink" title="对象的内部锁与内部条件对象"></a>对象的内部锁与内部条件对象</h4><h5 id="u5185_u90E8_u9501"><a href="#u5185_u90E8_u9501" class="headerlink" title="内部锁"></a>内部锁</h5><p>java中的每一个对象自己都有一个内部锁和一个内部对象。<br>一个方法使用synchronized关键字声明，则表示任何进入这个方法的线程都要先获得内部锁。<br>内部锁不能像锁对象一样设置超时：Lock.tryLock(10, TimeUnit.SECONDS)<br>一个方法中的临界资源可以使用synchronized块（同步代码块）</p>
<h5 id="u5185_u90E8_u6761_u4EF6_u5BF9_u8C61"><a href="#u5185_u90E8_u6761_u4EF6_u5BF9_u8C61" class="headerlink" title="内部条件对象"></a>内部条件对象</h5><p>内部条件对象的使用：wait(), notify(), notifyAll()。相当于条件对象的wait(), signal(), signalAll()方法。 </p>
<h5 id="u5C40_u9650_u6027"><a href="#u5C40_u9650_u6027" class="headerlink" title="局限性"></a>局限性</h5><p>1：不能中断一个正在试图获得锁的线程<br>2：试图获得锁时不能设定超时<br>3：每个锁仅有单一的条件</p>
<h4 id="u8BFB_u5199_u9501"><a href="#u8BFB_u5199_u9501" class="headerlink" title="读写锁"></a>读写锁</h4><p>1：构造一个ReentrantReadWriteLock对象<br>private ReentrantReadWriteLock rrwl = new ReentrantReadWriteLock();<br>2：抽取读锁与写锁<br>private Lock readLock = rrwl.readLock();<br>private Lock writeLock = rrwl.writeLock();<br>3：在使用读取的地方使用读锁，在写的地方使用写锁。使用方法同锁对象。</p>
<h4 id="u7EBF_u7A0B_u5B89_u5168_u96C6_u5408"><a href="#u7EBF_u7A0B_u5B89_u5168_u96C6_u5408" class="headerlink" title="线程安全集合"></a>线程安全集合</h4><p>这些线程安全集合都是并发安全的，返回的都是弱一致性的迭代器，不一定能反映出它们被构造之后的所有修改，也不会抛出ConcurrentModificationException。</p>
<h5 id="u963B_u585E_u961F_u5217"><a href="#u963B_u585E_u961F_u5217" class="headerlink" title="阻塞队列"></a>阻塞队列</h5><p>1：类与接口<br>BlockingQueue：接口<br>ArrayBlockingQueue：类。容量有上限，超过这个容量进行添加进则会阻塞<br>LinkedBlockingQueue：类。容量没有上限，但也可以指定容量<br>2：方法<br>| 方法        | 正常动作   |  特殊情况下的动作  |<br>| :——:   | :—-:  | :—-:  |<br>| put     | 添加一个元素  | 如果队列满，则阻塞  |<br>| take        |   移出并返回头元素   |   如果队列空，则阻塞   |<br>| add     | 添加一个元素 |   如果队列满，则抛出IllegalStateException异常  |<br>| remove        |   删除一个元素   |   如果队列空，则抛出NoSuchElementException   |<br>3：实例<br>步骤1：将银行中进行转账的指令插入阻塞队列<br>步骤2：专门由一个线程从阻塞队列中取出转账指令进行转账<br>步骤2.1：如果条件符合，则直接执行转账指令，因为只有一个线程对Bank进行操作，所以不会存在同步竞争问题。<br>步骤2.2：如果发现条件不符合（比如余额不足等）则插回阻塞队列的队尾（此时会存在同其它执行转账指令的线程竞争阻塞队列），然后执行步骤2。</p>
<h5 id="ConcurrentHashMap"><a href="#ConcurrentHashMap" class="headerlink" title="ConcurrentHashMap"></a>ConcurrentHashMap</h5><h5 id="ConcurrentLinkedQueue"><a href="#ConcurrentLinkedQueue" class="headerlink" title="ConcurrentLinkedQueue"></a>ConcurrentLinkedQueue</h5><h3 id="u7EBF_u7A0B_u6C60"><a href="#u7EBF_u7A0B_u6C60" class="headerlink" title="线程池"></a>线程池</h3><h4 id="u5B9A_u4E49"><a href="#u5B9A_u4E49" class="headerlink" title="定义"></a>定义</h4><p>一个线程池中包含许多准备运行的空闲线程。可以将一个Runnabl对象交给线程池，就会有一个线程调用run方法。当run方法退出时，线程不会死亡，而是在池中准备为下一个请求提供服务。</p>
<h4 id="u5F15_u5165_u539F_u56E0"><a href="#u5F15_u5165_u539F_u56E0" class="headerlink" title="引入原因"></a>引入原因</h4><p>1：构建一个新的线程是有一定的代价的，因为涉及与操作系统的交互。<br>2：减少并发线程的数目。</p>
<h4 id="u7EBF_u7A0B_u6C60_u83B7_u53D6"><a href="#u7EBF_u7A0B_u6C60_u83B7_u53D6" class="headerlink" title="线程池获取"></a>线程池获取</h4><p>1：执行器类提供了许多静态工厂方法用来构建线程池。<br>2：可以将获得的线程池赋值给ExecutorService接口</p>
<h4 id="u7EBF_u7A0B_u6C60_u6267_u884C"><a href="#u7EBF_u7A0B_u6C60_u6267_u884C" class="headerlink" title="线程池执行"></a>线程池执行</h4><p>将一个实现了Runnable接口的对象或实现了Callable接口的对象提交作为ExecutorService的submit方法的参数，然后这个线程池就会在方便的时候尽早执行提交的任务。<br>如果有一个Callable集合需要处理，则将可以使用ExecutorService的invokeAll方法提交运行，此时如果想将结果按可获得的顺序保存起来，要以使用下面的方法：<br><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">ExecutorService executorService = Executors.newCachedThreadPool();</span><br><span class="line">ExecutorCompletionService service = <span class="keyword">new</span> ExecutorCompletionService(executorService);</span><br><span class="line">service.submit(第一个Callable);</span><br><span class="line">service.submit(第二个Callable);</span><br><span class="line">service.submit(第三个Callable);</span><br><span class="line"><span class="comment">//按最先执行完的顺序排列</span></span><br><span class="line"><span class="keyword">for</span>(<span class="built_in">int</span> <span class="built_in">loop</span>=<span class="number">0</span>; <span class="built_in">loop</span>&lt;<span class="number">3</span>; <span class="built_in">loop</span>++)&#123;</span><br><span class="line">	System.out.<span class="built_in">println</span>(service.take().<span class="built_in">get</span>());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h4 id="u7EBF_u7A0B_u6C60_u5173_u95ED"><a href="#u7EBF_u7A0B_u6C60_u5173_u95ED" class="headerlink" title="线程池关闭"></a>线程池关闭</h4><p>shutdown()：启动该线程池的关闭，被关闭的执行器不再接受新的任务。当所有任务都完成以后，线程中的线程死亡。<br>shutdownNow()：取消尚未开始的任务（有一些任务提交到线程池，但还是处理准备就绪状态）并试图中断正在运行的线程。</p>
<h4 id="u7EBF_u7A0B_u6C60_u7684_u7C7B_u578B"><a href="#u7EBF_u7A0B_u6C60_u7684_u7C7B_u578B" class="headerlink" title="线程池的类型"></a>线程池的类型</h4><p>以下这三个静态方法获得三种线程池实质上都是通过ThreadPoolExecutor（实现了ExecutorService接口）来创建的。</p>
<h5 id="newCachedThreadPool_28_29"><a href="#newCachedThreadPool_28_29" class="headerlink" title="newCachedThreadPool()"></a>newCachedThreadPool()</h5><p>必要时创建新线程，空闲线程会被保留60秒。通过java.util.concurrent包下的SynchronousQueue<runnable>类来存放提交的Runnable对象。如果不想使用60秒，则需要使用ThreadPoolExecutor类创建一个线程池对象，然后赋值给ExecutorService。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//将这里的60L改为120就表示120L秒，如果设置为0L则表示不会消亡。</span></span><br><span class="line"><span class="keyword">new</span> ThreadPoolExecutor(<span class="number">0</span>, Integer.MAX_VALUE, <span class="number">60L</span>, TimeUnit.SECONDS,</span><br><span class="line"><span class="keyword">new</span> SynchronousQueue&lt;Runnable&gt;());</span><br></pre></td></tr></table></figure></runnable></p>
<h5 id="newFixedThreadPool_28_29"><a href="#newFixedThreadPool_28_29" class="headerlink" title="newFixedThreadPool()"></a>newFixedThreadPool()</h5><p>创建固定数目的线程池，当线程执行完后不会消毁该线程。当提交的任务数超过线程池中线程的固定数目时，就会将其放到阻塞队列中。通过java.util.concurrent包下的LinkedBlockingQueue<runnable>类来存放提交的Runnable对象。</runnable></p>
<h5 id="newSingleThreadExecutor_28_29"><a href="#newSingleThreadExecutor_28_29" class="headerlink" title="newSingleThreadExecutor()"></a>newSingleThreadExecutor()</h5><p>通过java.util.concurrent包下的LinkedBlockingQueue<runnable>类来存放提交的Runnable对象。这里有一点需要注意的是，比如在递归的使用这个线程池时，可能会产生死锁，因为当前调用的线程，递归调用，则当前线程没有使用完，递归时调用这个线程就没办法调用，从而产生死锁。</runnable></p>
<h5 id="newScheduledThreadPool_28_29"><a href="#newScheduledThreadPool_28_29" class="headerlink" title="newScheduledThreadPool()"></a>newScheduledThreadPool()</h5><p>用于预定执行（延迟执行，周期执行，两次固定间隔时间执行）而构建的固定线程池。通过DelayedWorkQueue来存放提交的Runnable对象。<br><img src="http://i3.buimg.com/0af3efde1a4f3574.jpg" alt=""></p>
<h3 id="Fork-Join_u6846_u67B6"><a href="#Fork-Join_u6846_u67B6" class="headerlink" title="Fork-Join框架"></a>Fork-Join框架</h3><p>Fork-Join框架的作用就是将一个任务分成多个子任务（递归的划分），然后将它们的结果join起来。<br><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(problemSize &lt; threshold)</span><br><span class="line">    solve problem directly</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">    break problem <span class="keyword">into</span> supproblems</span><br><span class="line">    recursively solve <span class="keyword">each</span> subproblem</span><br><span class="line">    <span class="built_in">combine</span> <span class="operator">the</span> results</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> class Test19 &#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> main(<span class="keyword">String</span>[] args) <span class="keyword">throws</span> InterruptedException, ExecutionException &#123;</span><br><span class="line">		<span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">		<span class="built_in">float</span> values[] = <span class="keyword">new</span> <span class="built_in">float</span>[<span class="number">10000000</span>];</span><br><span class="line">		<span class="keyword">for</span>(<span class="built_in">int</span> <span class="built_in">loop</span>=<span class="number">0</span>; <span class="built_in">loop</span>&lt;values.length; <span class="built_in">loop</span>++)&#123;</span><br><span class="line">			values[<span class="built_in">loop</span>] = (<span class="built_in">float</span>)Math.<span class="built_in">random</span>();</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">int</span> from = <span class="number">0</span>;</span><br><span class="line">		<span class="built_in">int</span> to = values.length;</span><br><span class="line">		<span class="comment">//使用ForkJoinPool，而不是Executors静态工厂创建。不像Executors创建的线程池，需要传递给Counter。</span></span><br><span class="line">		ForkJoinPool pool = <span class="keyword">new</span> ForkJoinPool();</span><br><span class="line">		Counter counter = <span class="keyword">new</span> Counter(values, from, to);</span><br><span class="line">		Future&lt;Integer&gt; future = pool.submit(counter);</span><br><span class="line">		System.out.<span class="built_in">println</span>(future.<span class="built_in">get</span>());</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span><br><span class="line"> * 如果是有返回值，则实现RecursiveTask&lt;T&gt;接口</span><br><span class="line"> * 如果没有返回值，则实现RecursiveAction接口</span><br><span class="line"> */</span></span><br><span class="line">class Counter extends RecursiveTask&lt;Integer&gt;&#123;</span><br><span class="line">	<span class="keyword">private</span> <span class="built_in">float</span> values[];</span><br><span class="line">	<span class="keyword">private</span> <span class="built_in">int</span> from;</span><br><span class="line">	<span class="keyword">private</span> <span class="built_in">int</span> to;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">public</span> Counter(<span class="built_in">float</span> values[], <span class="built_in">int</span> from, <span class="built_in">int</span> to)&#123;</span><br><span class="line">		<span class="keyword">this</span>.values = values;</span><br><span class="line">		<span class="keyword">this</span>.from = from;</span><br><span class="line">		<span class="keyword">this</span>.to = to;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//实现compute的方法</span></span><br><span class="line">	<span class="keyword">public</span> Integer compute()&#123;</span><br><span class="line">		<span class="built_in">int</span> count = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">if</span>(to - from &lt; <span class="number">1000</span>)&#123;</span><br><span class="line">			<span class="keyword">for</span>(<span class="built_in">int</span> <span class="built_in">loop</span>=from; <span class="built_in">loop</span>&lt;to; <span class="built_in">loop</span>++)&#123;</span><br><span class="line">				<span class="keyword">if</span>(values[<span class="built_in">loop</span>] &lt; <span class="number">0.5</span>)&#123;</span><br><span class="line">					count++;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span>&#123;</span><br><span class="line">		    <span class="comment">//分成几部分进行计算，然后进行join</span></span><br><span class="line">			<span class="built_in">int</span> middle = (from + to)/<span class="number">2</span>;</span><br><span class="line">			Counter counter1 = <span class="keyword">new</span> Counter(values, from, middle);</span><br><span class="line">			Counter counter2 = <span class="keyword">new</span> Counter(values, middle, to);</span><br><span class="line">			invokeAll(counter1, counter2);</span><br><span class="line">			<span class="keyword">return</span> counter1.<span class="built_in">join</span>() + counter2.<span class="built_in">join</span>();</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> count;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="u8003_u8651_u95EE_u9898"><a href="#u8003_u8651_u95EE_u9898" class="headerlink" title="考虑问题"></a>考虑问题</h3><p>1：对竞争资源的访问，这个可以通过java语言机制来保证<br>2：程序逻辑造成的死锁，java语言没办法，这个应由设计人员仔细设计程序。<br>如，转账赋值时的同步可以通过java语言机制保证，然而转账的条件却是人为定义了。<br>3：除了使用锁的方式来避免竞争资源，还可以使用CopyOnWrite的方式（其基本思路是，从一开始大家都在共享同一个内容，当某个人想要修改这个内容的时候，才会真正把内容Copy出去形成一个新的内容然后再改，这是一种延时懒惰策略，即当我们往一个容器添加元素的时候，不直接往当前容器添加，而是先将当前容器进行Copy，复制出一个新的容器，然后新的容器里添加元素，添加完元素之后，再将原容器的引用指向新的容器。保证数据的最终一致性，不能保证数据的实时一致性。如CopyOnWriteArrayList，还有ConcurrentHashMap中也有使用如final字段来进行）。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>本篇文章介绍了java中多线程的概念。先简介多线程中的一些基本概念。然后介绍在java中如何编写多线程。从基本的实现Runnable接口，Callable接口，线程各个状态方法调用。然后介绍多线程编程中如何保证同步，引入了锁的概念，从锁接口(Lock)及其方法（lock，unLock，newCondition），条件接口(Condition)及其方法（await，singal，singalAll），锁类(ReentrantLock)，对象或类的内部锁(synchronized块)及内部条件(wait，notify，notifyAll三个方法)。还介绍了线程安全的一些集合，以及常用的线程池。最后介绍了有关Fork-Join框架。<br>]]>
    
    </summary>
    
      <category term="java" scheme="http://jinpingwang.github.io/tags/java/"/>
    
      <category term="java" scheme="http://jinpingwang.github.io/categories/java/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[装饰者模式]]></title>
    <link href="http://jinpingwang.github.io/2016/05/14/designPattern/%E8%A3%85%E9%A5%B0%E8%80%85%E6%A8%A1%E5%BC%8F/"/>
    <id>http://jinpingwang.github.io/2016/05/14/designPattern/装饰者模式/</id>
    <published>2016-05-14T11:27:36.000Z</published>
    <updated>2016-07-13T12:20:24.518Z</updated>
    <content type="html"><![CDATA[<h3 id="what"><a href="#what" class="headerlink" title="what"></a>what</h3><p>动态地将责任附加到对象上。想要扩展功能，装饰者提供有别于继承的另一种选择。</p>
<h3 id="why"><a href="#why" class="headerlink" title="why"></a>why</h3><p>运行时扩展，使用对象组合的方式，做到运行时装饰类，能够在不修改任何底层代码的情况下给你的（或别人的）对象赋予新的职责。</p>
<h3 id="how"><a href="#how" class="headerlink" title="how"></a>how</h3><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title">Beverage</span>&#123;</span><br><span class="line">    String description = <span class="string">"Unknown Beverage"</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getDescription</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> description;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">double</span> <span class="title">cost</span>(<span class="params"></span>)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">Espresso</span> <span class="keyword"><span class="keyword">extends</span></span> <span class="title">Beverage</span>&#123;</span></span><br><span class="line">    public <span class="type">Espresso</span>()&#123;</span><br><span class="line">        description = <span class="string">"Esprosso"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    public double cost()&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1.99</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">HouseBlend</span> <span class="keyword"><span class="keyword">extends</span></span> <span class="title">Beverage</span>&#123;</span></span><br><span class="line">    public <span class="type">HouseBlend</span>()&#123;</span><br><span class="line">        description = <span class="string">"House Blend Coffee"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    public double cost()&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0.89</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//装饰者基类也是继承被装饰者的基类</span></span><br><span class="line">public <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">CondimentDecorator</span> <span class="keyword"><span class="keyword">extends</span></span> <span class="title">Beverage</span>&#123;</span></span><br><span class="line">    public <span class="keyword">abstract</span> <span class="type">String</span> getDescription();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">Mocha</span> <span class="keyword"><span class="keyword">extends</span></span> <span class="title">CondimentDecorator</span>&#123;</span></span><br><span class="line">    <span class="type">Beverage</span> beverage;</span><br><span class="line">    </span><br><span class="line">    public <span class="type">Mocha</span>(<span class="type">Beverage</span> beverage)&#123;</span><br><span class="line">        <span class="keyword">this</span>.beverage = beverage;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    public <span class="type">String</span> getDescription()&#123;</span><br><span class="line">        <span class="keyword">return</span> beverage.getDescription() + <span class="string">", Mocha"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    public double cost()&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">.20</span> + beverage.cost();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">StarbuzzCoffee</span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span>(<span class="params">String args[]</span>)</span>&#123;</span><br><span class="line">        <span class="comment">//不需要调料（无装饰者情况下）</span></span><br><span class="line">        Beverage beverage = <span class="keyword">new</span> Espresso();</span><br><span class="line">        System.<span class="keyword">out</span>.println(beverage.getDescription() + <span class="string">" $"</span> + beverage.cost());</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//需要Mocha调料（有装饰者装饰）</span></span><br><span class="line">        Beverage beverage2 = <span class="keyword">new</span> Espresso();</span><br><span class="line">        beverage2 = <span class="keyword">new</span> Mocha(beverage2);</span><br><span class="line">        System.<span class="keyword">out</span>.println(beverage2.getDescription() + <span class="string">" $"</span> + beverage2.cost());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[<h3 id="what"><a href="#what" class="headerlink" title="what"></a>what</h3><p>动态地将责任附加到对象上。想要扩展功能，装饰者提供有别于继承的另一种选择。</p>
<h3 id="why"><a href]]>
    </summary>
    
      <category term="设计模式" scheme="http://jinpingwang.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
      <category term="设计模式" scheme="http://jinpingwang.github.io/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[工厂模式]]></title>
    <link href="http://jinpingwang.github.io/2016/05/11/designPattern/%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/"/>
    <id>http://jinpingwang.github.io/2016/05/11/designPattern/工厂模式/</id>
    <published>2016-05-11T00:14:37.000Z</published>
    <updated>2016-07-13T12:22:12.500Z</updated>
    <content type="html"><![CDATA[<h3 id="what"><a href="#what" class="headerlink" title="what"></a>what</h3><h4 id="u7B80_u5355_u5DE5_u5382"><a href="#u7B80_u5355_u5DE5_u5382" class="headerlink" title="简单工厂"></a>简单工厂</h4><p>不算是一总模式，而是一种编程习惯。</p>
<h4 id="u5DE5_u5382_u65B9_u6CD5_u6A21_u5F0F"><a href="#u5DE5_u5382_u65B9_u6CD5_u6A21_u5F0F" class="headerlink" title="工厂方法模式"></a>工厂方法模式</h4><p>定义了一个创建对象的接口，但由子类决定要实例化的类是哪一个。工厂方法让类把实例化推迟到子类。</p>
<h4 id="u62BD_u8C61_u5DE5_u5382_u6A21_u5F0F"><a href="#u62BD_u8C61_u5DE5_u5382_u6A21_u5F0F" class="headerlink" title="抽象工厂模式"></a>抽象工厂模式</h4><p>提供一个接口，用于创建相关或依赖对象的家族，而不需要明确指定具体类。</p>
<h3 id="why"><a href="#why" class="headerlink" title="why"></a>why</h3><p>依赖抽象，不要依赖具体类</p>
<h3 id="how"><a href="#how" class="headerlink" title="how"></a>how</h3><h4 id="u7B80_u5355_u5DE5_u5382-1"><a href="#u7B80_u5355_u5DE5_u5382-1" class="headerlink" title="简单工厂"></a>简单工厂</h4><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title">Pizza</span>&#123;</span><br><span class="line">    String name;</span><br><span class="line">    String dough;</span><br><span class="line">    String sauce;</span><br><span class="line">    ArrayList toppings = <span class="keyword">new</span> ArrayList();</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">prepare</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        System.<span class="keyword">out</span>.println(<span class="string">"Preparing "</span> + name);</span><br><span class="line">        System.<span class="keyword">out</span>.println(<span class="string">"Tossing dough..."</span>);</span><br><span class="line">        System.<span class="keyword">out</span>.println(<span class="string">"Adding sauce..."</span>);</span><br><span class="line">        System.<span class="keyword">out</span>.println(<span class="string">"Adding toppings: "</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;toppings.size(); i++)&#123;</span><br><span class="line">            System.<span class="keyword">out</span>.println(<span class="string">" "</span> + toppings.<span class="keyword">get</span>(i));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">bake</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        System.<span class="keyword">out</span>.println(<span class="string">"Bake for 25 minutes at 350"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">cut</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        System.<span class="keyword">out</span>.println(<span class="string">"Cutting the pizza into diagonal slices"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">box</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        System.<span class="keyword">out</span>.println(<span class="string">"Place pizza in official PizzaStore box"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">NYStyleCheesePizza</span> <span class="keyword"><span class="keyword">extends</span></span> <span class="title">Pizza</span>&#123;</span></span><br><span class="line">    public <span class="type">NYStyleCheesePizza</span>()&#123;</span><br><span class="line">        name = <span class="string">"NY Style Sauce and Cheese Pizza"</span>;</span><br><span class="line">        dough = <span class="string">"Thin Crust Dough"</span>;</span><br><span class="line">        sauce = <span class="string">"Marinara Sauce"</span>;</span><br><span class="line">        toppings.add(<span class="string">"Grated Reggiano Cheese"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> NYStylePizzaFactory&#123;</span><br><span class="line">    <span class="keyword">public</span> Pizza createPizza(String <span class="class"><span class="keyword">type</span>)&#123;</span></span><br><span class="line">        Pizza pizza = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">if</span>(<span class="class"><span class="keyword">type</span>.<span class="title">equals</span></span>(<span class="string">"cheese"</span>))&#123;</span><br><span class="line">            pizza = <span class="keyword">new</span> NYStyleCheesePizza();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(<span class="class"><span class="keyword">type</span>.<span class="title">equals</span></span>(<span class="string">"pepperoni"</span>))&#123;</span><br><span class="line">            pizza = <span class="keyword">new</span> NYStylePepperoniPizza();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(<span class="class"><span class="keyword">type</span>.<span class="title">equals</span></span>(<span class="string">"clam"</span>)&#123;</span><br><span class="line">            pizza = <span class="keyword">new</span> NYStyleClamPizza();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(<span class="class"><span class="keyword">type</span>.<span class="title">equals</span></span>(<span class="string">"veggie"</span>)&#123;</span><br><span class="line">            pizza = <span class="keyword">new</span> NYStyleVeggiePizza();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> pizza;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">PizzaStore</span></span>&#123;</span><br><span class="line">    NYStylePizzaFactory <span class="literal">factory</span>;</span><br><span class="line">    </span><br><span class="line">    public PizzaStrore(NYStylePizzaFactory <span class="literal">factory</span>)&#123;</span><br><span class="line">        <span class="keyword">this</span>.<span class="literal">factory</span> = <span class="literal">factory</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    public Pizza orderPizza(<span class="built_in">String</span> type)&#123;</span><br><span class="line">        Pizza pizza;</span><br><span class="line">        pizza = <span class="literal">factory</span>.createPizza(type);</span><br><span class="line">        pizza.prepare();</span><br><span class="line">        pizza.bake();</span><br><span class="line">        pizza.cut();</span><br><span class="line">        pizza.box();</span><br><span class="line">        <span class="keyword">return</span> pizza;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Main</span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span>(<span class="params">String argv[]</span>)</span>&#123;</span><br><span class="line">        NYStylePizzaFactory nyFactory = <span class="keyword">new</span> NYStylePizzaFactory();</span><br><span class="line">        PizzaStore nyStore = <span class="keyword">new</span> PizzaStore(nyFactory);</span><br><span class="line">        nyStore.orderPizza(<span class="string">"Veggie"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="u5DE5_u5382_u65B9_u6CD5_u6A21_u5F0F-1"><a href="#u5DE5_u5382_u65B9_u6CD5_u6A21_u5F0F-1" class="headerlink" title="工厂方法模式"></a>工厂方法模式</h4><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> PizzaStore&#123;</span><br><span class="line">    <span class="keyword">public</span> Pizza orderPizza(String <span class="class"><span class="keyword">type</span>)&#123;</span></span><br><span class="line">        Pizza pizza;</span><br><span class="line">        pizza = createPizza(<span class="class"><span class="keyword">type</span>);</span></span><br><span class="line">        pizza.prepare();</span><br><span class="line">        pizza.bake();</span><br><span class="line">        pizza.cut();</span><br><span class="line">        pizza.box();</span><br><span class="line">        <span class="keyword">return</span> pizza;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> Pizza </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">NYStylePizzaStore</span> <span class="keyword"><span class="keyword">extends</span></span> <span class="title">PizzaStore</span>&#123;</span></span><br><span class="line">    <span class="type">Pizza</span> createPizza(<span class="type">String</span> item)&#123;</span><br><span class="line">        <span class="keyword">if</span>(item.equals(<span class="string">"cheese"</span>))&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="type">NYStyleCheesePizza</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(item.equals(<span class="string">"veggie"</span>))&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="type">NYStyleVeggiePizza</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(item.equals(<span class="string">"clam"</span>))&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="type">NYStyleClamPizza</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(item.equals(<span class="string">"pepperoni"</span>))&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="type">NYStylePeperoniPizza</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Main</span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span>(<span class="params">String argv[]</span>)</span>&#123;</span><br><span class="line">        PizzaStore nyStore = <span class="keyword">new</span> NYStylePizzaStore();</span><br><span class="line">        Pizza pizza = nyStore.orderPizza(<span class="string">"cheese"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="u62BD_u8C61_u5DE5_u5382_u6A21_u5F0F-1"><a href="#u62BD_u8C61_u5DE5_u5382_u6A21_u5F0F-1" class="headerlink" title="抽象工厂模式"></a>抽象工厂模式</h4><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">PizzaIngredientFactory</span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Dough <span class="title">createDough</span>(<span class="params"></span>)</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Sauce <span class="title">createSauce</span>(<span class="params"></span>)</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Cheese <span class="title">createCheese</span>(<span class="params"></span>)</span>;</span><br><span class="line">    <span class="keyword">public</span> Veggies[] createVeggies();</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Pepperoni <span class="title">createPepperoni</span>(<span class="params"></span>)</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Clams <span class="title">createClam</span>(<span class="params"></span>)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NYStylePizzaIngredientFactory</span> <span class="keyword">implements</span> <span class="title">PizzaIngredientFactory</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Dough <span class="title">createDough</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ThinCrustDough();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Sauce <span class="title">createSauce</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> MarinaraSauce();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Cheese <span class="title">createCheese</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ReggianoCheese();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> Veggies[] createVeggies()&#123;</span><br><span class="line">        Veggies veggies[] = &#123;<span class="keyword">new</span> Garlic(), <span class="keyword">new</span> Onion(), <span class="keyword">new</span> Mushroom(), <span class="keyword">new</span> RedPepper()&#125;;</span><br><span class="line">        <span class="keyword">return</span> veggies;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Pepperoni <span class="title">createPepperoni</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> SlicedPepperoni();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Clams <span class="title">createClam</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> FreshClams();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title">Pizza</span>&#123;</span><br><span class="line">    String name;</span><br><span class="line">    Dough dough;</span><br><span class="line">    Sauce sauce;</span><br><span class="line">    Veggies veggies[];</span><br><span class="line">    Cheese cheese;</span><br><span class="line">    Pepperoni pepperoni;</span><br><span class="line">    Clams clam;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">prepare</span>(<span class="params"></span>)</span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">bake</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        System.<span class="keyword">out</span>.println(<span class="string">"Bake for 25 minutes at 350"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">cut</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        System.<span class="keyword">out</span>.println(<span class="string">"Cutting the pizza into diagonal slices"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">box</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        System.<span class="keyword">out</span>.println(<span class="string">"Place pizza in official PizzaStore box"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setName</span>(<span class="params">String name</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">String <span class="title">getName</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">CheesePizza</span> <span class="keyword"><span class="keyword">extends</span></span> <span class="title">Pizza</span>&#123;</span></span><br><span class="line">    <span class="type">PizzaIngredientFactory</span> ingredientFactory;</span><br><span class="line">    </span><br><span class="line">    public <span class="type">CheesePizza</span>(<span class="type">PizzaIngredientFactory</span> ingredientFactory)&#123;</span><br><span class="line">        <span class="keyword">this</span>.ingredinetFactory = ingredientFactory;</span><br><span class="line">    &#125;</span><br><span class="line">    void prepare()&#123;</span><br><span class="line">        <span class="type">System</span>.out.println(<span class="string">"Preparing "</span> + name);</span><br><span class="line">        dough = ingredientFactory.createDough();</span><br><span class="line">        sauce = ingredientFactory.createSauce();</span><br><span class="line">        cheese = ingredientFactory.createCheese();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">NYStylePizzaStore</span> <span class="keyword"><span class="keyword">extends</span></span> <span class="title">PizzaStore</span>&#123;</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="type">Pizza</span> createPizza(<span class="type">String</span> name)&#123;</span><br><span class="line">        <span class="type">Pizza</span> pizza = <span class="literal">null</span>;</span><br><span class="line">        <span class="type">PizzaIngredientFactory</span> ingredientFactory = <span class="keyword">new</span> <span class="type">NYStylePizzaIngredientFactory</span>();</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(item.equals(<span class="string">"cheese"</span>))&#123;</span><br><span class="line">            pizza = <span class="keyword">new</span> <span class="type">CheesePizza</span>(ingredientFactory);</span><br><span class="line">            pizza.setName(<span class="string">"New York Style Cheese Pizza"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(item.equals(<span class="string">"veggie"</span>))&#123;</span><br><span class="line">            pizza = <span class="keyword">new</span> <span class="type">VeggiePizza</span>(ingredientFactory);</span><br><span class="line">            pizza.setName(<span class="string">"New York Style Veggie Pizza"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(item.equals(<span class="string">"clam"</span>))&#123;</span><br><span class="line">            pizza = <span class="keyword">new</span> <span class="type">ClamPizza</span>(ingredientFactory);</span><br><span class="line">            pizza.setName(<span class="string">"New York Style Clam Pizza"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(item.equals(<span class="string">"pepperoni"</span>))&#123;</span><br><span class="line">            pizza = <span class="keyword">new</span> <span class="type">PepperoniPizza</span>(ingredientFactory);</span><br><span class="line">            pizza.setName(<span class="string">"New York Style Pepperoni Pizza"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> pizza;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[<h3 id="what"><a href="#what" class="headerlink" title="what"></a>what</h3><h4 id="u7B80_u5355_u5DE5_u5382"><a href="#u7B80_u5355_u5DE5_u538]]>
    </summary>
    
      <category term="设计模式" scheme="http://jinpingwang.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
      <category term="设计模式" scheme="http://jinpingwang.github.io/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[单件模式]]></title>
    <link href="http://jinpingwang.github.io/2016/05/09/designPattern/%E5%8D%95%E4%BB%B6%E6%A8%A1%E5%BC%8F/"/>
    <id>http://jinpingwang.github.io/2016/05/09/designPattern/单件模式/</id>
    <published>2016-05-08T23:38:23.000Z</published>
    <updated>2016-07-13T12:23:59.323Z</updated>
    <content type="html"><![CDATA[<h3 id="what"><a href="#what" class="headerlink" title="what"></a>what</h3><p>确保一个类只有一个实例，并提供全局访问点。</p>
<h3 id="why"><a href="#why" class="headerlink" title="why"></a>why</h3><p>数据库连接池，日志对象，延迟实例化</p>
<h3 id="how"><a href="#how" class="headerlink" title="how"></a>how</h3><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Singleton</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton uniqueInstance = <span class="keyword">new</span> Singleton();</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> uniqueInstance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton uniqueInstance;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span></span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//第一种</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> Singleton <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(uniqueInstance == <span class="keyword">null</span>)&#123;</span><br><span class="line">            uniqueInstance = <span class="keyword">new</span> Singleton();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> uniqueInstance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Singleton uniqueInstance;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span></span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> Singleton <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(uniqueInstance == <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">synchronized</span>(Singleton.class)&#123;</span><br><span class="line">                <span class="keyword">if</span>(uniqueInstance == <span class="keyword">null</span>)&#123;</span><br><span class="line">                    uniqueInstance = <span class="keyword">new</span> Singleton();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> uniqueInstance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="defect"><a href="#defect" class="headerlink" title="defect"></a>defect</h3><p>1：如果有两个类加载器，则如果都加载单例，则会有两个不同的单例对象。</p>
]]></content>
    <summary type="html">
    <![CDATA[<h3 id="what"><a href="#what" class="headerlink" title="what"></a>what</h3><p>确保一个类只有一个实例，并提供全局访问点。</p>
<h3 id="why"><a href="#why" class="h]]>
    </summary>
    
      <category term="设计模式" scheme="http://jinpingwang.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
      <category term="设计模式" scheme="http://jinpingwang.github.io/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[适配器模式]]></title>
    <link href="http://jinpingwang.github.io/2016/05/08/designPattern/%E9%80%82%E9%85%8D%E5%99%A8%E6%A8%A1%E5%BC%8F/"/>
    <id>http://jinpingwang.github.io/2016/05/08/designPattern/适配器模式/</id>
    <published>2016-05-08T15:14:51.000Z</published>
    <updated>2016-07-13T12:25:06.680Z</updated>
    <content type="html"><![CDATA[<h3 id="what"><a href="#what" class="headerlink" title="what"></a>what</h3><p>将一个类的接口，转换成客户期望的另一个接口。</p>
<h3 id="why"><a href="#why" class="headerlink" title="why"></a>why</h3><p>适配器让原本接口不兼容的类可以合作无间。</p>
<h3 id="how"><a href="#how" class="headerlink" title="how"></a>how</h3><p>Client：客户<br>Target：客户想要的接口<br>Adapter：适配器<br>Adaptee：聚合（组合）或继承这一个来完成客户想要的接口</p>
<h4 id="u5BF9_u8C61_u9002_u914D_u5668"><a href="#u5BF9_u8C61_u9002_u914D_u5668" class="headerlink" title="对象适配器"></a>对象适配器</h4><p>Adapter实现Target，聚合Adaptee。而Adaptee可以为接口，这样就可以使实现Adaptee接口的类做为被适配都，灵活性更高。<br><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//枚举与迭代器，将枚举适配到迭代器</span></span><br></pre></td></tr></table></figure></p>
<figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">EnumerationIterator</span> <span class="title">implements</span> <span class="title">Iterator</span>&#123;</span></span><br><span class="line">    <span class="constant">Enumeration</span> <span class="class"><span class="keyword">enum</span>;</span></span><br><span class="line">    public <span class="constant">EnumerationIterator</span>(<span class="constant">Enumeration</span> <span class="class"><span class="keyword">enum</span>)&#123;</span></span><br><span class="line">        this.<span class="keyword">enum</span> = <span class="class"><span class="keyword">enum</span>;</span></span><br><span class="line">    &#125;</span><br><span class="line">    public boolean hasNext()&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="class"><span class="keyword">enum</span>.<span class="title">hasMoreElements</span>();</span></span><br><span class="line">    &#125;</span><br><span class="line">    public <span class="constant">Object</span> <span class="keyword">next</span>()&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="class"><span class="keyword">enum</span>.<span class="title">nextElement</span>();</span></span><br><span class="line">    &#125;</span><br><span class="line">    public void remove()&#123;</span><br><span class="line">        throw new <span class="constant">UnsupportedOperationException</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">鸭子与火鸡</span><br></pre></td></tr></table></figure>
<figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">Duck</span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">quack</span>(<span class="params"></span>)</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fly</span>(<span class="params"></span>)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">MallarDuck</span> <span class="title">implements</span> <span class="title">Duck</span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">quack</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        System.<span class="keyword">out</span>.println(<span class="string">"Quack"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fly</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        System.<span class="keyword">out</span>.println(<span class="string">"I'm flying"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">Turkey</span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">gobble</span>(<span class="params"></span>)</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fly</span>(<span class="params"></span>)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">WildTurkey</span> <span class="title">implements</span> <span class="title">Turkey</span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">gobble</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        System.<span class="keyword">out</span>.println(<span class="string">"Gobble gobble"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fly</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        System.<span class="keyword">out</span>.println(<span class="string">"I'm flying a short distance"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TurkeyAdapter</span> <span class="keyword">implements</span> <span class="title">Duck</span></span>&#123;</span><br><span class="line">    Turkey turkey;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TurkeyAdapter</span><span class="params">(Turkey turkey)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.turkey = turkey;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">quack</span><span class="params">()</span></span>&#123;</span><br><span class="line">        turkey.gobble();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fly</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> loop=<span class="number">0</span>; loop&lt;<span class="number">5</span>; loop++)&#123;</span><br><span class="line">            turkey.fly();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">DuckTestDrive</span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span>(<span class="params">String args</span>)</span>&#123;</span><br><span class="line">        MallardDuck duck = <span class="keyword">new</span> MallardDuck();</span><br><span class="line">        </span><br><span class="line">        WildTurkey turkey = <span class="keyword">new</span> WildTurkey();</span><br><span class="line">        Duck turkeyAdapter = <span class="keyword">new</span> TurkeyAdapter(turkey);</span><br><span class="line">        </span><br><span class="line">        System.<span class="keyword">out</span>.println(<span class="string">"The Turkey says..."</span>);</span><br><span class="line">        turkey.gobble();</span><br><span class="line">        turkey.fly();</span><br><span class="line">        </span><br><span class="line">        System.<span class="keyword">out</span>.println(<span class="string">"\nThe Duck says..."</span>);</span><br><span class="line">        testDuck(duck);</span><br><span class="line">        </span><br><span class="line">        System.<span class="keyword">out</span>.println(<span class="string">"\nThe TurkeyAdapter says..."</span>)</span><br><span class="line">        testDuck(turkeyAdapter);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">testDuck</span>(<span class="params">Duck duck</span>)</span>&#123;</span><br><span class="line">        duck.quack();</span><br><span class="line">        duck.fly();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="u7C7B_u9002_u914D_u5668"><a href="#u7C7B_u9002_u914D_u5668" class="headerlink" title="类适配器"></a>类适配器</h4><p>Adapter实现Target，继承Adaptee。Adaptee只能为类，因为是通过继承特定的类。相对于对象适配器，类适配器的优点是不需要重新实现整个被适配者，因为对象适配器中的被适配者是聚合在适配器中。</p>
<h3 id="u88C5_u9970_u8005_u6A21_u5F0F_uFF0C_u9002_u914D_u5668_u6A21_u5F0F_uFF0C_u5916_u89C2_u6A21_u5F0F_u7684_u533A_u522B"><a href="#u88C5_u9970_u8005_u6A21_u5F0F_uFF0C_u9002_u914D_u5668_u6A21_u5F0F_uFF0C_u5916_u89C2_u6A21_u5F0F_u7684_u533A_u522B" class="headerlink" title="装饰者模式，适配器模式，外观模式的区别"></a>装饰者模式，适配器模式，外观模式的区别</h3><p>装饰者将一个对象包装起来以增加新的行为和责任；适配器将一个对象包装起来以改变其接口；外观将一群对象”包装”起来以简化其接口。</p>
]]></content>
    <summary type="html">
    <![CDATA[<h3 id="what"><a href="#what" class="headerlink" title="what"></a>what</h3><p>将一个类的接口，转换成客户期望的另一个接口。</p>
<h3 id="why"><a href="#why" class="]]>
    </summary>
    
      <category term="设计模式" scheme="http://jinpingwang.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
      <category term="设计模式" scheme="http://jinpingwang.github.io/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[HTTP之keep-alive模式]]></title>
    <link href="http://jinpingwang.github.io/2016/04/27/network/HTTP%E4%B9%8Bkeep-alive%E6%A8%A1%E5%BC%8F/"/>
    <id>http://jinpingwang.github.io/2016/04/27/network/HTTP之keep-alive模式/</id>
    <published>2016-04-27T07:09:01.000Z</published>
    <updated>2016-05-27T12:54:03.909Z</updated>
    <content type="html"><![CDATA[<h3 id="u975Ekeep-alive_u6A21_u5F0F"><a href="#u975Ekeep-alive_u6A21_u5F0F" class="headerlink" title="非keep-alive模式"></a>非keep-alive模式</h3><h4 id="tomcat_u4E2D_u7684_u914D_u7F6E"><a href="#tomcat_u4E2D_u7684_u914D_u7F6E" class="headerlink" title="tomcat中的配置"></a>tomcat中的配置</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">Connector</span> <span class="attribute">port</span>=<span class="value">"80"</span> <span class="attribute">protocol</span>=<span class="value">"HTTP/1.1"</span></span><br><span class="line">           <span class="attribute">connectionTimeout</span>=<span class="value">"20000"</span></span><br><span class="line">           <span class="attribute">maxKeepAliveRequests</span>=<span class="value">"1"</span></span><br><span class="line">           <span class="attribute">redirectPort</span>=<span class="value">"8443"</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- keepAliveTimeout="60000"  --&gt;</span></span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h4 id="wireshart_u6355_u83B7"><a href="#wireshart_u6355_u83B7" class="headerlink" title="wireshart捕获"></a>wireshart捕获</h4><p><img src="http://i4.buimg.com/c63f2a0e34df5947.jpg" alt=""></p>
<h4 id="u89E3_u6790"><a href="#u89E3_u6790" class="headerlink" title="解析"></a>解析</h4><h5 id="maxKeepAliveRequests"><a href="#maxKeepAliveRequests" class="headerlink" title="maxKeepAliveRequests"></a>maxKeepAliveRequests</h5><p>tomcat中maxKeepAliveRequests表示在keep-alive模式下，连接的最大次数。这里设置为1，表示，每一次请求后，服务器就在HTTP报头中添加以下这个字段：<br><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">Connection</span>: <span class="string">close\r\n</span></span><br></pre></td></tr></table></figure></p>
<h5 id="keepAliveTimeout"><a href="#keepAliveTimeout" class="headerlink" title="keepAliveTimeout"></a>keepAliveTimeout</h5><p>tomcat中keepAliveTimeout表示服务器保持keep-alive模式的时长。即这个tcp保持的时常，如果超过就需要重新创建连接。</p>
<h4 id="wireshart_u4E0B_u5206_u6790_u975Ekeep-alive_u7684_u6D41_u7A0B"><a href="#wireshart_u4E0B_u5206_u6790_u975Ekeep-alive_u7684_u6D41_u7A0B" class="headerlink" title="wireshart下分析非keep-alive的流程"></a>wireshart下分析非keep-alive的流程</h4><p>如果服务器与客户端都设置了keep-alive，则在相应的限定内（maxKeepAliveRequests, keepAliveTimeout）都是使用同一个tcp连接。本篇分析如果不设置keep-alive模式时的http访问。<br>1：客户端发起SYN请求，此时客户端的端口号为：54314。如图红色字体1显示。<br>2：TCP连接建立后便发起HTTP请求。此时的请求端口号还是为：54314。因为这是第一个HTTP请求。<br>3：服务器响应HTTP请求，返回请求的内容，如图3所示。<br>4：服务器返回HTTP请求的请求头部中添加了<code>Connection: close\r\n</code>字段。因为tomcat中设置了maxKeepAliveRequests为1，即基于这个TCP的请求最多只能有一个HTTP请求。如图4所示。<br>5：客户端新开了两个TCP连接，端口分别为54315与54316。如图5所示<br>6：54315端口的TCP连接成功后，客户端向服务器发送了css获取请求<br>7：54316端口的TCP连接成功后，客户端向服务器发送了js获取请求<br>8：服务器向客户端返回css请求响应，告知客户端css文件没有被修改，可以使用浏览器中缓存的css。并且在响应字段中添加了<code>Connection: close\r\n</code>字段。原因同4。</p>
<p>解释一下，为什么6，7会同时开启新的tcp请求，而不是用原来的，其原因就是因为服务器设置了maxKeepAliveRequests=1。但在客户端服务器都设置keep-alive模式时，6，7还是有可能开户新的tcp请求，而不是用原来的请求，因为浏览器会自动按情况开启2至多个线程向服务器请求数据。</p>
<h3 id="keep-alive_u6A21_u5F0F"><a href="#keep-alive_u6A21_u5F0F" class="headerlink" title="keep-alive模式"></a>keep-alive模式</h3><h4 id="tomcat"><a href="#tomcat" class="headerlink" title="tomcat"></a>tomcat</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- tomcat默认是支持keep-alive，也可通过上面的两个值进行自己设置 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">Connector</span> <span class="attribute">port</span>=<span class="value">"80"</span> <span class="attribute">protocol</span>=<span class="value">"HTTP/1.1"</span></span><br><span class="line">           <span class="attribute">connectionTimeout</span>=<span class="value">"20000"</span></span><br><span class="line">           <span class="attribute">redirectPort</span>=<span class="value">"8443"</span> /&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="wireshark_u6355_u83B7"><a href="#wireshark_u6355_u83B7" class="headerlink" title="wireshark捕获"></a>wireshark捕获</h4><p><img src="http://i2.buimg.com/ba56f0019c2e6e9a.jpg" alt=""></p>
<h3 id="u89E3_u6790-1"><a href="#u89E3_u6790-1" class="headerlink" title="解析"></a>解析</h3><h4 id="wireshart_u4E0B_u5206_u6790keep-alive_u7684_u6D41_u7A0B"><a href="#wireshart_u4E0B_u5206_u6790keep-alive_u7684_u6D41_u7A0B" class="headerlink" title="wireshart下分析keep-alive的流程"></a>wireshart下分析keep-alive的流程</h4><p>1：客户端发起SYN请求，此时客户端的端口号为：56378。如图红色字体1显示。<br>2：TCP连接建立后便发起HTTP请求。<br>3：服务器响应请求，因为数据太长，所以使用tcp发送了多个数据，最后一个使用http，告知对方已发送完数据，客户端也对这个http回送ack确认<br>4：客户端发送别一个页面（里面的内容和前一个页面一模一样）的请求，但因为是keep-alive模式，所以还是使用原先的端口。<br>5：同3。这里使用的序列号等都是基于前一个tcp加上去的。但因为之前接到服务器的一个http已经确认了上次数据已接收完。所以不会将当前的接收到的数据传给上一个页面。</p>
<h3 id="keep-alive_u5982_u4F55_u4FDD_u8BC1_u4E0D_u540C_u7684http_u8BF7_u6C42_u6570_u636E_u4E0D_u4F1A_u51B2_u7A81"><a href="#keep-alive_u5982_u4F55_u4FDD_u8BC1_u4E0D_u540C_u7684http_u8BF7_u6C42_u6570_u636E_u4E0D_u4F1A_u51B2_u7A81" class="headerlink" title="keep-alive如何保证不同的http请求数据不会冲突"></a>keep-alive如何保证不同的http请求数据不会冲突</h3><p>两个http运行在同一条tcp链上，怎么保证数据不会冲突或都何时才能知道其中一个http响应的数据已经读取完？经过wireshark的抓包可知，同时对服务器的两个http请求时，如果数据量大时，则会创建两个tcp连接，而不是同一个，因为是不同的tcp链，所以也不可能出现数据冲突；如果数据量不大时，只使用同一个tcp链，但是却是分开请求http的，即请求完第一个http并且等待它响应完成后，才使用这个tcp链响应第二个http请求，这样就不存在数据冲突。</p>
]]></content>
    <summary type="html">
    <![CDATA[<h3 id="u975Ekeep-alive_u6A21_u5F0F"><a href="#u975Ekeep-alive_u6A21_u5F0F" class="headerlink" title="非keep-alive模式"></a>非keep-alive模式</h3><h4 id="tomcat_u4E2D_u7684_u914D_u7F6E"><a href="#tomcat_u4E2D_u7684_u914D_u7F6E" class="headerlink" title="tomcat中的配置"></a>tomcat中的配置</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">Connector</span> <span class="attribute">port</span>=<span class="value">"80"</span> <span class="attribute">protocol</span>=<span class="value">"HTTP/1.1"</span></span><br><span class="line">           <span class="attribute">connectionTimeout</span>=<span class="value">"20000"</span></span><br><span class="line">           <span class="attribute">maxKeepAliveRequests</span>=<span class="value">"1"</span></span><br><span class="line">           <span class="attribute">redirectPort</span>=<span class="value">"8443"</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- keepAliveTimeout="60000"  --&gt;</span></span><br></pre></td></tr></table></figure>]]>
    
    </summary>
    
      <category term="HTTP" scheme="http://jinpingwang.github.io/tags/HTTP/"/>
    
      <category term="面试" scheme="http://jinpingwang.github.io/tags/%E9%9D%A2%E8%AF%95/"/>
    
      <category term="计算机网络" scheme="http://jinpingwang.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[基于tomcat的web应用安全]]></title>
    <link href="http://jinpingwang.github.io/2016/04/26/web/%E5%9F%BA%E4%BA%8Etomcat%E7%9A%84web%E5%BA%94%E7%94%A8%E5%AE%89%E5%85%A8/"/>
    <id>http://jinpingwang.github.io/2016/04/26/web/基于tomcat的web应用安全/</id>
    <published>2016-04-26T01:55:12.000Z</published>
    <updated>2016-07-02T03:32:31.058Z</updated>
    <content type="html"><![CDATA[<p><img src="/myImages/基于tomcat的web应用安全.jpg" alt=""><br>本篇讲解基于tomcat容器下的web应用安全。主要包括四个方面即：认证，授权，机密性以及数据完整性，以及如何在Tomcat下配置SSH/TLS单边，双边认证。<br><a id="more"></a></p>
<h3 id="u8BA4_u8BC1"><a href="#u8BA4_u8BC1" class="headerlink" title="认证"></a>认证</h3><h4 id="u57FA_u672C_uFF08BASIC_uFF09"><a href="#u57FA_u672C_uFF08BASIC_uFF09" class="headerlink" title="基本（BASIC）"></a>基本（BASIC）</h4><p>以一种编码形式（未加密）传输登录信息，由于编码机制（base64）已经广为人知，所以BASIC认证的安全性很弱。</p>
<h5 id="web-xml_u4E2D_u7684_u8BBE_u7F6E"><a href="#web-xml_u4E2D_u7684_u8BBE_u7F6E" class="headerlink" title="web.xml中的设置"></a>web.xml中的设置</h5><figure class="highlight nimrod"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;login-config&gt;</span><br><span class="line">    &lt;auth-<span class="keyword">method</span>&gt;<span class="type">BASIC</span>&lt;/auth-<span class="keyword">method</span>&gt;</span><br><span class="line">&lt;/login-config&gt;</span><br></pre></td></tr></table></figure>
<h5 id="wireshark_u6355_u83B7_u7684_u62A5_u6587"><a href="#wireshark_u6355_u83B7_u7684_u62A5_u6587" class="headerlink" title="wireshark捕获的报文"></a>wireshark捕获的报文</h5><p><img src="http://i3.piimg.com/6569b445c966c286.jpg" alt=""></p>
<h4 id="u6458_u8981_uFF08DIGEST_uFF09"><a href="#u6458_u8981_uFF08DIGEST_uFF09" class="headerlink" title="摘要（DIGEST）"></a>摘要（DIGEST）</h4><h5 id="web-xml_u4E2D_u7684_u8BBE_u7F6E-1"><a href="#web-xml_u4E2D_u7684_u8BBE_u7F6E-1" class="headerlink" title="web.xml中的设置"></a>web.xml中的设置</h5><p>相比BASIC认证安全<br><figure class="highlight nimrod"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;login-config&gt;</span><br><span class="line">    &lt;auth-<span class="keyword">method</span>&gt;<span class="type">DIGEST</span>&lt;/auth-<span class="keyword">method</span>&gt;</span><br><span class="line">&lt;/login-config&gt;</span><br></pre></td></tr></table></figure></p>
<h5 id="wireshark_u6355_u83B7_u7684_u62A5_u6587-1"><a href="#wireshark_u6355_u83B7_u7684_u62A5_u6587-1" class="headerlink" title="wireshark捕获的报文"></a>wireshark捕获的报文</h5><p><img src="http://i4.piimg.com/b8cf46e871351950.jpg" alt=""></p>
<h4 id="u5BA2_u6237_u8BC1_u4E66_uFF08CLIENT-CERT_uFF09"><a href="#u5BA2_u6237_u8BC1_u4E66_uFF08CLIENT-CERT_uFF09" class="headerlink" title="客户证书（CLIENT-CERT）"></a>客户证书（CLIENT-CERT）</h4><p>以一种非常安全的形式传输登录信息，它使用了公共密钥证书（PKC），缺点是客户必须先有一个证书才能登录系统，但客户很少有证书。<br><figure class="highlight nimrod"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;login-config&gt;</span><br><span class="line">    &lt;auth-<span class="keyword">method</span>&gt;<span class="type">CLIENT</span>-<span class="type">CERT</span>&lt;/auth-<span class="keyword">method</span>&gt;</span><br><span class="line">&lt;/login-config&gt;</span><br></pre></td></tr></table></figure></p>
<h4 id="u8868_u5355_uFF08FORM_uFF09"><a href="#u8868_u5355_uFF08FORM_uFF09" class="headerlink" title="表单（FORM）"></a>表单（FORM）</h4><p>可以利用合法的HTML建立自己的定制登录表单，但是这种认证是以最不安全的方式传输，因为用户名和口令都在HTTP请求中发回，而且未经加密。</p>
<h5 id="DD_u4E2D_u7684_u914D_u7F6E"><a href="#DD_u4E2D_u7684_u914D_u7F6E" class="headerlink" title="DD中的配置"></a>DD中的配置</h5><figure class="highlight nimrod"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;login-config&gt;</span><br><span class="line">    &lt;auth-<span class="keyword">method</span>&gt;<span class="type">FORM</span>&lt;/auth-<span class="keyword">method</span>&gt;</span><br><span class="line">    &lt;form-login-config&gt;</span><br><span class="line">        &lt;form-login-page&gt;/loginPage.html&lt;/form-login-page&gt;</span><br><span class="line">        &lt;form-error-page&gt;/loginError.html&lt;/form-error-page&gt;</span><br><span class="line">    &lt;/form-login-config&gt;</span><br><span class="line">&lt;/login-config&gt;</span><br></pre></td></tr></table></figure>
<h5 id="loginPage-html"><a href="#loginPage-html" class="headerlink" title="loginPage.html"></a>loginPage.html</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">head</span>&gt;</span><span class="tag">&lt;/<span class="title">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">body</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- html登录表单的action必须是j_security_check --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">form</span> <span class="attribute">method</span>=<span class="value">"POST"</span> <span class="attribute">action</span>=<span class="value">"j_security_check"</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 容器要求http请求分别把用户名与密码存储在j_username与j_password中 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="title">input</span> <span class="attribute">type</span>=<span class="value">"text"</span> <span class="attribute">name</span>=<span class="value">"j_username"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="title">input</span> <span class="attribute">type</span>=<span class="value">"password"</span> <span class="attribute">name</span>=<span class="value">"j_password"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="title">input</span> <span class="attribute">type</span>=<span class="value">"submit"</span> <span class="attribute">value</span>=<span class="value">"Enter"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="title">form</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="title">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h5 id="loginError-html"><a href="#loginError-html" class="headerlink" title="loginError.html"></a>loginError.html</h5><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;html&gt;</span></span><br><span class="line">    <span class="tag">&lt;head&gt;</span><span class="tag">&lt;/head&gt;</span></span><br><span class="line">    <span class="tag">&lt;body&gt;</span></span><br><span class="line">        <span class="keyword">Sorry</span>, wrong password</span><br><span class="line">    <span class="tag">&lt;/body&gt;</span></span><br><span class="line"><span class="tag">&lt;/html&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="u56DB_u79CD_u8BA4_u8BC1_u5BF9_u6BD4"><a href="#u56DB_u79CD_u8BA4_u8BC1_u5BF9_u6BD4" class="headerlink" title="四种认证对比"></a>四种认证对比</h4><table>
<thead>
<tr>
<th style="text-align:center">类型</th>
<th style="text-align:center">规范</th>
<th style="text-align:center">数据完整性</th>
<th style="text-align:center">注释</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">BASIC</td>
<td style="text-align:center">HTTP</td>
<td style="text-align:center">Base64-弱</td>
<td style="text-align:center">HTTP标准，所有浏览器都支持</td>
</tr>
<tr>
<td style="text-align:center">DIGEST</td>
<td style="text-align:center">HTTP</td>
<td style="text-align:center">强一些-但不是SSL</td>
<td style="text-align:center">对于HTTP和J2EE容器是可选的</td>
</tr>
<tr>
<td style="text-align:center">FORM</td>
<td style="text-align:center">J2EE</td>
<td style="text-align:center">非常弱，没有加密</td>
<td style="text-align:center">允许有定制的登录屏幕</td>
</tr>
<tr>
<td style="text-align:center">CLIENT-CERT</td>
<td style="text-align:center">j2EE</td>
<td style="text-align:center">强-公共密钥（PKC）</td>
<td style="text-align:center">很强，但是用户必须有证书</td>
</tr>
</tbody>
</table>
<h4 id="u8BA4_u8BC1_u7684_u4F18_u70B9"><a href="#u8BA4_u8BC1_u7684_u4F18_u70B9" class="headerlink" title="认证的优点"></a>认证的优点</h4><p>代码中不要有安全信息，大多数web应用的安全约束都应该以声明方式处理，即在部署描述文件中指定<br>1：能自然地映射到公司IT部门现在的任务角色。<br>2：可以用更灵活的方式使用以前写的servlet<br>3：允许应用开发人员重用servlet，而是不用纠缠源代码<br>4：随着应用的扩展，可以减少可能的维护<br>5：支持基于组件的开发思想</p>
<h3 id="u6388_u6743"><a href="#u6388_u6743" class="headerlink" title="授权"></a>授权</h3><h4 id="u5B9A_u4E49_u89D2_u8272"><a href="#u5B9A_u4E49_u89D2_u8272" class="headerlink" title="定义角色"></a>定义角色</h4><h5 id="u4FEE_u6539_24TOMCAT_HOME/conf/tomcat-users-xml"><a href="#u4FEE_u6539_24TOMCAT_HOME/conf/tomcat-users-xml" class="headerlink" title="修改$TOMCAT_HOME/conf/tomcat-users.xml"></a>修改$TOMCAT_HOME/conf/tomcat-users.xml</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">tomcat-users</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 角色 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">role</span> <span class="attribute">rolename</span>=<span class="value">"Guest"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">role</span> <span class="attribute">rolename</span>=<span class="value">"Member"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">role</span> <span class="attribute">rolename</span>=<span class="value">"Admin"</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 用户，一个用户可以有多个角色 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">user</span> <span class="attribute">username</span>=<span class="value">"Bill"</span> <span class="attribute">password</span>=<span class="value">"coder"</span> <span class="attribute">roles</span>=<span class="value">"Member, Guest"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">tomcat-users</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h5 id="web-xml_u4E2D_u6DFB_u52A0_u6388_u6743"><a href="#web-xml_u4E2D_u6DFB_u52A0_u6388_u6743" class="headerlink" title="web.xml中添加授权"></a>web.xml中添加授权</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">security-role</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">role-name</span>&gt;</span>Guest<span class="tag">&lt;/<span class="title">role-name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">security-role</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">security-role</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">role-name</span>&gt;</span>Member<span class="tag">&lt;/<span class="title">role-name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">security-role</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">security-role</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">role-name</span>&gt;</span>Admin<span class="tag">&lt;/<span class="title">role-name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">security-role</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="u5B9A_u4E49_u8D44_u6E90/_u65B9_u6CD5_u7EA6_u675F"><a href="#u5B9A_u4E49_u8D44_u6E90/_u65B9_u6CD5_u7EA6_u675F" class="headerlink" title="定义资源/方法约束"></a>定义资源/方法约束</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- security-constraint中有三个子元素。可以读作：只有Admin, Member可以对/Beer/AddRecipe目录中找到的资源完成POST请求，而且确保传输是安全的。那些没有指定的方法表示，所有人都可以请求这些方法 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">security-constraint</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 告诉容器哪些资源和HTTP方法组合要以某种方式受约束，即只能由相应auth-constraint标记中的角色访问 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">web-resource-collection</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">web-resource-name</span>&gt;</span>UpdateRecipes<span class="tag">&lt;/<span class="title">web-resource-name</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 定义要资源 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">url-pattern</span>&gt;</span>/Beer/AddRecipe/*<span class="tag">&lt;/<span class="title">url-pattern</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 指定哪些HTTP方法是受约束的，即约束建立在HTTP请求层次上的，资源本身并没有约束，如果没有指定方法那么所有方法都是受约束的 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">http-method</span>&gt;</span>Get<span class="tag">&lt;/<span class="title">http-method</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">http-method</span>&gt;</span>Post<span class="tag">&lt;/<span class="title">http-method</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="title">web-resource-collection</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- 定义了哪些角色（注意不是用户）能在URL模式所指定资源上调用受约束的HTTP方法 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">auth-constraint</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 如果这里为空，则表示任何角色都不可访问。如果为&lt;role-name&gt;*&lt;/role-name&gt;则表示都可以。 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">role-name</span>&gt;</span>Admin<span class="tag">&lt;/<span class="title">role-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">role-name</span>&gt;</span>Member<span class="tag">&lt;/<span class="title">role-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="title">auth-constraint</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- 定义了是否启用HTTPS --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">user-data-constraint</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">transport-guarantee</span>&gt;</span>CONFIDENTIAL<span class="tag">&lt;/<span class="title">transport-guarantee</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="title">user-data-constraint</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">security-constraint</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="u673A_u5BC6_u6027_u4E0E_u6570_u636E_u5B8C_u6574_u6027"><a href="#u673A_u5BC6_u6027_u4E0E_u6570_u636E_u5B8C_u6574_u6027" class="headerlink" title="机密性与数据完整性"></a>机密性与数据完整性</h3><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">/<span class="keyword">*</span><span class="keyword">*</span></span><br><span class="line"> <span class="keyword">*</span> 在security-constraint中添加以下内容，</span><br><span class="line"> <span class="keyword">*</span> 则在访问受限资源时就要启动https功能</span><br><span class="line"> <span class="keyword">*</span>/</span><br><span class="line"><span class="variable">&lt;security-constraint&gt;</span></span><br><span class="line">    <span class="variable">&lt;user-data-constraint&gt;</span></span><br><span class="line">        <span class="variable">&lt;transport-guarantee&gt;</span>CONFIDENTIAL<span class="variable">&lt;/transport-guarantee&gt;</span></span><br><span class="line">    <span class="variable">&lt;/user-data-constraint&gt;</span></span><br><span class="line"><span class="variable">&lt;/security-constraint&gt;</span></span><br></pre></td></tr></table></figure>
<p>需要说明一点，认证与机密性数据完整性没有具体的联系。认证只是负责谁可以访问受限资源，而机密性数据完整性是用于传输的内容安全保障。</p>
<h3 id="tomcat_u4E0B_u914D_u5236SSL/TLS"><a href="#tomcat_u4E0B_u914D_u5236SSL/TLS" class="headerlink" title="tomcat下配制SSL/TLS"></a>tomcat下配制SSL/TLS</h3><h4 id="u670D_u52A1_u5668_u8BC1_u4E66"><a href="#u670D_u52A1_u5668_u8BC1_u4E66" class="headerlink" title="服务器证书"></a>服务器证书</h4><h5 id="u547D_u4EE4_uFF1A"><a href="#u547D_u4EE4_uFF1A" class="headerlink" title="命令："></a>命令：</h5><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">keytool -genkey -keyalg RSA -alias tomcat -dname <span class="string">"CN=192.168.91.200"</span> -keystore /app/tomcat/key/tomcat.keystore -validity <span class="number">36500</span> -storepass <span class="number">123456</span></span><br></pre></td></tr></table></figure>
<h5 id="u53C2_u6570_u89E3_u91CA"><a href="#u53C2_u6570_u89E3_u91CA" class="headerlink" title="参数解释"></a>参数解释</h5><p>genkey：表示要生成新的密钥库<br>keyalg：表示密钥生成的算法<br>alias：表示别名<br>dname：写服务器的相关信息，其中CN(cn)表示域名或IP地址<br>keystore：密钥库存储的位置<br>storepass：密钥库的密码（如果没有些参数，后面生成时会提示输入）</p>
<h4 id="u670D_u52A1_u5668_u8BC1_u4E66_u5BFC_u51FA_u6210CER_u6587_u4EF6_uFF0C_u5BFC_u5165_u5BA2_u6237_u7AEF_u4E2D_u6210_u4E3A_u53EF_u4FE1_u4EFB_u8BC1_u4E66"><a href="#u670D_u52A1_u5668_u8BC1_u4E66_u5BFC_u51FA_u6210CER_u6587_u4EF6_uFF0C_u5BFC_u5165_u5BA2_u6237_u7AEF_u4E2D_u6210_u4E3A_u53EF_u4FE1_u4EFB_u8BC1_u4E66" class="headerlink" title="服务器证书导出成CER文件，导入客户端中成为可信任证书"></a>服务器证书导出成CER文件，导入客户端中成为可信任证书</h4><h5 id="u547D_u4EE4"><a href="#u547D_u4EE4" class="headerlink" title="命令"></a>命令</h5><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">keytool -keystore <span class="regexp">/app/</span>tomcat<span class="regexp">/key/</span>tomcat.keystore -export -alias tomcat -<span class="keyword">file</span> <span class="regexp">/app/</span>tomcat<span class="regexp">/key/</span>tomcat.cer</span><br></pre></td></tr></table></figure>
<h4 id="u5BA2_u6237_u7AEF_u8BC1_u4E66"><a href="#u5BA2_u6237_u7AEF_u8BC1_u4E66" class="headerlink" title="客户端证书"></a>客户端证书</h4><h5 id="u547D_u4EE4-1"><a href="#u547D_u4EE4-1" class="headerlink" title="命令"></a>命令</h5><p>keytool -genkey -v -alias mykey -keyalg RSA -storetype PKCS12 -keystore ./mykey.p12</p>
<h5 id="u53C2_u6570_u89E3_u91CA-1"><a href="#u53C2_u6570_u89E3_u91CA-1" class="headerlink" title="参数解释"></a>参数解释</h5><p>storetype :为了使证书能导入浏览器中，证书的格式设置成PKCS12。</p>
<h4 id="u670D_u52A1_u5668_u4FE1_u4EFB_u5BA2_u6237_u7AEF_u8BC1_u4E66"><a href="#u670D_u52A1_u5668_u4FE1_u4EFB_u5BA2_u6237_u7AEF_u8BC1_u4E66" class="headerlink" title="服务器信任客户端证书"></a>服务器信任客户端证书</h4><h5 id="u5148_u5C06_u5BA2_u6237_u7AEF_u8BC1_u4E66_u8F6C_u6210-cer"><a href="#u5148_u5C06_u5BA2_u6237_u7AEF_u8BC1_u4E66_u8F6C_u6210-cer" class="headerlink" title="先将客户端证书转成.cer"></a>先将客户端证书转成.cer</h5><p>keytool -export -alias mykey -keystore ./mykey.p12 -storetype PKCS12 -rfc -file ./mykey.cer</p>
<h5 id="u5C06_u5BA2_u6237_u7AEF_u7684-cer_u683C_u5F0F_u6DFB_u52A0_u5230tomcat-keystore"><a href="#u5C06_u5BA2_u6237_u7AEF_u7684-cer_u683C_u5F0F_u6DFB_u52A0_u5230tomcat-keystore" class="headerlink" title="将客户端的.cer格式添加到tomcat.keystore"></a>将客户端的.cer格式添加到tomcat.keystore</h5><p>keytool -import -v -file mykey.cer -keystore ./tomcat.keystore</p>
<h5 id="u67E5_u770Btomcat-keystore_u4E2D_u5305_u542B_u4E86_u51E0_u4E2A_u8BC1_u4E66"><a href="#u67E5_u770Btomcat-keystore_u4E2D_u5305_u542B_u4E86_u51E0_u4E2A_u8BC1_u4E66" class="headerlink" title="查看tomcat.keystore中包含了几个证书"></a>查看tomcat.keystore中包含了几个证书</h5><p>keytool -list -keystore ./tomcat.keystore</p>
<h4 id="tomcat_u4E2Dserver-xml_u7684_u914D_u7F6E"><a href="#tomcat_u4E2Dserver-xml_u7684_u914D_u7F6E" class="headerlink" title="tomcat中server.xml的配置"></a>tomcat中server.xml的配置</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">Connector</span> <span class="attribute">port</span>=<span class="value">"8443"</span> <span class="attribute">protocol</span>=<span class="value">"HTTP/1.1"</span> <span class="attribute">SSLEnabled</span>=<span class="value">"true"</span></span><br><span class="line">           <span class="attribute">maxThreads</span>=<span class="value">"150"</span> <span class="attribute">scheme</span>=<span class="value">"https"</span> <span class="attribute">secure</span>=<span class="value">"true"</span></span><br><span class="line">           <span class="attribute">clientAuth</span>=<span class="value">"false"</span> <span class="attribute">sslProtocol</span>=<span class="value">"TLS"</span> </span><br><span class="line">           <span class="attribute">keystoreFile</span>=<span class="value">"/app/tomcat/key/tomcat.keystore"</span> </span><br><span class="line">           <span class="attribute">keystorePass</span>=<span class="value">"123456"</span> /&gt;</span></span><br></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[<p><img src="/myImages/基于tomcat的web应用安全.jpg" alt=""><br>本篇讲解基于tomcat容器下的web应用安全。主要包括四个方面即：认证，授权，机密性以及数据完整性，以及如何在Tomcat下配置SSH/TLS单边，双边认证。<br>]]>
    
    </summary>
    
      <category term="tomcat" scheme="http://jinpingwang.github.io/tags/tomcat/"/>
    
      <category term="web" scheme="http://jinpingwang.github.io/tags/web/"/>
    
      <category term="web安全" scheme="http://jinpingwang.github.io/tags/web%E5%AE%89%E5%85%A8/"/>
    
      <category term="web" scheme="http://jinpingwang.github.io/categories/web/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[基于贝叶斯的2-Gram中文分词]]></title>
    <link href="http://jinpingwang.github.io/2016/04/25/nlp/3:%E5%9F%BA%E4%BA%8E%E8%B4%9D%E5%8F%B6%E6%96%AF%E7%9A%842-Gram%E4%B8%AD%E6%96%87%E5%88%86%E8%AF%8D/"/>
    <id>http://jinpingwang.github.io/2016/04/25/nlp/3:基于贝叶斯的2-Gram中文分词/</id>
    <published>2016-04-25T02:41:56.000Z</published>
    <updated>2016-05-12T14:05:11.545Z</updated>
    <content type="html"><![CDATA[<p>介绍了基于贝叶斯的2-Gram分词方法（可以与另外两篇机械分词器相比对：<a href="http://blog.wangjinping.top/2016/01/02/nlp/1:%E6%AD%A3%E5%90%91%E6%9C%80%E9%95%BF%E5%8C%B9%E9%85%8D%E4%B8%AD%E5%88%86%E8%AF%8D/" target="_blank" rel="external">正向最长匹配</a> 和 <a href="http://blog.wangjinping.top/2016/01/02/nlp/2:%E5%8F%8D%E5%90%91%E6%9C%80%E9%95%BF%E5%8C%B9%E9%85%8D%E4%B8%AD%E5%88%86%E8%AF%8D/" target="_blank" rel="external">反向最长匹配</a>）。</p>
<h3 id="u95EE_u9898"><a href="#u95EE_u9898" class="headerlink" title="问题"></a>问题</h3><p>1：输入语料库词频<br>2：输入”上网站联盟”<br>3：输出分词结果</p>
<h3 id="u89E3_u51B3_u63CF_u8FF0"><a href="#u89E3_u51B3_u63CF_u8FF0" class="headerlink" title="解决描述"></a>解决描述</h3><p>1：一个n+1个字的句子，它的分词方法有：2的n次方。比如：”上网站”，可以分词为：上/网/站，上/网站，上网/站，上网站。<br>2：按照每一种分词，根据语料库中的词频统计，利用贝叶斯计算出这种分词下的概率；比如，上，网，站这三个字独自出现的概率为1000，上出现在网站前的词频为200，词表中有10000个词，那么按照贝叶斯公式可计算出”上/网站”这种分词的概率为：p(上网站)=p(上)*p(网站|上)=(1000/10000)*(200/10000)=0.002；同理按贝叶斯公式可计算出”上/网/站”这种分词的概率为：p(上网站)=p(上)*p(网)*p(站)=(1000/10000)*(1000/10000)*(1000/10000)=0.001。因为0.002&gt;0.001，所以，分词”上/网站”要优于”上/网/站”。<br>3：对所有分词的情况都计算出它的概率，取概率最大的那个分词方式，即为该句子的分词方式。<br><a id="more"></a></p>
<h3 id="u8BED_u6599_u5E93_u8BCD_u9891"><a href="#u8BED_u6599_u5E93_u8BCD_u9891" class="headerlink" title="语料库词频"></a>语料库词频</h3><table>
<thead>
<tr>
<th>项目</th>
<th style="text-align:right">上</th>
<th style="text-align:center">网</th>
<th>站</th>
<th>联</th>
<th>盟</th>
<th>上网</th>
<th>网站</th>
<th>站联</th>
<th>联盟</th>
<th>上网站</th>
<th>网站联</th>
<th>站联盟</th>
<th>上网站联</th>
<th>网站联盟</th>
<th>上网站联盟</th>
</tr>
</thead>
<tbody>
<tr>
<td>上</td>
<td style="text-align:right">1000</td>
<td style="text-align:center">100</td>
<td></td>
<td></td>
<td></td>
<td></td>
<td>160</td>
<td></td>
<td></td>
<td></td>
<td>3</td>
<td></td>
<td></td>
<td>140</td>
<td></td>
</tr>
<tr>
<td>网</td>
<td style="text-align:right"></td>
<td style="text-align:center">1000</td>
<td>130</td>
<td></td>
<td></td>
<td></td>
<td></td>
<td>3</td>
<td></td>
<td></td>
<td></td>
<td>4</td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>站</td>
<td style="text-align:right"></td>
<td style="text-align:center"></td>
<td>1000</td>
<td>4</td>
<td></td>
<td></td>
<td></td>
<td></td>
<td>6</td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>联</td>
<td style="text-align:right"></td>
<td style="text-align:center"></td>
<td></td>
<td>1000</td>
<td>190</td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>盟</td>
<td style="text-align:right"></td>
<td style="text-align:center"></td>
<td></td>
<td></td>
<td>1000</td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>上网</td>
<td style="text-align:right"></td>
<td style="text-align:center"></td>
<td>5</td>
<td></td>
<td></td>
<td>4000</td>
<td></td>
<td>4</td>
<td></td>
<td></td>
<td></td>
<td>7</td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>网站</td>
<td style="text-align:right"></td>
<td style="text-align:center"></td>
<td></td>
<td>3</td>
<td></td>
<td></td>
<td>6000</td>
<td></td>
<td>800</td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>站联</td>
<td style="text-align:right"></td>
<td style="text-align:center"></td>
<td></td>
<td></td>
<td>2</td>
<td></td>
<td></td>
<td>2</td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>联盟</td>
<td style="text-align:right"></td>
<td style="text-align:center"></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td>1100</td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>上网站</td>
<td style="text-align:right"></td>
<td style="text-align:center"></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td>500</td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>网站联</td>
<td style="text-align:right"></td>
<td style="text-align:center"></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td>2</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>站联盟</td>
<td style="text-align:right"></td>
<td style="text-align:center"></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td>3</td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>上网站联</td>
<td style="text-align:right"></td>
<td style="text-align:center"></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td>1</td>
<td></td>
<td></td>
</tr>
<tr>
<td>网站联盟</td>
<td style="text-align:right"></td>
<td style="text-align:center"></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td>1200</td>
<td></td>
</tr>
<tr>
<td>上网站联盟</td>
<td style="text-align:right"></td>
<td style="text-align:center"></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td>2</td>
</tr>
</tbody>
</table>
<p>假设词表有10000个词，可以计算出p(上网站联盟)=p(上)*p(网站联盟/上)=(100/10000)*(1400/10000)=0.0014，是所有分词中概率最大的。<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">分词结果：上/网站联盟</span><br></pre></td></tr></table></figure></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>介绍了基于贝叶斯的2-Gram分词方法（可以与另外两篇机械分词器相比对：<a href="http://blog.wangjinping.top/2016/01/02/nlp/1:%E6%AD%A3%E5%90%91%E6%9C%80%E9%95%BF%E5%8C%B9%E9%85%8D%E4%B8%AD%E5%88%86%E8%AF%8D/">正向最长匹配</a> 和 <a href="http://blog.wangjinping.top/2016/01/02/nlp/2:%E5%8F%8D%E5%90%91%E6%9C%80%E9%95%BF%E5%8C%B9%E9%85%8D%E4%B8%AD%E5%88%86%E8%AF%8D/">反向最长匹配</a>）。</p>
<h3 id="u95EE_u9898"><a href="#u95EE_u9898" class="headerlink" title="问题"></a>问题</h3><p>1：输入语料库词频<br>2：输入”上网站联盟”<br>3：输出分词结果</p>
<h3 id="u89E3_u51B3_u63CF_u8FF0"><a href="#u89E3_u51B3_u63CF_u8FF0" class="headerlink" title="解决描述"></a>解决描述</h3><p>1：一个n+1个字的句子，它的分词方法有：2的n次方。比如：”上网站”，可以分词为：上/网/站，上/网站，上网/站，上网站。<br>2：按照每一种分词，根据语料库中的词频统计，利用贝叶斯计算出这种分词下的概率；比如，上，网，站这三个字独自出现的概率为1000，上出现在网站前的词频为200，词表中有10000个词，那么按照贝叶斯公式可计算出”上/网站”这种分词的概率为：p(上网站)=p(上)*p(网站|上)=(1000/10000)*(200/10000)=0.002；同理按贝叶斯公式可计算出”上/网/站”这种分词的概率为：p(上网站)=p(上)*p(网)*p(站)=(1000/10000)*(1000/10000)*(1000/10000)=0.001。因为0.002&gt;0.001，所以，分词”上/网站”要优于”上/网/站”。<br>3：对所有分词的情况都计算出它的概率，取概率最大的那个分词方式，即为该句子的分词方式。<br>]]>
    
    </summary>
    
      <category term="NLP" scheme="http://jinpingwang.github.io/tags/NLP/"/>
    
      <category term="自然语言处理" scheme="http://jinpingwang.github.io/tags/%E8%87%AA%E7%84%B6%E8%AF%AD%E8%A8%80%E5%A4%84%E7%90%86/"/>
    
      <category term="自然语言处理" scheme="http://jinpingwang.github.io/categories/%E8%87%AA%E7%84%B6%E8%AF%AD%E8%A8%80%E5%A4%84%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[红黑树：一棵神奇的二叉搜索树]]></title>
    <link href="http://jinpingwang.github.io/2016/04/25/interview/%E7%BA%A2%E9%BB%91%E6%A0%91%EF%BC%9A%E4%B8%80%E6%A3%B5%E7%A5%9E%E5%A5%87%E7%9A%84%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91/"/>
    <id>http://jinpingwang.github.io/2016/04/25/interview/红黑树：一棵神奇的二叉搜索树/</id>
    <published>2016-04-25T00:36:27.000Z</published>
    <updated>2016-05-21T11:03:44.592Z</updated>
    <content type="html"><![CDATA[<p><div align="center"><img src="http://hi.csdn.net/attachment/201012/29/8394323_129361793372ZK.png"></div><br>红黑数树是一棵特殊的二叉搜索树，可以保证没有一条路径会比其他路径长出2倍，即有n个点的红黑树高度至多为2lg(n+1)，因而是近似于平衡的。红黑树在操作系统内核以及TreeMap都有广泛的应用，本文先简要介绍二叉搜索树的插入与删除，由此基础上引入红黑树的插入与删除。<br><a id="more"></a></p>
<h3 id="u6EE1_u4E8C_u53C9_u6811"><a href="#u6EE1_u4E8C_u53C9_u6811" class="headerlink" title="满二叉树"></a>满二叉树</h3><p>除了最后一层无叶子结点多，其它层的每个结点都有两个子结点。</p>
<h3 id="u5B8C_u5168_u4E8C_u53C9_u6811"><a href="#u5B8C_u5168_u4E8C_u53C9_u6811" class="headerlink" title="完全二叉树"></a>完全二叉树</h3><p>假设树高为h，则第1层到第(h-1)层是一棵满足(h-1)层的满二叉树，第h层中的所有结点都集中连续排在最左边。</p>
<h3 id="u4E8C_u53C9_u641C_u7D22_u6811"><a href="#u4E8C_u53C9_u641C_u7D22_u6811" class="headerlink" title="二叉搜索树"></a>二叉搜索树</h3><h4 id="u63D2_u5165"><a href="#u63D2_u5165" class="headerlink" title="插入"></a>插入</h4><p>最终插入的位置都是叶子结点位置</p>
<h4 id="u5220_u9664"><a href="#u5220_u9664" class="headerlink" title="删除"></a>删除</h4><p>1：如果删除的点为叶子结点，则直接删除<br>2：如果删除的点只有一个左结点或只有一个右结点，则用左结点或右结点代替结点的位置。<br>3：如果删除的点同时有左右孩子，则让右子树中的最小结点（即最左节点，如果这个最左结点有右孩子，则让最左结点的父亲连接最左结点的右孩子）来替换结点。【第3步中的另一各思想（不直接将结点删除，而是通过将新结点的值赋值到删除结点，这样就相当于将删除结点删除）：删除的点为D, D的直接后继为E（直接后继是指按中序遍历排在D后的第一个数），则直接将D的内容设置为E的内容，然后对E进行TRANSPLANT删除操作，其中u为E, v为E.right。】<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">TRANSPLANT</span>(<span class="type">T</span>, u, v)&#123;</span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 如果只有三个结点A, B, C, 其中B, C为A的孩子结点。则如果u=A, v=C</span><br><span class="line">     * 则变成根为C，这里C并没有将A的左子树B绑定到C的左子树中</span><br><span class="line">     * 而是在TREE-DELETE(T, z)中的</span><br><span class="line">     * y.left = z.left</span><br><span class="line">     * y.left.p = y</span><br><span class="line">     * 这两行进行将B绑定到C的左子树中</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">if</span> u.p == <span class="type">NIL</span></span><br><span class="line">        <span class="type">T</span>.root = v</span><br><span class="line">    elseif u == u.p.<span class="keyword">left</span></span><br><span class="line">        u.p.<span class="keyword">left</span> = v</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        u.p.<span class="keyword">right</span> = v</span><br><span class="line">    <span class="keyword">if</span>(v != <span class="type">NIL</span>)</span><br><span class="line">        v.p = u.p</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">TREE</span>-<span class="type">DELETE</span>(<span class="type">T</span>, z)&#123;</span><br><span class="line">    <span class="keyword">if</span>(z.<span class="keyword">left</span> == <span class="type">NIL</span>)</span><br><span class="line">        <span class="type">TRANSPLANT</span>(<span class="type">T</span>, z, z.<span class="keyword">right</span>)</span><br><span class="line">    elseif(z.<span class="keyword">right</span> == <span class="type">NIL</span>)</span><br><span class="line">        <span class="type">TRANSPLANT</span>(<span class="type">T</span>, z, z.<span class="keyword">left</span>)</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="comment">//也可以是TREE-MAXMUM(z.left), 只不过后面要进行相应的变换。</span></span><br><span class="line">        <span class="comment">//这里得到的y一定是没有左子树的，所以后面的if就没有考虑y.left的情况</span></span><br><span class="line">        y = <span class="type">TREE</span>-<span class="type">MINIMUM</span>(z.<span class="keyword">right</span>)</span><br><span class="line">        <span class="comment">//y不是z的右结点情况</span></span><br><span class="line">        <span class="keyword">if</span>(y.p != z)</span><br><span class="line">            <span class="comment">//要让y的右子树（y.right）绑定到y的父结点的左子树（y.p.left）</span></span><br><span class="line">            <span class="type">TRANSPLANT</span>(<span class="type">T</span>, y, y.<span class="keyword">right</span>)</span><br><span class="line">            <span class="comment">//然后再让删除结点的右子树绑定到y的右子树</span></span><br><span class="line">            <span class="comment">//再将z的右子树的父结点设置为y</span></span><br><span class="line">            y.<span class="keyword">right</span> = z.<span class="keyword">right</span>;</span><br><span class="line">            y.<span class="keyword">right</span>.p = y</span><br><span class="line">        <span class="comment">//将y绑定到z父结点的右子树</span></span><br><span class="line">        <span class="type">TRANSPLANT</span>(<span class="type">T</span>, z, y)</span><br><span class="line">        <span class="comment">//将z的左结点绑定到y, 将z左结点的双亲设置为y</span></span><br><span class="line">        y.<span class="keyword">left</span> = z.<span class="keyword">left</span></span><br><span class="line">        y.<span class="keyword">left</span>.p = y</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="u7EA2_u9ED1_u6811"><a href="#u7EA2_u9ED1_u6811" class="headerlink" title="红黑树"></a>红黑树</h3><h4 id="u5E94_u7528"><a href="#u5E94_u7528" class="headerlink" title="应用"></a>应用</h4><p>vm_area_struct（是虚拟内存管理的最基本单元）<br>java中的TreeMap（得到的结果是经过排序的，根据key值排序）</p>
<h4 id="u5C5E_u6027"><a href="#u5C5E_u6027" class="headerlink" title="属性"></a>属性</h4><p>color：红或黑<br>key：关键字<br>left：指向左子树<br>right：指向右子树<br>p：指向父结点</p>
<h4 id="u6027_u8D28"><a href="#u6027_u8D28" class="headerlink" title="性质"></a>性质</h4><p>1：首先是一个二叉搜索树<br>2：每个结点不是红色就是黑色<br>3：根结点是黑色<br>4：所有叶子结点(NIL)是黑色<br>5：红色结点的左右子结点为黑色<br>6：任意一个结点，从这个结点到其后代的叶子结点的路径中，每一条路径上包含的黑色结点数目相同</p>
<h4 id="u63D2_u5165-1"><a href="#u63D2_u5165-1" class="headerlink" title="插入"></a>插入</h4><p>插入过程中会破坏红黑树中的性质3与性质5。以下插入过程步骤：<br>1：按二叉搜索树插入该点，并将该点标记为红色。该插入的点肯定是在最后一层，即”叶子结点”上（红黑中的的叶子结点是NIL，即刚插入的点的左右子树连接NIL）。<br>2：如果插入点是根结点（即一开始是空树），则直接将红色改为黑色即可。<br>3：如果插入点的父结点是黑色，则不用处理。<br>4：如果插入点的父结点是红色且插入点是父结点的左子树，且叔结点为红色，则将父结点与叔结点改为黑色，爷结点改为红色。<br><img src="http://hi.csdn.net/attachment/201012/29/8394323_129361793372ZK.png" alt="cmd-markdown-logo"><img src="http://hi.csdn.net/attachment/201012/29/8394323_1293617934U9zr.png" alt="cmd-markdown-logo"><br>5：如果插入点的父结点是红色且插入点是父结点的右子树，且叔结点为红色，处理情况同4。<br><img src="http://i2.piimg.com/4564064fdc8ca980.jpg" alt="cmd-markdown-logo"><img src="http://i4.piimg.com/1a94c4e84b3ccf41.jpg" alt="cmd-markdown-logo"></p>
<p>6：如果插入点的父结点是红色且插入点是父结点的左子树，且叔结点为黑色，<font color="red">则父结点改为黑色，爷结点改为红色</font>，并将父结点，爷结点进行右旋转，爷结点的左子树为父结点的右子树。<br><img src="http://i2.piimg.com/3259a5eb97a01f0d.png" alt="cmd-markdown-logo"><img src="http://i2.piimg.com/3156521b2cecbcc4.png" alt="cmd-markdown-logo"><br>7：如果插入点的父结点是红色且插入点是父结点的右子树，且叔结点为黑色，则结点，父结点进行左旋转，父结点的右子树为结点的左子树。<br><img src="http://i2.piimg.com/0b40e366ca416e97.png" alt="cmd-markdown-logo"><img src="http://i2.piimg.com/913e986ccc80628a.png" alt="cmd-markdown-logo"></p>
<h4 id="u5220_u9664-1"><a href="#u5220_u9664-1" class="headerlink" title="删除"></a>删除</h4><h5 id="z_u6CA1_u6709_u5B69_u5B50_u7ED3_u70B9"><a href="#z_u6CA1_u6709_u5B69_u5B50_u7ED3_u70B9" class="headerlink" title="z没有孩子结点"></a>z没有孩子结点</h5><p>1：如果z为红色，则直接删除z<br>2：如果z为黑色，则需要根据z的父结点，z的兄弟相应情况进行调整</p>
<h5 id="z_u6709_u4E00_u4E2A_u5B69_u5B50_u7ED3_u70B9"><a href="#z_u6709_u4E00_u4E2A_u5B69_u5B50_u7ED3_u70B9" class="headerlink" title="z有一个孩子结点"></a>z有一个孩子结点</h5><p>1：如果z为黑色，则孩子结点一定为红色（因为如果孩子结点为黑色，则z另一个空的分析上的黑色点个数与这个分枝上黑色点个数就不相等了）。则将z的孩子结点绑定到父结点上，并将z的孩子结点的颜色改成黑色。<br>（如果z为红色，则孩子结点一定都为空，所以z为红色的情况下不可能只有一个孩子结点。情况不成立。）</p>
<h5 id="z_u6709_u4E24_u4E2A_u5B69_u5B50_u7ED3_u70B9"><a href="#z_u6709_u4E24_u4E2A_u5B69_u5B50_u7ED3_u70B9" class="headerlink" title="z有两个孩子结点"></a>z有两个孩子结点</h5><p>可以不直接删除点为z,而是间接的删除z。y为z的直接后继。将y与z的值进行交换（只交换值，颜色还是原来自己的颜色，这样红黑树原来的性质没有改变，将原来是要删除z结点，变成是要删除y结点）。可知y最多只能有一个孩子结点（y是z右子树中最小的点）。<br>1：y没有孩子结点<br>1.1：如果y为红色，则直接删除y<br>1.2：如果y为黑色，则删除时违反了结点到其所有叶子结点路径中黑色结点个数要相等的性质。所以要根据父结点，兄弟结点的颜色对红黑树进行调整。<br>2：y有一个孩子结点<br>2.1：如果y为黑色，则孩子结点一定为红色，则可以删除y，并将y的孩子结点颜色改成黑色，然后绑定到y的父结点。<br>（y为红色的情况下不可能有一个孩子结点。情况不成立。）</p>
<h4 id="u5E94_u7528_u4E2D_u4F7F_u7528_u7EA2_u9ED1_u6811_u800C_u975E_u5E73_u8861_u4E8C_u53C9_u6811_u539F_u56E0"><a href="#u5E94_u7528_u4E2D_u4F7F_u7528_u7EA2_u9ED1_u6811_u800C_u975E_u5E73_u8861_u4E8C_u53C9_u6811_u539F_u56E0" class="headerlink" title="应用中使用红黑树而非平衡二叉树原因"></a>应用中使用红黑树而非平衡二叉树原因</h4><ol>
<li>如果插入一个node引起了树的不平衡，AVL和RB-Tree都是最多只需要2次旋转操作，即两者都是O(1)；但是在删除node引起树的不平衡时，最坏情况下，AVL需要维护从被删node到root这条路径上所有node的平衡性，因此需要旋转的量级O(logN)，而RB-Tree最多只需3次旋转，只需要O(1)的复杂度。</li>
<li>其次，AVL的结构相较RB-Tree来说更为平衡，在插入和删除node更容易引起Tree的unbalance，因此在大量数据需要插入或者删除时，AVL需要rebalance的频率会更高。因此，RB-Tree在需要大量插入和删除node的场景下，效率更高。自然，由于AVL高度平衡，因此AVL的search效率更高。</li>
</ol>
]]></content>
    <summary type="html">
    <![CDATA[<p><div align="center"><img src="http://hi.csdn.net/attachment/201012/29/8394323_129361793372ZK.png"></div><br>红黑数树是一棵特殊的二叉搜索树，可以保证没有一条路径会比其他路径长出2倍，即有n个点的红黑树高度至多为2lg(n+1)，因而是近似于平衡的。红黑树在操作系统内核以及TreeMap都有广泛的应用，本文先简要介绍二叉搜索树的插入与删除，由此基础上引入红黑树的插入与删除。<br>]]>
    
    </summary>
    
      <category term="面试" scheme="http://jinpingwang.github.io/tags/%E9%9D%A2%E8%AF%95/"/>
    
      <category term="面试" scheme="http://jinpingwang.github.io/categories/%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[手写实现自己的数据库连接池]]></title>
    <link href="http://jinpingwang.github.io/2016/04/25/database/%E6%89%8B%E5%86%99%E5%AE%9E%E7%8E%B0%E8%87%AA%E5%B7%B1%E7%9A%84%E6%95%B0%E6%8D%AE%E5%BA%93%E8%BF%9E%E6%8E%A5%E6%B1%A0/"/>
    <id>http://jinpingwang.github.io/2016/04/25/database/手写实现自己的数据库连接池/</id>
    <published>2016-04-24T22:38:26.000Z</published>
    <updated>2016-06-14T03:08:48.521Z</updated>
    <content type="html"><![CDATA[<p>经过上一篇开源数据库连接池如dbcp, c3p0等的介绍及使用后，本篇着手实现自己的一个数据库连接池。可以完成不同类型的数据库类型的连接池(mysql, sqlServer等)，设置最大连接数，实现获得连接，关闭连接，关闭数据库连接池，动态删除连接池，增加连接池，修改连接池等主要操作。主要文件有DatasourceConfigBean.java, DatasourceConfig.java, DatasourcePool.java, DatasourceDriverManager.java, 这些文件的作用后面会详细分析。<br><a id="more"></a></p>
<h3 id="u6027_u80FD_u5206_u6790"><a href="#u6027_u80FD_u5206_u6790" class="headerlink" title="性能分析"></a>性能分析</h3><h4 id="u5E76_u53D1_u7EBF_u7A0B_u6570_u4E3A400_uFF0C_u6570_u636E_u5E93_u6700_u5927_u8FDE_u63A5_u6570_u8BBE_u7F6E_u4E3A500"><a href="#u5E76_u53D1_u7EBF_u7A0B_u6570_u4E3A400_uFF0C_u6570_u636E_u5E93_u6700_u5927_u8FDE_u63A5_u6570_u8BBE_u7F6E_u4E3A500" class="headerlink" title="并发线程数为400，数据库最大连接数设置为500"></a>并发线程数为400，数据库最大连接数设置为500</h4><p>1：未使用数据库连接池<br>运行时间：3651毫秒<br>2：使用自己编写的数据库连接池<br>运行时间：510毫秒</p>
<h4 id="u5E76_u53D1_u7EBF_u7A0B_u6570_u4E3A5000_uFF0C__u6570_u636E_u5E93_u6700_u5927_u8FDE_u63A5_u6C60_u8BBE_u7F6E_u4E3A_u6700_u5927"><a href="#u5E76_u53D1_u7EBF_u7A0B_u6570_u4E3A5000_uFF0C__u6570_u636E_u5E93_u6700_u5927_u8FDE_u63A5_u6C60_u8BBE_u7F6E_u4E3A_u6700_u5927" class="headerlink" title="并发线程数为5000， 数据库最大连接池设置为最大"></a>并发线程数为5000， 数据库最大连接池设置为最大</h4><p>1：未使用数据库连接池<br>运行出错。<br><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Data source rejected establishment <span class="operator">of</span> connection,  message <span class="built_in">from</span> server: <span class="string">"Too many connections"</span></span><br><span class="line">The <span class="keyword">last</span> packet sent successfully <span class="built_in">to</span> <span class="operator">the</span> server was <span class="number">0</span> <span class="built_in">milliseconds</span> ago. The driver has <span class="operator">not</span> received <span class="keyword">any</span> packets <span class="built_in">from</span> <span class="operator">the</span> server.Communications link failure</span><br></pre></td></tr></table></figure></p>
<p>2：使用自己编写的数据库连接池<br>运行时间：2306毫秒</p>
<h3 id="u6E90_u7801_u5256_u6790"><a href="#u6E90_u7801_u5256_u6790" class="headerlink" title="源码剖析"></a>源码剖析</h3><h4 id="datasourceConfig-xml"><a href="#datasourceConfig-xml" class="headerlink" title="datasourceConfig.xml"></a>datasourceConfig.xml</h4><p>使用xml的格式定义了数据库连接池的配置，包括url, username, password等。不同的数据库连接池使用,<code>&lt;database.DatasourceConfig&gt;&lt;/database.DatasourceConfig&gt;</code>块来表示。</p>
<h4 id="DatasourceConfigBean-java"><a href="#DatasourceConfigBean-java" class="headerlink" title="DatasourceConfigBean.java"></a>DatasourceConfigBean.java</h4><p>这个类的作用显而易见，用来存储datasourceConfig中数据库连接池的信息。</p>
<h4 id="DatasourceConfig-java"><a href="#DatasourceConfig-java" class="headerlink" title="DatasourceConfig.java"></a>DatasourceConfig.java</h4><p>这个类用于读取datasourceConfig.xml文件，使用xml进行序列化与反序列化，并将其每个连接池信息存储在List中，并可完成动态添加删除数据库连接池配置。</p>
<h4 id="DatasourcePool-java"><a href="#DatasourcePool-java" class="headerlink" title="DatasourcePool.java"></a>DatasourcePool.java</h4><p>这个类是数据库连接池的类，实现了DataSource接口。构造函数连续创建了多个物理连接，并使用阻塞队列来存放这些Connection连接。实现了getConnection, freeConnection, close等主要方法。getConnection方法从阻塞队列中取出一个物理连接，freeConnection方法将指定的某个连接放回阻塞队列，close用于关闭连接池中的所有连接（可分强制关闭）。</p>
<h4 id="DatasourceDriverManager-java"><a href="#DatasourceDriverManager-java" class="headerlink" title="DatasourceDriverManager.java"></a>DatasourceDriverManager.java</h4><p>这个类是数据库连接池的管理类，这个类的设计模式使用单例模式，里面存放了多个数据库连接池，使用HashMap进行管理。里面的实现的方法比较显而易见，可以查阅下面的源代码。</p>
<h3 id="u6E90_u4EE3_u7801"><a href="#u6E90_u4EE3_u7801" class="headerlink" title="源代码"></a>源代码</h3><h4 id="datasourceConfig-xml-1"><a href="#datasourceConfig-xml-1" class="headerlink" title="datasourceConfig.xml"></a>datasourceConfig.xml</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- datasourceConfig.xml位置位于resources文件夹下 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">List</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">database.DatasourceConfigBean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">databaseType</span>&gt;</span>Mysql<span class="tag">&lt;/<span class="title">databaseType</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">databasePoolName</span>&gt;</span>MysqlDataSource<span class="tag">&lt;/<span class="title">databasePoolName</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">driver</span>&gt;</span>com.mysql.jdbc.Driver<span class="tag">&lt;/<span class="title">driver</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">url</span>&gt;</span>jdbc:mysql://192.168.91.201:3306/robot<span class="tag">&lt;/<span class="title">url</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">username</span>&gt;</span>robot<span class="tag">&lt;/<span class="title">username</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">password</span>&gt;</span>robot<span class="tag">&lt;/<span class="title">password</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">maxConnectionCount</span>&gt;</span>30<span class="tag">&lt;/<span class="title">maxConnectionCount</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">initialSize</span>&gt;</span>10<span class="tag">&lt;/<span class="title">initialSize</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="title">database.DatasourceConfigBean</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- </span><br><span class="line">  &lt;database.DatasourceConfigBean&gt;</span><br><span class="line">    &lt;databaseType&gt;SqlServer&lt;/databaseType&gt;</span><br><span class="line">    &lt;databasePoolName&gt;SqlServerDataSource&lt;/databasePoolName&gt;</span><br><span class="line">    &lt;driver&gt;com.microsoft.sqlserver.jdbc.SQLServerDriver&lt;/driver&gt;</span><br><span class="line">    &lt;url&gt;jdbc:sqlserver://192.168.91.201:1433;databaseName=robot;&lt;/url&gt;</span><br><span class="line">    &lt;username&gt;robot&lt;/username&gt;</span><br><span class="line">    &lt;password&gt;robot&lt;/password&gt;</span><br><span class="line">    &lt;maxConnectionCount&gt;30&lt;/maxConnectionCount&gt;</span><br><span class="line">    &lt;initialSize&gt;10&lt;/initialSize&gt;    </span><br><span class="line">  &lt;/database.DatasourceConfigBean&gt;</span><br><span class="line"> --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">List</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="DatasourceConfigBean-java-1"><a href="#DatasourceConfigBean-java-1" class="headerlink" title="DatasourceConfigBean.java"></a>DatasourceConfigBean.java</h4><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> class DatasourceConfigBean &#123;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">String</span> databaseType;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">String</span> databasePoolName;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">String</span> driver;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">String</span> url;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">String</span> username;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">String</span> password;</span><br><span class="line">	<span class="keyword">private</span> <span class="built_in">int</span> maxConnectionCount;</span><br><span class="line">	<span class="keyword">private</span> <span class="built_in">int</span> initialSize;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">public</span> DatasourceConfigBean()&#123;</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">public</span> DatasourceConfigBean(<span class="keyword">String</span> databaseType, <span class="keyword">String</span> databasePoolName, </span><br><span class="line">			<span class="keyword">String</span> driver, <span class="keyword">String</span> url, <span class="keyword">String</span> username, <span class="keyword">String</span> password, <span class="built_in">int</span> maxConnectionCount)&#123;</span><br><span class="line">		<span class="keyword">this</span>.databaseType = databaseType;</span><br><span class="line">		<span class="keyword">this</span>.databasePoolName = databasePoolName;</span><br><span class="line">		<span class="keyword">this</span>.driver = driver;</span><br><span class="line">		<span class="keyword">this</span>.url = url;</span><br><span class="line">		<span class="keyword">this</span>.username = username;</span><br><span class="line">		<span class="keyword">this</span>.password = password;</span><br><span class="line">		<span class="keyword">this</span>.maxConnectionCount = maxConnectionCount;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">String</span> getDatabaseType() &#123;</span><br><span class="line">		<span class="keyword">return</span> databaseType;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> setDatabaseType(<span class="keyword">String</span> databaseType) &#123;</span><br><span class="line">		<span class="keyword">this</span>.databaseType = databaseType;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">String</span> getDatabasePoolName() &#123;</span><br><span class="line">		<span class="keyword">return</span> databasePoolName;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> setDatabasePoolName(<span class="keyword">String</span> databasePoolName) &#123;</span><br><span class="line">		<span class="keyword">this</span>.databasePoolName = databasePoolName;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">String</span> getDriver() &#123;</span><br><span class="line">		<span class="keyword">return</span> driver;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> setDriver(<span class="keyword">String</span> driver) &#123;</span><br><span class="line">		<span class="keyword">this</span>.driver = driver;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">String</span> getUrl() &#123;</span><br><span class="line">		<span class="keyword">return</span> url;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> setUrl(<span class="keyword">String</span> url) &#123;</span><br><span class="line">		<span class="keyword">this</span>.url = url;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">String</span> getUsername() &#123;</span><br><span class="line">		<span class="keyword">return</span> username;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> setUsername(<span class="keyword">String</span> username) &#123;</span><br><span class="line">		<span class="keyword">this</span>.username = username;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">String</span> getPassword() &#123;</span><br><span class="line">		<span class="keyword">return</span> password;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> setPassword(<span class="keyword">String</span> password) &#123;</span><br><span class="line">		<span class="keyword">this</span>.password = password;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="built_in">int</span> getMaxConnectionCount() &#123;</span><br><span class="line">		<span class="keyword">return</span> maxConnectionCount;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> setMaxConnectionCount(<span class="built_in">int</span> maxConnectionCount) &#123;</span><br><span class="line">		<span class="keyword">this</span>.maxConnectionCount = maxConnectionCount;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="built_in">int</span> getInitialSize() &#123;</span><br><span class="line">		<span class="keyword">return</span> initialSize;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> setInitialSize(<span class="built_in">int</span> initialSize) &#123;</span><br><span class="line">		<span class="keyword">this</span>.initialSize = initialSize;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="DatasourceConfig-java-1"><a href="#DatasourceConfig-java-1" class="headerlink" title="DatasourceConfig.java"></a>DatasourceConfig.java</h4><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.<span class="keyword">File</span>;</span><br><span class="line"><span class="keyword">import</span> java.io.FileNotFoundException;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.thoughtworks.xstream.XStream;</span><br><span class="line"><span class="keyword">import</span> com.thoughtworks.xstream.io.xml.DomDriver;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> DatasourceConfig &#123;</span><br><span class="line">	<span class="keyword">private</span> List&lt;DatasourceConfigBean&gt; datasourceConfigBeanList;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">public</span> DatasourceConfig() <span class="keyword">throws</span> FileNotFoundException&#123;</span><br><span class="line">		datasourceConfigBeanList = readDatasourceConfig();</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">public</span> List&lt;DatasourceConfigBean&gt; getDatasourceConfigBeanList()&#123;</span><br><span class="line">		<span class="keyword">return</span> datasourceConfigBeanList;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">/**</span><br><span class="line">	 * 向list中添加一个数据库配置</span><br><span class="line">	 * 如果不存在进行添加，并写回配置文件</span><br><span class="line">	 */</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> addDatasourceConfigBean(DatasourceConfigBean datasourceConfigBean) <span class="keyword">throws</span> IOException&#123;</span><br><span class="line">		<span class="keyword">boolean</span> flag = <span class="keyword">true</span>;</span><br><span class="line">		<span class="keyword">for</span>(DatasourceConfigBean temp : datasourceConfigBeanList)&#123;</span><br><span class="line">			<span class="keyword">if</span>(temp.getDatabasePoolName().equals(datasourceConfigBean.getDatabasePoolName()))&#123;</span><br><span class="line">				flag = <span class="keyword">false</span>;</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(flag)&#123;</span><br><span class="line">			datasourceConfigBeanList.add(datasourceConfigBean);</span><br><span class="line">			writeDatasourceConfig(datasourceConfigBeanList);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span>&#123;</span><br><span class="line">			System.out.<span class="keyword">println</span>(<span class="string">"same databasePoolName in the DatasourceConfigBeanList"</span>);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">/**</span><br><span class="line">	 * 根据删除list中的一个配置</span><br><span class="line">	 * 如果查到则进行删除，并进行写回配置文件</span><br><span class="line">	 */</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> removeDatasourceConfigBean(String databasePoolName) <span class="keyword">throws</span> IOException&#123;</span><br><span class="line">		<span class="keyword">boolean</span> flag = <span class="keyword">false</span>;</span><br><span class="line">		<span class="keyword">for</span>(DatasourceConfigBean temp : datasourceConfigBeanList)&#123;</span><br><span class="line">			<span class="keyword">if</span>(temp.getDatabasePoolName().equals(databasePoolName))&#123;</span><br><span class="line">				datasourceConfigBeanList.remove(temp);</span><br><span class="line">				flag = <span class="keyword">true</span>;</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(flag)&#123;</span><br><span class="line">			writeDatasourceConfig(datasourceConfigBeanList);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span>&#123;</span><br><span class="line">			System.out.<span class="keyword">println</span>(<span class="string">"databasePoolName is not in DatasourceConfigBeanList"</span>);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">private</span> List&lt;DatasourceConfigBean&gt; readDatasourceConfig() <span class="keyword">throws</span> FileNotFoundException&#123;</span><br><span class="line">		<span class="keyword">File</span> <span class="keyword">file</span> = <span class="keyword">new</span> <span class="keyword">File</span>(DatasourceConfig.<span class="keyword">class</span>.getResource(<span class="string">"/datasourceConfig.xml"</span>).getPath());</span><br><span class="line">		Scanner sc = <span class="keyword">new</span> Scanner(<span class="keyword">file</span>);</span><br><span class="line">		String dataSourceConfigBeanListXmlString = <span class="string">""</span>;</span><br><span class="line">		<span class="keyword">while</span>(sc.hasNextLine())&#123;</span><br><span class="line">			dataSourceConfigBeanListXmlString += sc.nextLine();</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">		XStream xStream = <span class="keyword">new</span> XStream(<span class="keyword">new</span> DomDriver());</span><br><span class="line">		xStream.alias(<span class="string">"List"</span>, List.<span class="keyword">class</span>);</span><br><span class="line">		<span class="keyword">return</span> (List&lt;DatasourceConfigBean&gt;) xStream.fromXML(dataSourceConfigBeanListXmlString);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">void</span> writeDatasourceConfig(List&lt;DatasourceConfigBean&gt; datasourceConfigBeanList) <span class="keyword">throws</span> IOException&#123;</span><br><span class="line">		<span class="keyword">File</span> <span class="keyword">file</span> = <span class="keyword">new</span> <span class="keyword">File</span>(DatasourceConfig.<span class="keyword">class</span>.getResource(<span class="string">"/datasourceConfig.xml"</span>).getPath());</span><br><span class="line">		XStream xStream = <span class="keyword">new</span> XStream(<span class="keyword">new</span> DomDriver());</span><br><span class="line">		xStream.alias(<span class="string">"List"</span>, List.<span class="keyword">class</span>);</span><br><span class="line">		String datasourceConfigBeanListXmlStream = xStream.toXML(datasourceConfigBeanList);</span><br><span class="line">		</span><br><span class="line">		FileOutputStream out = <span class="keyword">new</span> FileOutputStream(<span class="keyword">file</span>);</span><br><span class="line">		out.<span class="keyword">write</span>(datasourceConfigBeanListXmlStream.getBytes(), <span class="number">0</span>, datasourceConfigBeanListXmlStream.length());</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="DatasourcePool-java-1"><a href="#DatasourcePool-java-1" class="headerlink" title="DatasourcePool.java"></a>DatasourcePool.java</h4><figure class="highlight nimrod"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.<span class="type">PrintWriter</span>;</span><br><span class="line"><span class="keyword">import</span> java.sql.<span class="type">Connection</span>;</span><br><span class="line"><span class="keyword">import</span> java.sql.<span class="type">DriverManager</span>;</span><br><span class="line"><span class="keyword">import</span> java.sql.<span class="type">SQLException</span>;</span><br><span class="line"><span class="keyword">import</span> java.sql.<span class="type">SQLFeatureNotSupportedException</span>;</span><br><span class="line"><span class="keyword">import</span> java.util.<span class="type">ArrayList</span>;</span><br><span class="line"><span class="keyword">import</span> java.util.<span class="type">List</span>;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.<span class="type">ArrayBlockingQueue</span>;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.<span class="type">BlockingQueue</span>;</span><br><span class="line"><span class="keyword">import</span> java.util.logging.<span class="type">Logger</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.sql.<span class="type">DataSource</span>;</span><br><span class="line"></span><br><span class="line">public class <span class="type">DatasourcePool</span> implements <span class="type">DataSource</span> &#123;</span><br><span class="line">	<span class="type">BlockingQueue</span>&lt;<span class="type">Connection</span>&gt; blockQueue;</span><br><span class="line">	<span class="type">List</span>&lt;<span class="type">Connection</span>&gt; list;</span><br><span class="line">	</span><br><span class="line">	public <span class="type">DatasourcePool</span>(<span class="type">DatasourceConfigBean</span> datasourceConfigBean) throws <span class="type">SQLException</span>&#123;</span><br><span class="line">		blockQueue = new <span class="type">ArrayBlockingQueue</span>&lt;<span class="type">Connection</span>&gt;(datasourceConfigBean.getMaxConnectionCount());</span><br><span class="line">		list = new <span class="type">ArrayList</span>&lt;<span class="type">Connection</span>&gt;();</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> loop=<span class="number">0</span>; loop&lt;datasourceConfigBean.getInitialSize(); loop++)&#123;</span><br><span class="line">			<span class="type">Connection</span> conn = <span class="type">DriverManager</span>.getConnection(datasourceConfigBean.getUrl(),</span><br><span class="line">					datasourceConfigBean.getUsername(), datasourceConfigBean.getPassword());</span><br><span class="line">			blockQueue.add(conn);</span><br><span class="line">			list.add(conn);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	@<span class="type">Override</span></span><br><span class="line">	public <span class="type">Connection</span> getConnection() throws <span class="type">SQLException</span> &#123;</span><br><span class="line">		// <span class="type">TODO</span> <span class="type">Auto</span>-generated <span class="keyword">method</span> stub</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			<span class="keyword">return</span> blockQueue.take();</span><br><span class="line">		&#125; catch (<span class="type">InterruptedException</span> e) &#123;</span><br><span class="line">			// <span class="type">TODO</span> <span class="type">Auto</span>-generated catch <span class="keyword">block</span></span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> null;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	public <span class="type">void</span> freeConnection(<span class="type">Connection</span> conn)&#123;</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			blockQueue.put(conn);</span><br><span class="line">		&#125; catch (<span class="type">InterruptedException</span> e) &#123;</span><br><span class="line">			// <span class="type">TODO</span> <span class="type">Auto</span>-generated catch <span class="keyword">block</span></span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	public <span class="type">void</span> close() throws <span class="type">SQLException</span>&#123;</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> loop=<span class="number">0</span>; loop&lt;list.size(); loop++)&#123;</span><br><span class="line">			list.get(loop).close();</span><br><span class="line">			list.<span class="type">set</span>(loop, null);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	public <span class="type">void</span> close(boolean flag) throws <span class="type">Exception</span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(blockQueue.size() == list.size())&#123;</span><br><span class="line">			close();</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span>&#123;</span><br><span class="line">			throw new <span class="type">Exception</span>(<span class="string">"some Connection is using"</span>);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	@<span class="type">Override</span></span><br><span class="line">	public <span class="type">PrintWriter</span> getLogWriter() throws <span class="type">SQLException</span> &#123;</span><br><span class="line">		// <span class="type">TODO</span> <span class="type">Auto</span>-generated <span class="keyword">method</span> stub</span><br><span class="line">		<span class="keyword">return</span> null;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	@<span class="type">Override</span></span><br><span class="line">	public <span class="type">void</span> setLogWriter(<span class="type">PrintWriter</span> <span class="keyword">out</span>) throws <span class="type">SQLException</span> &#123;</span><br><span class="line">		// <span class="type">TODO</span> <span class="type">Auto</span>-generated <span class="keyword">method</span> stub</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	@<span class="type">Override</span></span><br><span class="line">	public <span class="type">void</span> setLoginTimeout(<span class="type">int</span> seconds) throws <span class="type">SQLException</span> &#123;</span><br><span class="line">		// <span class="type">TODO</span> <span class="type">Auto</span>-generated <span class="keyword">method</span> stub</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	@<span class="type">Override</span></span><br><span class="line">	public <span class="type">int</span> getLoginTimeout() throws <span class="type">SQLException</span> &#123;</span><br><span class="line">		// <span class="type">TODO</span> <span class="type">Auto</span>-generated <span class="keyword">method</span> stub</span><br><span class="line">		<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	@<span class="type">Override</span></span><br><span class="line">	public <span class="type">Logger</span> getParentLogger() throws <span class="type">SQLFeatureNotSupportedException</span> &#123;</span><br><span class="line">		// <span class="type">TODO</span> <span class="type">Auto</span>-generated <span class="keyword">method</span> stub</span><br><span class="line">		<span class="keyword">return</span> null;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	@<span class="type">Override</span></span><br><span class="line">	public &lt;T&gt; T unwrap(<span class="type">Class</span>&lt;T&gt; iface) throws <span class="type">SQLException</span> &#123;</span><br><span class="line">		// <span class="type">TODO</span> <span class="type">Auto</span>-generated <span class="keyword">method</span> stub</span><br><span class="line">		<span class="keyword">return</span> null;</span><br><span class="line">	&#125;</span><br><span class="line">		</span><br><span class="line">	@<span class="type">Override</span></span><br><span class="line">	public boolean isWrapperFor(<span class="type">Class</span>&lt;?&gt; iface) throws <span class="type">SQLException</span> &#123;</span><br><span class="line">		// <span class="type">TODO</span> <span class="type">Auto</span>-generated <span class="keyword">method</span> stub</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	@<span class="type">Override</span></span><br><span class="line">	public <span class="type">Connection</span> getConnection(<span class="type">String</span> username, <span class="type">String</span> password) throws <span class="type">SQLException</span> &#123;</span><br><span class="line">		// <span class="type">TODO</span> <span class="type">Auto</span>-generated <span class="keyword">method</span> stub</span><br><span class="line">		<span class="keyword">return</span> null;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="DatasourceDriverManager-java-1"><a href="#DatasourceDriverManager-java-1" class="headerlink" title="DatasourceDriverManager.java"></a>DatasourceDriverManager.java</h4><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.FileNotFoundException;</span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"><span class="keyword">import</span> java.util.<span class="keyword">HashMap</span>;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> class DatasourceDriverManager &#123;</span><br><span class="line">	<span class="keyword">private</span> Map&lt;<span class="keyword">String</span>, DatasourcePool&gt; pools;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">static</span> DatasourceDriverManager datasourceDriverManager;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">public</span> DatasourceDriverManager() <span class="keyword">throws</span> FileNotFoundException, SQLException&#123;</span><br><span class="line">		pools = <span class="keyword">new</span> <span class="keyword">HashMap</span>&lt;<span class="keyword">String</span>, DatasourcePool&gt;();</span><br><span class="line">		DatasourceConfig datasourceConfig = <span class="keyword">new</span> DatasourceConfig();</span><br><span class="line">		<span class="keyword">for</span>(DatasourceConfigBean datasourceConfigBean : datasourceConfig.getDatasourceConfigBeanList())&#123;</span><br><span class="line">			pools.put(datasourceConfigBean.getDatabaseType(), <span class="keyword">new</span> DatasourcePool(datasourceConfigBean));</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> DatasourceDriverManager getInstance() <span class="keyword">throws</span> FileNotFoundException, SQLException&#123;</span><br><span class="line">		<span class="keyword">if</span>(datasourceDriverManager == <span class="keyword">null</span>)&#123;</span><br><span class="line">			<span class="keyword">synchronized</span>(DatasourceDriverManager.class)&#123;</span><br><span class="line">				<span class="keyword">if</span>(datasourceDriverManager == <span class="keyword">null</span>)&#123;</span><br><span class="line">					datasourceDriverManager = <span class="keyword">new</span> DatasourceDriverManager();</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> datasourceDriverManager;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">public</span> Connection getConnection(<span class="keyword">String</span> poolName) <span class="keyword">throws</span> SQLException&#123;</span><br><span class="line">		<span class="keyword">return</span> pools.<span class="built_in">get</span>(poolName).getConnection();</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">public</span> DatasourcePool getDatasourcePool(<span class="keyword">String</span> poolName)&#123;</span><br><span class="line">		<span class="keyword">return</span> pools.<span class="built_in">get</span>(poolName);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="u4E3B_u7A0B_u5E8F"><a href="#u4E3B_u7A0B_u5E8F" class="headerlink" title="主程序"></a>主程序</h4><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor"><span class="keyword">import</span> java.io.FileNotFoundException;</span></span><br><span class="line"><span class="preprocessor"><span class="keyword">import</span> java.sql.Connection;</span></span><br><span class="line"><span class="preprocessor"><span class="keyword">import</span> java.sql.DriverManager;</span></span><br><span class="line"><span class="preprocessor"><span class="keyword">import</span> java.sql.ResultSet;</span></span><br><span class="line"><span class="preprocessor"><span class="keyword">import</span> java.sql.SQLException;</span></span><br><span class="line"><span class="preprocessor"><span class="keyword">import</span> java.sql.Statement;</span></span><br><span class="line"><span class="preprocessor"><span class="keyword">import</span> java.util.ArrayList;</span></span><br><span class="line"><span class="preprocessor"><span class="keyword">import</span> java.util.List;</span></span><br><span class="line"><span class="preprocessor"><span class="keyword">import</span> java.util.concurrent.Callable;</span></span><br><span class="line"><span class="preprocessor"><span class="keyword">import</span> java.util.concurrent.ExecutionException;</span></span><br><span class="line"><span class="preprocessor"><span class="keyword">import</span> java.util.concurrent.ExecutorService;</span></span><br><span class="line"><span class="preprocessor"><span class="keyword">import</span> java.util.concurrent.Executors;</span></span><br><span class="line"><span class="preprocessor"><span class="keyword">import</span> java.util.concurrent.Future;</span></span><br><span class="line"><span class="preprocessor"><span class="keyword">import</span> java.util.concurrent.FutureTask;</span></span><br><span class="line"></span><br><span class="line"><span class="preprocessor"><span class="keyword">import</span> database.DatasourceDriverManager;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestDatasourceDriverManager</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> main(String[] args) throws FileNotFoundException, SQLException, InterruptedException, ExecutionException &#123;</span><br><span class="line">		<span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">		long start = System.currentTimeMillis();   </span><br><span class="line">		</span><br><span class="line">		ExecutorService executorService = Executors.newCachedThreadPool();</span><br><span class="line">		List&lt;Future&lt;Integer&gt;&gt; list = <span class="keyword">new</span> ArrayList&lt;Future&lt;Integer&gt;&gt;();</span><br><span class="line">		</span><br><span class="line">		<span class="comment">//运行时间：2306毫秒	线程数为5000</span></span><br><span class="line">		<span class="comment">//运行时间：510毫秒	线程数为400</span></span><br><span class="line">		<span class="keyword">for</span>(int loop=<span class="number">0</span>; loop&lt;<span class="number">400</span>; loop++)&#123;</span><br><span class="line">			Test041 test041 = <span class="keyword">new</span> Test041();</span><br><span class="line">			FutureTask task = <span class="keyword">new</span> FutureTask(test041);</span><br><span class="line">			list.add((Future&lt;Integer&gt;) executorService.submit(task));</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">		</span><br><span class="line">		<span class="comment">//Data source rejected establishment of connection,  message from server: "Too many connections"</span></span><br><span class="line">		</span><br><span class="line">		<span class="comment">//The last packet sent successfully to the server was 0 milliseconds ago. The driver has not received any packets from the server.</span></span><br><span class="line">		<span class="comment">//Communications link failure</span></span><br><span class="line">		</span><br><span class="line">		<span class="comment">//运行时间：3651毫秒</span></span><br><span class="line"><span class="comment">//		for(int loop=0; loop&lt;400; loop++)&#123;</span></span><br><span class="line"><span class="comment">//			Test042 test042 = new Test042();</span></span><br><span class="line"><span class="comment">//			FutureTask task = new FutureTask(test042);</span></span><br><span class="line"><span class="comment">//			list.add((Future&lt;Integer&gt;) executorService.submit(task));</span></span><br><span class="line"><span class="comment">//		&#125;</span></span><br><span class="line">		</span><br><span class="line"></span><br><span class="line">		<span class="keyword">for</span>(Future&lt;Integer&gt; future : list)&#123;</span><br><span class="line">			future.<span class="keyword">get</span>();</span><br><span class="line">		&#125;</span><br><span class="line">		DatasourceDriverManager.getInstance().getDatasourcePool(<span class="string">"Mysql"</span>).close();</span><br><span class="line">		</span><br><span class="line">		executorService.shutdown();</span><br><span class="line">		long end = System.currentTimeMillis();        </span><br><span class="line">	      System.out.println(<span class="string">"运行时间："</span>+(end-start)+<span class="string">"毫秒"</span>); </span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test041</span> <span class="keyword">implements</span> <span class="title">Callable</span>&lt;<span class="title">Integer</span>&gt;</span>&#123;</span><br><span class="line">	<span class="keyword">public</span> Integer call()&#123;</span><br><span class="line">		<span class="keyword">try</span>&#123;</span><br><span class="line">			Connection conn = DatasourceDriverManager.getInstance().getConnection(<span class="string">"Mysql"</span>);</span><br><span class="line">			String sql = <span class="string">"select * from robot"</span>;</span><br><span class="line">			Statement stat = conn.createStatement();</span><br><span class="line">			ResultSet rs = stat.executeQuery(sql);</span><br><span class="line">			<span class="keyword">while</span>(rs.next())&#123;</span><br><span class="line">				System.out.println(rs.getString(<span class="number">1</span>)+<span class="string">"\t"</span>+rs.getString(<span class="number">2</span>));</span><br><span class="line">			&#125;</span><br><span class="line">			rs.close();</span><br><span class="line">			stat.close();</span><br><span class="line">			DatasourceDriverManager.getInstance().getDatasourcePool(<span class="string">"Mysql"</span>).freeConnection(conn);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">			System.out.println(e.getMessage());</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test042</span> <span class="keyword">implements</span> <span class="title">Callable</span>&lt;<span class="title">Integer</span>&gt;</span>&#123;</span><br><span class="line">	<span class="keyword">public</span> Integer call()&#123;</span><br><span class="line">		<span class="keyword">try</span>&#123;</span><br><span class="line">			Connection conn = DriverManager.getConnection(<span class="string">"jdbc:mysql://192.168.91.201/robot"</span>, <span class="string">"robot"</span>, <span class="string">"robot"</span>);</span><br><span class="line">			String sql = <span class="string">"select * from robot"</span>;</span><br><span class="line">			Statement stat = conn.createStatement();</span><br><span class="line">			ResultSet rs = stat.executeQuery(sql);</span><br><span class="line">			<span class="keyword">while</span>(rs.next())&#123;</span><br><span class="line">				System.out.println(rs.getString(<span class="number">1</span>)+<span class="string">"\t"</span>+rs.getString(<span class="number">2</span>));</span><br><span class="line">			&#125;</span><br><span class="line">			rs.close();</span><br><span class="line">			stat.close();</span><br><span class="line">			conn.close();</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">			System.out.println(e.getMessage());</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[<p>经过上一篇开源数据库连接池如dbcp, c3p0等的介绍及使用后，本篇着手实现自己的一个数据库连接池。可以完成不同类型的数据库类型的连接池(mysql, sqlServer等)，设置最大连接数，实现获得连接，关闭连接，关闭数据库连接池，动态删除连接池，增加连接池，修改连接池等主要操作。主要文件有DatasourceConfigBean.java, DatasourceConfig.java, DatasourcePool.java, DatasourceDriverManager.java, 这些文件的作用后面会详细分析。<br>]]>
    
    </summary>
    
      <category term="数据库" scheme="http://jinpingwang.github.io/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
      <category term="数据库" scheme="http://jinpingwang.github.io/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[HTTP状态保持之Session与Cookie]]></title>
    <link href="http://jinpingwang.github.io/2016/04/24/web/HTTP%E7%8A%B6%E6%80%81%E4%BF%9D%E6%8C%81%E4%B9%8BSession%E4%B8%8ECookie/"/>
    <id>http://jinpingwang.github.io/2016/04/24/web/HTTP状态保持之Session与Cookie/</id>
    <published>2016-04-24T14:32:45.000Z</published>
    <updated>2016-04-28T02:36:35.544Z</updated>
    <content type="html"><![CDATA[<p>之前介绍了Servlet-api中javax.servlet.http包下的HttpSession接口与Cookie类的方法等内容。今天着重讲解Session与Cookie结合在一起如何完成服务器如何与客户端保持状态连接，以及讨论购物车下的实现方式。<br><a id="more"></a></p>
<h3 id="Session_uFF08URL_u91CD_u5199_uFF09"><a href="#Session_uFF08URL_u91CD_u5199_uFF09" class="headerlink" title="Session（URL重写）"></a>Session（URL重写）</h3><h4 id="u4F7F_u7528URL_u91CD_u5199_u7684_u60C5_u51B5"><a href="#u4F7F_u7528URL_u91CD_u5199_u7684_u60C5_u51B5" class="headerlink" title="使用URL重写的情况"></a>使用URL重写的情况</h4><p>如果浏览器禁用了cookie，则需要使用URL重写来保持服务器与客户端的状态。</p>
<h4 id="u5982_u4F55_u5224_u65AD_u662F_u5426_u9700_u8981URL_u91CD_u5199"><a href="#u5982_u4F55_u5224_u65AD_u662F_u5426_u9700_u8981URL_u91CD_u5199" class="headerlink" title="如何判断是否需要URL重写"></a>如何判断是否需要URL重写</h4><p>一开始时，服务器并不知道浏览器是否禁用了cookie，所以在第一次进行响应时可以通过URL重写与cookie设置。如果下一次浏览器访问时只有URL重写而没有cookie，则服务器知道浏览器禁止了cookie。但如果浏览器带回URL重写与cookie，则服务器知道浏览器没有禁止cookie，则往后的响应就不进行URL重写。</p>
<h3 id="Cookie+Session"><a href="#Cookie+Session" class="headerlink" title="Cookie+Session"></a>Cookie+Session</h3><p>客户端首次访问服务器时，服务器通过<code>request.getSession()</code>创建Session。在响应中添加sessionid的cookie返回给客户端。这样客户端与服务器就可以保持状态了。但是，因为cookie默认保存在机器给浏览器开辟的内存中，即在服务器创建新sessionid，并将其放进cookie时，使用cookie的setMaxAge(-1)方法，设置cookie在浏览器关闭前会保存在客户端内存中，即只要不关闭浏览器，新打开一个窗口，还是会把sessionid的cookie传回服务器。但如果关闭浏览器，就没了存储sessionID的cookie，这样向服务器发送新请求时，服务器就会创建新的session。另外session也在服务器内存中也是有生命周期，时间超时也会消失。所以，如果想解决浏览器退出时，sessionid的cookie不会消失，则就自己写个cookie覆盖掉服务器发送给客户端的的cookie，然后设置时间长一些，cookie就保存在硬盘上了。当然以上情况是在浏览器非隐身模式下，且没有禁用Cookie条件下。但如果是在隐身模式访问，则创建的全部 Cookie（不管有没有设置保存在客户端硬盘上） 都会在您关闭隐身窗口后删除。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">HttpSession session = request.getSession();</span><br><span class="line">Cookie cookie = <span class="keyword">new</span> Cookie(<span class="string">"JSESSIONID"</span>, session.getId());</span><br><span class="line">cookie.setMaxAge(<span class="number">40</span>*<span class="number">60</span>);</span><br><span class="line">response.addCookie(cookie);</span><br></pre></td></tr></table></figure></p>
<h3 id="u8D2D_u7269_u8F66"><a href="#u8D2D_u7269_u8F66" class="headerlink" title="购物车"></a>购物车</h3><p>因为用户打开一个网站添加到购物车后，关闭浏览器；使用另一个浏览器打开购物车。这时肯定是一个新的请求，会产生新sessionid，但服务器上原来浏览器的那个sessionid还存活着，所以这里需要考虑用原先存储在服务器上sessionid设置为这一个浏览器访问时的sessionid。购物车这一种还需要根据用户名密码与JSSESSIONID进行映射+mysql数据持久化。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>之前介绍了Servlet-api中javax.servlet.http包下的HttpSession接口与Cookie类的方法等内容。今天着重讲解Session与Cookie结合在一起如何完成服务器如何与客户端保持状态连接，以及讨论购物车下的实现方式。<br>]]>
    
    </summary>
    
      <category term="Cookie" scheme="http://jinpingwang.github.io/tags/Cookie/"/>
    
      <category term="Session" scheme="http://jinpingwang.github.io/tags/Session/"/>
    
      <category term="web" scheme="http://jinpingwang.github.io/tags/web/"/>
    
      <category term="web" scheme="http://jinpingwang.github.io/categories/web/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[基于json的序列化与反序列化]]></title>
    <link href="http://jinpingwang.github.io/2016/04/23/java/%E5%9F%BA%E4%BA%8Ejson%E7%9A%84%E5%BA%8F%E5%88%97%E5%8C%96%E4%B8%8E%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    <id>http://jinpingwang.github.io/2016/04/23/java/基于json的序列化与反序列化/</id>
    <published>2016-04-23T01:11:36.000Z</published>
    <updated>2016-06-16T11:48:26.879Z</updated>
    <content type="html"><![CDATA[<p>json是一种轻量级的数据交换语言，以文字为基础，且易于让人阅读。将对象序列化成json格式，可以在网络上非常方便的进行传输，且各个平台几乎都拥有成熟的工具，能很快地将json反序列化为其对应语言所需要的格式。本篇介绍了常用的两种json反序列化工具：fastjson与jackson。<br><a id="more"></a></p>
<h3 id="u6E90_u7801"><a href="#u6E90_u7801" class="headerlink" title="源码"></a>源码</h3><h4 id="fastjson"><a href="#fastjson" class="headerlink" title="fastjson"></a>fastjson</h4><h5 id="Maven"><a href="#Maven" class="headerlink" title="Maven"></a>Maven</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="title">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">artifactId</span>&gt;</span>fastjson<span class="tag">&lt;/<span class="title">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">version</span>&gt;</span>1.2.6<span class="tag">&lt;/<span class="title">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h5 id="POJO"><a href="#POJO" class="headerlink" title="POJO"></a>POJO</h5><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">Person</span>&#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">int</span> id;</span><br><span class="line">	<span class="keyword">public</span> String name;</span><br><span class="line">	<span class="keyword">public</span> List&lt;String&gt; hobby;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">Person</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">Person</span>(<span class="params"><span class="keyword">int</span> id, String name, List&lt;String&gt; hobby</span>)</span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.id = id;</span><br><span class="line">		<span class="keyword">this</span>.name = name;</span><br><span class="line">		<span class="keyword">this</span>.hobby = hobby;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="u4E3B_u7A0B_u5E8F"><a href="#u4E3B_u7A0B_u5E8F" class="headerlink" title="主程序"></a>主程序</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSON;</span><br><span class="line"></span><br><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">Test08</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	public static <span class="keyword">void</span> main(<span class="built_in">String</span>[] args) &#123;</span><br><span class="line">		<span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">		<span class="comment">//构建待序列化对象</span></span><br><span class="line">		List&lt;<span class="built_in">String</span>&gt; hobby = <span class="keyword">new</span> ArrayList&lt;<span class="built_in">String</span>&gt;();</span><br><span class="line">		hobby.add(<span class="string">"3"</span>);</span><br><span class="line">		hobby.add(<span class="string">"4"</span>);</span><br><span class="line">		Person person = <span class="keyword">new</span> Person(<span class="number">1</span>, <span class="string">"kitty"</span>, hobby);</span><br><span class="line">		</span><br><span class="line">		<span class="comment">//序列化</span></span><br><span class="line">		<span class="built_in">String</span> personJson = <span class="literal">null</span>;</span><br><span class="line">		personJson = <span class="built_in">JSON</span>.toJSONString(person);</span><br><span class="line"></span><br><span class="line">		System.out.println(personJson);</span><br><span class="line">		</span><br><span class="line">		<span class="comment">//反序列化</span></span><br><span class="line">		Person personResult = <span class="built_in">JSON</span>.parseObject(personJson, Person.class);</span><br><span class="line">		System.out.println(personResult.id+<span class="string">"\t"</span>+personResult.name+<span class="string">"\t"</span>+personResult.hobby);		</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//输出结果</span></span><br><span class="line">&#123;<span class="string">"hobby"</span>:[<span class="string">"3"</span>,<span class="string">"4"</span>],<span class="string">"id"</span>:<span class="number">1</span>,<span class="string">"name"</span>:<span class="string">"kitty"</span>&#125;</span><br><span class="line"><span class="number">1</span>	kitty	[<span class="number">3</span>, <span class="number">4</span>]</span><br></pre></td></tr></table></figure>
<h4 id="jackson"><a href="#jackson" class="headerlink" title="jackson"></a>jackson</h4><h5 id="Maven-1"><a href="#Maven-1" class="headerlink" title="Maven"></a>Maven</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">groupId</span>&gt;</span>org.codehaus.jackson<span class="tag">&lt;/<span class="title">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">artifactId</span>&gt;</span>jackson-mapper-asl<span class="tag">&lt;/<span class="title">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">version</span>&gt;</span>1.9.13<span class="tag">&lt;/<span class="title">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h5 id="POJO-1"><a href="#POJO-1" class="headerlink" title="POJO"></a>POJO</h5><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">Person</span>&#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">int</span> id;</span><br><span class="line">	<span class="keyword">public</span> String name;</span><br><span class="line">	<span class="keyword">public</span> List&lt;Integer&gt; hobby;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">Person</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">Person</span>(<span class="params"><span class="keyword">int</span> id, String name, List&lt;Integer&gt; hobby</span>)</span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.id = id;</span><br><span class="line">		<span class="keyword">this</span>.name = name;</span><br><span class="line">		<span class="keyword">this</span>.hobby = hobby;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="u4E3B_u7A0B_u5E8F-1"><a href="#u4E3B_u7A0B_u5E8F-1" class="headerlink" title="主程序"></a>主程序</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">package com.uestc.json;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.StringWriter;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.codehaus.jackson.JsonFactory;</span><br><span class="line"><span class="keyword">import</span> org.codehaus.jackson.JsonGenerator;</span><br><span class="line"><span class="keyword">import</span> org.codehaus.jackson.annotate.JsonAutoDetect.Visibility;</span><br><span class="line"><span class="keyword">import</span> org.codehaus.jackson.annotate.JsonMethod;</span><br><span class="line"><span class="keyword">import</span> org.codehaus.jackson.map.ObjectMapper;</span><br><span class="line"></span><br><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">Test01</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	public static <span class="keyword">void</span> main(<span class="built_in">String</span>[] args) throws IOException &#123;</span><br><span class="line">		<span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">		<span class="comment">//构建待序列化对象</span></span><br><span class="line">		List&lt;Integer&gt; hobby = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</span><br><span class="line">		hobby.add(<span class="number">3</span>);</span><br><span class="line">		hobby.add(<span class="number">4</span>);</span><br><span class="line">		Person person = <span class="keyword">new</span> Person(<span class="number">1</span>, <span class="string">"kitty"</span>, hobby);</span><br><span class="line">		</span><br><span class="line">		<span class="comment">//序列化</span></span><br><span class="line">		<span class="built_in">String</span> personJson = <span class="literal">null</span>;</span><br><span class="line">		ObjectMapper mapper = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line">		mapper.setVisibility(JsonMethod.FIELD, Visibility.ANY);</span><br><span class="line">		StringWriter sw = <span class="keyword">new</span> StringWriter();</span><br><span class="line">		JsonGenerator gen = <span class="keyword">new</span> JsonFactory().createJsonGenerator(sw);</span><br><span class="line">		mapper.writeValue(gen, person);</span><br><span class="line">		gen.close();</span><br><span class="line">		personJson = sw.toString();</span><br><span class="line">		sw.close();</span><br><span class="line"></span><br><span class="line">		System.out.println(personJson);</span><br><span class="line">		</span><br><span class="line">		<span class="comment">//反序列化</span></span><br><span class="line">		Person personResult = (Person)mapper.readValue(personJson, Person.class);</span><br><span class="line">		System.out.println(personResult.id+<span class="string">"\t"</span>+personResult.name+<span class="string">"\t"</span>+personResult.hobby);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输出结果：</span><br><span class="line">&#123;<span class="string">"id"</span>:<span class="number">1</span>,<span class="string">"name"</span>:<span class="string">"kitty"</span>,<span class="string">"hobby"</span>:[<span class="number">3</span>,<span class="number">4</span>]&#125;</span><br><span class="line"><span class="number">1</span>	kitty	[<span class="number">3</span>, <span class="number">4</span>]</span><br></pre></td></tr></table></figure>
<h3 id="u89E3_u6790"><a href="#u89E3_u6790" class="headerlink" title="解析"></a>解析</h3><h4 id="fastjson-1"><a href="#fastjson-1" class="headerlink" title="fastjson"></a>fastjson</h4><p>默认情况下fastjson对private的数据成员不会进行序列化，另外需要序列化的类需要有一个默认的构造函数。此外重要的一点是在默认情况下，fastjson有开启循环引用。</p>
<h4 id="jackson-1"><a href="#jackson-1" class="headerlink" title="jackson"></a>jackson</h4><p>有三点需要注意：<br>1：如果在序列化非public域时，需要在创建完ObjectMapper后添加这一句：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">mapper</span><span class="class">.setVisibility</span>(<span class="tag">JsonMethod</span><span class="class">.FIELD</span>, <span class="tag">Visibility</span><span class="class">.ANY</span>);</span><br></pre></td></tr></table></figure></p>
<p>2：对于需要序列化的类，需要有一个默认的构造函数，如果没有默认的构造函数会抛出异常。<br>3：jackson默认情况对循环引用处理会StackOverFlow。即没有对循环引用进行处理。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>json是一种轻量级的数据交换语言，以文字为基础，且易于让人阅读。将对象序列化成json格式，可以在网络上非常方便的进行传输，且各个平台几乎都拥有成熟的工具，能很快地将json反序列化为其对应语言所需要的格式。本篇介绍了常用的两种json反序列化工具：fastjson与jackson。<br>]]>
    
    </summary>
    
      <category term="java" scheme="http://jinpingwang.github.io/tags/java/"/>
    
      <category term="java" scheme="http://jinpingwang.github.io/categories/java/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[dbcp,c3p0及商用数据库连接池的应用]]></title>
    <link href="http://jinpingwang.github.io/2016/04/21/database/dbcp,c3p0%E5%8F%8A%E5%95%86%E7%94%A8%E6%95%B0%E6%8D%AE%E5%BA%93%E8%BF%9E%E6%8E%A5%E6%B1%A0%E7%9A%84%E5%BA%94%E7%94%A8/"/>
    <id>http://jinpingwang.github.io/2016/04/21/database/dbcp,c3p0及商用数据库连接池的应用/</id>
    <published>2016-04-21T04:16:38.000Z</published>
    <updated>2016-06-14T03:09:22.966Z</updated>
    <content type="html"><![CDATA[<p>本篇介绍了数据库连接的优势及使用。包括了开源数据库连接池dbcp, c3p0, tomcat中的JNDI方式的配置与使用，从maven配置，连接池配置文件，测试代码以及mysql中的实时观测，对这些开源数据库进行了梳理与整合。<br><a id="more"></a></p>
<h3 id="u57FA_u7840_u7B80_u4ECB"><a href="#u57FA_u7840_u7B80_u4ECB" class="headerlink" title="基础简介"></a>基础简介</h3><h4 id="JDBC"><a href="#JDBC" class="headerlink" title="JDBC"></a>JDBC</h4><p>JDBC，Java Database Connection，即Java数据库连接。它是应用程序与数据库沟通的桥梁，它为数据库应用开发人员提供一种标准的应用程序设计接口，使开发人员可以用纯Java语言编写完整的数据库应用程序。JDBC提供两种API，分别是面向开发人员的API和面向底层的JDBC驱动程序API。平常我们数据库应用开发人员使用的就是前一种API。</p>
<h3 id="u666E_u901A_u6570_u636E_u5E93_u8FDE_u63A5"><a href="#u666E_u901A_u6570_u636E_u5E93_u8FDE_u63A5" class="headerlink" title="普通数据库连接"></a>普通数据库连接</h3><h4 id="u4EE3_u7801"><a href="#u4EE3_u7801" class="headerlink" title="代码"></a>代码</h4><h4 id="u7F3A_u70B9"><a href="#u7F3A_u70B9" class="headerlink" title="缺点"></a>缺点</h4><p>1：连接耗时<br>在需要数据库连接的时候，就建立一次数据库连接。而建立连接是一个费时的活动，每次要0.05s~1s的时间，而且系统还要分配内存资源。所以多用户频繁的进行数据库连接操作势必会占用很多系统资源，系统响应速度会下降，甚至造成服务器的崩溃。<br>2：异常未关闭连接<br>每一次数据库连接，使用完后都需要断开。如果程序出现异常而未能关闭，将会导致数据库系统中的内存泄漏，从而会导致重启数据库。<br>3：连接数的控制<br>不能控制被创建的连接对象数，系统资源会被毫无顾及的分配出去，如果连接数过多，也可能导致内存泄漏。<br><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">/<span class="keyword">*</span><span class="keyword">*</span></span><br><span class="line"> <span class="keyword">*</span> mysql默认连接数是151，可以通过/etc/mysql/my.cnf设置</span><br><span class="line"> <span class="keyword">*</span> 将<span class="comment">#注释去掉，在后面修改成自己的并发数，然后重启数据库即可生效</span></span><br><span class="line"> <span class="keyword">*</span>/</span><br><span class="line"><span class="comment">#max_connections = 100</span></span><br></pre></td></tr></table></figure></p>
<h3 id="u6570_u636E_u5E93_u8FDE_u63A5_u6C60"><a href="#u6570_u636E_u5E93_u8FDE_u63A5_u6C60" class="headerlink" title="数据库连接池"></a>数据库连接池</h3><h4 id="u76F8_u5173_u77E5_u8BC6_u70B9"><a href="#u76F8_u5173_u77E5_u8BC6_u70B9" class="headerlink" title="相关知识点"></a>相关知识点</h4><h5 id="u6700_u5C0F_u8FDE_u63A5_u6570"><a href="#u6700_u5C0F_u8FDE_u63A5_u6570" class="headerlink" title="最小连接数"></a>最小连接数</h5><p>设置太小，系统启动快，空闲时占用内存小<br>设置太大，系统启动慢，空闲时占用内存大</p>
<h5 id="u6700_u5927_u8FDE_u63A5_u6570"><a href="#u6700_u5927_u8FDE_u63A5_u6570" class="headerlink" title="最大连接数"></a>最大连接数</h5><p>设置太小，则等待队列等待数多，响应慢</p>
<h4 id="u5206_u7C7B"><a href="#u5206_u7C7B" class="headerlink" title="分类"></a>分类</h4><h5 id="u5F00_u6E90_u6570_u636E_u5E93_u8FDE_u63A5_u6C60"><a href="#u5F00_u6E90_u6570_u636E_u5E93_u8FDE_u63A5_u6C60" class="headerlink" title="开源数据库连接池"></a>开源数据库连接池</h5><p>DBCP，即DataBase Connection Pool。一般连接数设置为100。<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">//maven依赖</span><br><span class="line"><span class="tag">&lt;<span class="title">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">groupId</span>&gt;</span>commons-dbcp<span class="tag">&lt;/<span class="title">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">artifactId</span>&gt;</span>commons-dbcp<span class="tag">&lt;/<span class="title">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">version</span>&gt;</span>1.4<span class="tag">&lt;/<span class="title">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">groupId</span>&gt;</span>commons-pool<span class="tag">&lt;/<span class="title">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">artifactId</span>&gt;</span>commons-pool<span class="tag">&lt;/<span class="title">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">version</span>&gt;</span>1.6<span class="tag">&lt;/<span class="title">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="title">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="title">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">version</span>&gt;</span>5.1.30<span class="tag">&lt;/<span class="title">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">//properties配置，位置于maven工程中src/main/resources目录下</span><br><span class="line"><span class="constant">driverClassName</span>=com.mysql.jdbc.Driver</span><br><span class="line"><span class="constant">url</span>=jdbc:mysql://192.168.91.201:3306/robot</span><br><span class="line"><span class="constant">username</span>=robot</span><br><span class="line"><span class="constant">password</span>=robot</span><br><span class="line"><span class="constant">initialSize</span>=10</span><br><span class="line"><span class="constant">maxActive</span>=50</span><br><span class="line"><span class="constant">maxIdle</span>=20</span><br><span class="line"><span class="constant">minIdle</span>=5</span><br><span class="line"><span class="constant">maxWait</span>=60000</span><br><span class="line"><span class="constant">connectionProperties</span>=useUnicode=true;characterEncoding=UTF-8</span><br><span class="line"><span class="constant">defaultAutoCommit</span>=true</span><br><span class="line"><span class="constant">defaultReadOnly</span>=</span><br><span class="line"><span class="constant">defaultTransactionsIsolation</span>=READ_UNCOMMITTED</span><br></pre></td></tr></table></figure>
<figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line"> * DataSource类，使用单例模式</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">package</span> edu.uestc.DataSource;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.ResultSet;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"><span class="keyword">import</span> java.sql.Statement;</span><br><span class="line"><span class="keyword">import</span> java.util.Properties;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.sql.DataSource;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.dbcp.BasicDataSourceFactory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DbcpDataSource</span> </span>&#123;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">static</span> DbcpDataSource dbcpDataSource;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> DataSource dataSource;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">private</span> <span class="title">DbcpDataSource</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">		InputStream in = <span class="keyword">new</span> FileInputStream(DbcpDataSource.class.getResource(<span class="string">"/dbcp.properties"</span>).getPath());</span><br><span class="line">		Properties property = <span class="keyword">new</span> Properties();</span><br><span class="line">		property.load(in);</span><br><span class="line">		dataSource = BasicDataSourceFactory.createDataSource(property);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="function">DbcpDataSource <span class="title">getInstance</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(dbcpDataSource == <span class="keyword">null</span>)&#123;</span><br><span class="line">			<span class="keyword">synchronized</span>(DbcpDataSource.class)&#123;</span><br><span class="line">				<span class="keyword">if</span>(dbcpDataSource == <span class="keyword">null</span>)&#123;</span><br><span class="line">					dbcpDataSource = <span class="keyword">new</span> DbcpDataSource();</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> dbcpDataSource;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">public</span> <span class="function">Connection <span class="title">getConnection</span><span class="params">()</span> <span class="keyword">throws</span> SQLException</span>&#123;</span><br><span class="line">		<span class="function"><span class="keyword">return</span> dataSource.<span class="title">getConnection</span><span class="params">()</span></span>;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">close</span><span class="params">(Connection conn, Statement stat, ResultSet rs)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(rs != <span class="keyword">null</span>)&#123;</span><br><span class="line">			<span class="keyword">try</span> &#123;</span><br><span class="line">				rs.close();</span><br><span class="line">			&#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">				<span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">				e.printStackTrace();</span><br><span class="line">			&#125;</span><br><span class="line">			rs = <span class="keyword">null</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">if</span>(stat != <span class="keyword">null</span>)&#123;</span><br><span class="line">			<span class="keyword">try</span> &#123;</span><br><span class="line">				stat.close();</span><br><span class="line">			&#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">				<span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">				e.printStackTrace();</span><br><span class="line">			&#125;</span><br><span class="line">			stat = <span class="keyword">null</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">if</span>(conn != <span class="keyword">null</span>)&#123;</span><br><span class="line">			<span class="keyword">try</span> &#123;</span><br><span class="line">				conn.close();</span><br><span class="line">			&#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">				<span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">				e.printStackTrace();</span><br><span class="line">			&#125;</span><br><span class="line">			conn = <span class="keyword">null</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line"> * 测试线程类</span><br><span class="line"> */</span></span><br><span class="line"> <span class="keyword">package</span> edu.uestc.DataSource;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.ResultSet;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"><span class="keyword">import</span> java.sql.Statement;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> TestDbcpDataSource <span class="keyword">implements</span> Runnable&#123;</span><br><span class="line">	@Test</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> run() &#123;</span><br><span class="line">		System.out.<span class="keyword">println</span>(<span class="string">"start"</span>);</span><br><span class="line">		Connection conn = <span class="keyword">null</span>;</span><br><span class="line">		Statement stat = <span class="keyword">null</span>;</span><br><span class="line">		ResultSet rs = <span class="keyword">null</span>;</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			<span class="keyword">try</span> &#123;</span><br><span class="line">				conn = DbcpDataSource.getInstance().getConnection();</span><br><span class="line">			&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">				<span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">				e.printStackTrace();</span><br><span class="line">			&#125;</span><br><span class="line">			String sql = <span class="string">"select * from robot"</span>;</span><br><span class="line">			stat = conn.createStatement();</span><br><span class="line">			rs = stat.executeQuery(sql);</span><br><span class="line">			<span class="keyword">while</span>(rs.<span class="keyword">next</span>())&#123;</span><br><span class="line">				System.out.<span class="keyword">println</span>(rs.getString(<span class="number">1</span>)+<span class="string">"\t"</span>+rs.getString(<span class="number">2</span>));</span><br><span class="line">			&#125;</span><br><span class="line">			</span><br><span class="line">		&#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">			<span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">finally</span> &#123;</span><br><span class="line">			<span class="keyword">try</span> &#123;</span><br><span class="line">				DbcpDataSource.getInstance().close(conn, stat, rs);</span><br><span class="line">				<span class="keyword">try</span> &#123;</span><br><span class="line">					<span class="keyword">int</span> time = (<span class="keyword">int</span>)(Math.random()*<span class="number">3000</span>);</span><br><span class="line">					</span><br><span class="line">					Thread.sleep(time);</span><br><span class="line">				&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">					<span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">					e.printStackTrace();</span><br><span class="line">				&#125;</span><br><span class="line">			&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">				<span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">				e.printStackTrace();</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line"> * 主线程</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">package</span> edu.uestc.DataSource;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> class Test01 &#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> main(<span class="keyword">String</span>[] args) &#123;</span><br><span class="line">		<span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">		<span class="keyword">for</span>(<span class="built_in">int</span> <span class="built_in">loop</span>=<span class="number">0</span> ;<span class="built_in">loop</span>&lt;<span class="number">40</span>; <span class="built_in">loop</span>++)&#123;</span><br><span class="line">			TestDbcpDataSource test = <span class="keyword">new</span> TestDbcpDataSource();</span><br><span class="line">			Thread t = <span class="keyword">new</span> Thread(test);</span><br><span class="line">			t.start();</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">/<span class="keyword">*</span><span class="keyword">*</span></span><br><span class="line"> <span class="keyword">*</span> 结果，登录mysql，使用命令</span><br><span class="line"> <span class="keyword">*</span> show status;</span><br><span class="line"> <span class="keyword">*</span> 查看可得这次运行Threads_connected数为21（每次运行会有所不同）</span><br><span class="line"> <span class="keyword">*</span> 默认数据库是启动10条连接，而程序启动40个连接，但并没有创建40个，而是21个</span><br><span class="line"> <span class="keyword">*</span> 这正是数据库连接池的作用。</span><br><span class="line"> <span class="keyword">*</span>/</span><br><span class="line"> </span><br><span class="line">|<span class="string"> Tc_log_page_size                         </span>|<span class="string"> 0           </span>|</span><br><span class="line">|<span class="string"> Tc_log_page_waits                        </span>|<span class="string"> 0           </span>|</span><br><span class="line">|<span class="string"> Threads_cached                           </span>|<span class="string"> 8           </span>|</span><br><span class="line">|<span class="string"> Threads_connected                        </span>|<span class="string"> 21          </span>|</span><br><span class="line">|<span class="string"> Threads_created                          </span>|<span class="string"> 211         </span>|</span><br><span class="line">|<span class="string"> Threads_running                          </span>|<span class="string"> 1           </span>|</span><br><span class="line">|<span class="string"> Uptime                                   </span>|<span class="string"> 5268        </span>|</span><br><span class="line">|<span class="string"> Uptime_since_flush_status                </span>|<span class="string"> 5268        </span>|</span><br><span class="line">+------------------------------------------+-------------+</span><br></pre></td></tr></table></figure>
<p>C3P0，Hibernate与Spring都使用些连接池。<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">//maven依赖</span><br><span class="line"><span class="tag">&lt;<span class="title">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">groupId</span>&gt;</span>com.mchange<span class="tag">&lt;/<span class="title">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">artifactId</span>&gt;</span>c3p0<span class="tag">&lt;/<span class="title">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">version</span>&gt;</span>0.9.5<span class="tag">&lt;/<span class="title">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">groupId</span>&gt;</span>com.mchange<span class="tag">&lt;/<span class="title">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">artifactId</span>&gt;</span>mchange-commons-java<span class="tag">&lt;/<span class="title">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">version</span>&gt;</span>0.2.10<span class="tag">&lt;/<span class="title">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="title">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="title">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">version</span>&gt;</span>5.1.30<span class="tag">&lt;/<span class="title">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">//c3p0-config.xml配置，位置于maven工程中src/main/resources目录下</span><br><span class="line"><span class="tag">&lt;<span class="title">c3p0-config</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!-- c3p0默认缺少配置，即ComboPooledDataSource c3p0DataSource = new ComboPooledDataSource() --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="title">default-config</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="title">property</span> <span class="attribute">name</span>=<span class="value">"driverClass"</span>&gt;</span>com.mysql.jdbc.Driver<span class="tag">&lt;/<span class="title">property</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="title">property</span> <span class="attribute">name</span>=<span class="value">"jdbcUrl"</span>&gt;</span>jdbc:mysql://192.168.91.201:3306/robot<span class="tag">&lt;/<span class="title">property</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="title">property</span> <span class="attribute">name</span>=<span class="value">"user"</span>&gt;</span>robot<span class="tag">&lt;/<span class="title">property</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="title">property</span> <span class="attribute">name</span>=<span class="value">"password"</span>&gt;</span>robot<span class="tag">&lt;/<span class="title">property</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="title">property</span> <span class="attribute">name</span>=<span class="value">"acquireIncrement"</span>&gt;</span>5<span class="tag">&lt;/<span class="title">property</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="title">property</span> <span class="attribute">name</span>=<span class="value">"initialPoolSize"</span>&gt;</span>10<span class="tag">&lt;/<span class="title">property</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="title">property</span> <span class="attribute">name</span>=<span class="value">"minPoolSize"</span>&gt;</span>5<span class="tag">&lt;/<span class="title">property</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="title">property</span> <span class="attribute">name</span>=<span class="value">"maxPoolSize"</span>&gt;</span>20<span class="tag">&lt;/<span class="title">property</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="title">default-config</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">&lt;!-- c3p0命名配置，即ComboPooledDataSource c3p0DataSource = new ComboPooledDataSource("mysql") --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="title">named-config</span> <span class="attribute">name</span>=<span class="value">"mysql"</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="title">property</span> <span class="attribute">name</span>=<span class="value">"driverClass"</span>&gt;</span>com.mysql.jdbc.Driver<span class="tag">&lt;/<span class="title">property</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="title">property</span> <span class="attribute">name</span>=<span class="value">"jdbcUrl"</span>&gt;</span>jdbc:mysql://192.168.91.201:3306/robot<span class="tag">&lt;/<span class="title">property</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="title">property</span> <span class="attribute">name</span>=<span class="value">"user"</span>&gt;</span>robot<span class="tag">&lt;/<span class="title">property</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="title">property</span> <span class="attribute">name</span>=<span class="value">"password"</span>&gt;</span>robot<span class="tag">&lt;/<span class="title">property</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 		&lt;property name="acquireIncrement"&gt;15&lt;/property&gt; --&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="title">property</span> <span class="attribute">name</span>=<span class="value">"initialPoolSize"</span>&gt;</span>16<span class="tag">&lt;/<span class="title">property</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="title">property</span> <span class="attribute">name</span>=<span class="value">"minPoolSize"</span>&gt;</span>6<span class="tag">&lt;/<span class="title">property</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="title">property</span> <span class="attribute">name</span>=<span class="value">"maxPoolSize"</span>&gt;</span>40<span class="tag">&lt;/<span class="title">property</span>&gt;</span>	</span><br><span class="line">	<span class="tag">&lt;/<span class="title">named-config</span>&gt;</span></span><br><span class="line">	</span><br><span class="line"><span class="tag">&lt;/<span class="title">c3p0-config</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line"> * DataSource类，使用单例模式</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">package</span> edu.uestc.DataSource;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.ResultSet;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"><span class="keyword">import</span> java.sql.Statement;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.sql.DataSource;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.mchange.v2.c3p0.ComboPooledDataSource;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">C3p0DataSource</span> </span>&#123;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">static</span> C3p0DataSource c3p0DataSource;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> DataSource dataSource;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">private</span> <span class="title">C3p0DataSource</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">		dataSource = <span class="keyword">new</span> ComboPooledDataSource(<span class="string">"mysql"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="function">C3p0DataSource <span class="title">getInstance</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(c3p0DataSource == <span class="keyword">null</span>)&#123;</span><br><span class="line">			<span class="keyword">synchronized</span>(C3p0DataSource.class)&#123;</span><br><span class="line">				<span class="keyword">if</span>(c3p0DataSource == <span class="keyword">null</span>)&#123;</span><br><span class="line">					c3p0DataSource = <span class="keyword">new</span> C3p0DataSource();</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> c3p0DataSource;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">public</span> <span class="function">Connection <span class="title">getConnection</span><span class="params">()</span> <span class="keyword">throws</span> SQLException</span>&#123;</span><br><span class="line">		<span class="function"><span class="keyword">return</span> dataSource.<span class="title">getConnection</span><span class="params">()</span></span>;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">close</span><span class="params">(Connection conn, Statement stat, ResultSet rs)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(rs != <span class="keyword">null</span>)&#123;</span><br><span class="line">			<span class="keyword">try</span> &#123;</span><br><span class="line">				rs.close();</span><br><span class="line">			&#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">				<span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">				e.printStackTrace();</span><br><span class="line">			&#125;</span><br><span class="line">			rs = <span class="keyword">null</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">if</span>(stat != <span class="keyword">null</span>)&#123;</span><br><span class="line">			<span class="keyword">try</span> &#123;</span><br><span class="line">				stat.close();</span><br><span class="line">			&#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">				<span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">				e.printStackTrace();</span><br><span class="line">			&#125;</span><br><span class="line">			stat = <span class="keyword">null</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">if</span>(conn != <span class="keyword">null</span>)&#123;</span><br><span class="line">			<span class="keyword">try</span> &#123;</span><br><span class="line">				conn.close();</span><br><span class="line">			&#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">				<span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">				e.printStackTrace();</span><br><span class="line">			&#125;</span><br><span class="line">			conn = <span class="keyword">null</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line"> * 测试线程类</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">package</span> edu.uestc.DataSource;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.ResultSet;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"><span class="keyword">import</span> java.sql.Statement;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> TestC3p0DataSource <span class="keyword">implements</span> Runnable&#123;</span><br><span class="line">	@Test</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> run() &#123;</span><br><span class="line">		System.out.<span class="keyword">println</span>(<span class="string">"start"</span>);</span><br><span class="line">		Connection conn = <span class="keyword">null</span>;</span><br><span class="line">		Statement stat = <span class="keyword">null</span>;</span><br><span class="line">		ResultSet rs = <span class="keyword">null</span>;</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			<span class="keyword">try</span> &#123;</span><br><span class="line">				conn = C3p0DataSource.getInstance().getConnection();</span><br><span class="line">			&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">				<span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">				e.printStackTrace();</span><br><span class="line">			&#125;</span><br><span class="line">			String sql = <span class="string">"select * from robot"</span>;</span><br><span class="line">			stat = conn.createStatement();</span><br><span class="line">			rs = stat.executeQuery(sql);</span><br><span class="line">			<span class="keyword">while</span>(rs.<span class="keyword">next</span>())&#123;</span><br><span class="line">				System.out.<span class="keyword">println</span>(rs.getString(<span class="number">1</span>)+<span class="string">"\t"</span>+rs.getString(<span class="number">2</span>));</span><br><span class="line">			&#125;</span><br><span class="line">			</span><br><span class="line">		&#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">			<span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">finally</span> &#123;</span><br><span class="line">			<span class="keyword">try</span> &#123;</span><br><span class="line">				DbcpDataSource.getInstance().close(conn, stat, rs);</span><br><span class="line">				<span class="keyword">try</span> &#123;</span><br><span class="line">				<span class="comment">//	int time = (int)(Math.random()*3000);</span></span><br><span class="line">					<span class="keyword">int</span> time = (<span class="keyword">int</span>)(<span class="number">300000</span>);</span><br><span class="line">					</span><br><span class="line">					Thread.sleep(time);</span><br><span class="line">				&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">					<span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">					e.printStackTrace();</span><br><span class="line">				&#125;</span><br><span class="line">			&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">				<span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">				e.printStackTrace();</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line"> * 主线程</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">package</span> edu.uestc.DataSource;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> class Test02 &#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> main(<span class="keyword">String</span>[] args) &#123;</span><br><span class="line">		<span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">		<span class="keyword">for</span>(<span class="built_in">int</span> <span class="built_in">loop</span>=<span class="number">0</span> ;<span class="built_in">loop</span>&lt;<span class="number">20</span>; <span class="built_in">loop</span>++)&#123;</span><br><span class="line">			TestC3p0DataSource test = <span class="keyword">new</span> TestC3p0DataSource();</span><br><span class="line">			Thread t = <span class="keyword">new</span> Thread(test);</span><br><span class="line">			t.start();</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">/<span class="keyword">*</span><span class="keyword">*</span></span><br><span class="line"> <span class="keyword">*</span> 结果，登录mysql，使用命令</span><br><span class="line"> <span class="keyword">*</span> show status;</span><br><span class="line"> <span class="keyword">*</span> 查看可得这次运行Threads_connected数为41</span><br><span class="line"> <span class="keyword">*</span> 与DBCP不同的是，c3p0的MaxPoolSize，MinPoolSize的配置不像是DBCP中一样，显示出来的并不是MaxPoolSize与MinPoolSize，感觉是c3p0中有进行修改</span><br><span class="line"> <span class="keyword">*</span>/</span><br><span class="line"> </span><br><span class="line">|<span class="string"> Tc_log_page_waits                        </span>|<span class="string"> 0           </span>|</span><br><span class="line">|<span class="string"> Threads_cached                           </span>|<span class="string"> 0           </span>|</span><br><span class="line">|<span class="string"> Threads_connected                        </span>|<span class="string"> 41          </span>|</span><br><span class="line">|<span class="string"> Threads_created                          </span>|<span class="string"> 1276        </span>|</span><br><span class="line">|<span class="string"> Threads_running                          </span>|<span class="string"> 1           </span>|</span><br><span class="line">|<span class="string"> Uptime                                   </span>|<span class="string"> 53621       </span>|</span><br><span class="line">|<span class="string"> Uptime_since_flush_status                </span>|<span class="string"> 53621       </span>|</span><br><span class="line">+------------------------------------------+-------------+</span><br></pre></td></tr></table></figure>
<p>Tomcat数据源<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">//maven依赖</span><br><span class="line"><span class="tag">&lt;<span class="title">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="title">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="title">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">version</span>&gt;</span>5.1.30<span class="tag">&lt;/<span class="title">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<figure class="highlight vhdl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">//<span class="keyword">context</span>.xml配置，放置在/webapp/META-INF目录下</span><br><span class="line">&lt;<span class="keyword">Context</span>&gt;</span><br><span class="line">	&lt;Resource </span><br><span class="line">		name=<span class="string">"jdbc/datasource"</span></span><br><span class="line">		auth=<span class="string">"Container"</span></span><br><span class="line">		<span class="keyword">type</span>=<span class="string">"javax.sql.DataSource"</span></span><br><span class="line">		username=<span class="string">"robot"</span></span><br><span class="line">		password=<span class="string">"robot"</span></span><br><span class="line">		driverClassName=<span class="string">"com.mysql.jdbc.Driver"</span></span><br><span class="line">		url=<span class="string">"jdbc:mysql://192.168.91.201:3306/robot"</span></span><br><span class="line">		initialSize=<span class="string">"20"</span>  </span><br><span class="line">		maxActive=<span class="string">"30"</span></span><br><span class="line">		maxIdle=<span class="string">"25"</span> </span><br><span class="line">        minIdle=<span class="string">"20"</span></span><br><span class="line">        maxWait=<span class="string">"10000"</span> /&gt;</span><br><span class="line">&lt;/<span class="keyword">Context</span>&gt;</span><br></pre></td></tr></table></figure>
<figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line"> * DataSource类，使用单例模式</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">package</span> edu.uestc.DataSource;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.ResultSet;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"><span class="keyword">import</span> java.sql.Statement;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.naming.Context;</span><br><span class="line"><span class="keyword">import</span> javax.naming.InitialContext;</span><br><span class="line"><span class="keyword">import</span> javax.sql.DataSource;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JndiDataSource</span> </span>&#123;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">static</span> JndiDataSource jndiDataSource;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> DataSource dataSource;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">private</span> <span class="title">JndiDataSource</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">		Context context = <span class="keyword">new</span> InitialContext();</span><br><span class="line">		Context jndiContainer = (Context)context.lookup(<span class="string">"java:comp/env"</span>);</span><br><span class="line">		dataSource = (DataSource)jndiContainer.lookup(<span class="string">"jdbc/datasource"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="function">JndiDataSource <span class="title">getInstance</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(jndiDataSource == <span class="keyword">null</span>)&#123;</span><br><span class="line">			<span class="keyword">synchronized</span>(JndiDataSource.class)&#123;</span><br><span class="line">				<span class="keyword">if</span>(jndiDataSource == <span class="keyword">null</span>)&#123;</span><br><span class="line">					jndiDataSource = <span class="keyword">new</span> JndiDataSource();</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> jndiDataSource;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">public</span> <span class="function">Connection <span class="title">getConnection</span><span class="params">()</span> <span class="keyword">throws</span> SQLException</span>&#123;</span><br><span class="line">		<span class="function"><span class="keyword">return</span> dataSource.<span class="title">getConnection</span><span class="params">()</span></span>;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">close</span><span class="params">(Connection conn, Statement stat, ResultSet rs)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(rs != <span class="keyword">null</span>)&#123;</span><br><span class="line">			<span class="keyword">try</span> &#123;</span><br><span class="line">				rs.close();</span><br><span class="line">			&#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">				<span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">				e.printStackTrace();</span><br><span class="line">			&#125;</span><br><span class="line">			rs = <span class="keyword">null</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">if</span>(stat != <span class="keyword">null</span>)&#123;</span><br><span class="line">			<span class="keyword">try</span> &#123;</span><br><span class="line">				stat.close();</span><br><span class="line">			&#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">				<span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">				e.printStackTrace();</span><br><span class="line">			&#125;</span><br><span class="line">			stat = <span class="keyword">null</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">if</span>(conn != <span class="keyword">null</span>)&#123;</span><br><span class="line">			<span class="keyword">try</span> &#123;</span><br><span class="line">				conn.close();</span><br><span class="line">			&#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">				<span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">				e.printStackTrace();</span><br><span class="line">			&#125;</span><br><span class="line">			conn = <span class="keyword">null</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line"> * 测试线程类</span><br><span class="line"> */</span></span><br><span class="line">package edu.uestc.DataSource;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.ResultSet;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"><span class="keyword">import</span> java.sql.Statement;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">TestJndiDataSource</span> <span class="title">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line">	public <span class="keyword">void</span> run() &#123;</span><br><span class="line">		Connection conn = <span class="literal">null</span>;</span><br><span class="line">		Statement stat = <span class="literal">null</span>;</span><br><span class="line">		ResultSet rs = <span class="literal">null</span>;</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			<span class="keyword">try</span> &#123;</span><br><span class="line">				conn = JndiDataSource.getInstance().getConnection();</span><br><span class="line">			&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">				<span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">				e.printStackTrace();</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="built_in">String</span> sql = <span class="string">"select * from robot"</span>;</span><br><span class="line">			stat = conn.createStatement();</span><br><span class="line">			rs = stat.executeQuery(sql);</span><br><span class="line">			<span class="keyword">while</span>(rs.next())&#123;</span><br><span class="line">				System.out.println(rs.getString(<span class="number">1</span>)+<span class="string">"\t"</span>+rs.getString(<span class="number">2</span>));</span><br><span class="line">			&#125;</span><br><span class="line">			</span><br><span class="line">		&#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">			<span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">finally</span> &#123;</span><br><span class="line">			<span class="keyword">try</span> &#123;</span><br><span class="line">				JndiDataSource.getInstance().close(conn, stat, rs);</span><br><span class="line">			&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">				<span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">				e.printStackTrace();</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line"> * 主线程</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">package</span> controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.<span class="type">IOException</span>;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.<span class="type">HttpServlet</span>;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.<span class="type">HttpServletRequest</span>;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.<span class="type">HttpServletResponse</span>;</span><br><span class="line"><span class="keyword">import</span> edu.uestc.<span class="type">DataSource</span>.<span class="type">TestJndiDataSource</span>;</span><br><span class="line"></span><br><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">Controller</span> <span class="keyword"><span class="keyword">extends</span></span> <span class="title">HttpServlet</span> &#123;</span></span><br><span class="line">	<span class="annotation">@Override</span></span><br><span class="line">	public void doPost(<span class="type">HttpServletRequest</span> request,<span class="type">HttpServletResponse</span> response) <span class="keyword">throws</span> <span class="type">IOException</span>&#123;</span><br><span class="line">		doGet(request, response);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="annotation">@Override</span></span><br><span class="line">	public void doGet(<span class="type">HttpServletRequest</span> request,<span class="type">HttpServletResponse</span> response) <span class="keyword">throws</span> <span class="type">IOException</span>&#123;</span><br><span class="line">    	<span class="keyword">for</span>(int loop=<span class="number">0</span> ;loop&lt;<span class="number">10000</span>; loop++)&#123;</span><br><span class="line">    		<span class="type">TestJndiDataSource</span> test = <span class="keyword">new</span> <span class="type">TestJndiDataSource</span>();</span><br><span class="line">    		<span class="type">Thread</span> t = <span class="keyword">new</span> <span class="type">Thread</span>(test);</span><br><span class="line">    		t.start();</span><br><span class="line">    	&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">/<span class="keyword">*</span><span class="keyword">*</span></span><br><span class="line"> <span class="keyword">*</span> 结果，登录mysql，使用命令</span><br><span class="line"> <span class="keyword">*</span> show status;</span><br><span class="line"> <span class="keyword">*</span> 查看可得tomcat启动时启动了9个Threads_connected（因为在context.xml中设置了initialSize=<span class="string">"20"</span>，但Threads_connected并不是这个值。）</span><br><span class="line"> <span class="keyword">*</span> 有一个问题与c3p0一样，设置了context.xml中的max或min都不起作用，Threads_connected的值一直都是9。</span><br><span class="line"> <span class="keyword">*</span> mysql中的Threads_connected依然还是9。</span><br><span class="line"> <span class="keyword">*</span>/</span><br><span class="line"> </span><br><span class="line">|<span class="string"> Tc_log_page_waits                        </span>|<span class="string"> 0           </span>|</span><br><span class="line">|<span class="string"> Threads_cached                           </span>|<span class="string"> 0           </span>|</span><br><span class="line">|<span class="string"> Threads_connected                        </span>|<span class="string"> 9           </span>|</span><br><span class="line">|<span class="string"> Threads_created                          </span>|<span class="string"> 1305        </span>|</span><br><span class="line">|<span class="string"> Threads_running                          </span>|<span class="string"> 1           </span>|</span><br><span class="line">|<span class="string"> Uptime                                   </span>|<span class="string"> 69456       </span>|</span><br><span class="line">|<span class="string"> Uptime_since_flush_status                </span>|<span class="string"> 69456       </span>|</span><br><span class="line">+------------------------------------------+-------------+</span><br></pre></td></tr></table></figure>
<h5 id="u5546_u4E1A_u6570_u636E_u5E93_u8FDE_u63A5_u6C60"><a href="#u5546_u4E1A_u6570_u636E_u5E93_u8FDE_u63A5_u6C60" class="headerlink" title="商业数据库连接池"></a>商业数据库连接池</h5><p>weblogin内置的数据库连接池，一般连接数设置为200-300（用户数300到3000，数据量100万到1亿）。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>本篇介绍了数据库连接的优势及使用。包括了开源数据库连接池dbcp, c3p0, tomcat中的JNDI方式的配置与使用，从maven配置，连接池配置文件，测试代码以及mysql中的实时观测，对这些开源数据库进行了梳理与整合。<br>]]>
    
    </summary>
    
      <category term="数据库" scheme="http://jinpingwang.github.io/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
      <category term="数据库" scheme="http://jinpingwang.github.io/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[外观模式]]></title>
    <link href="http://jinpingwang.github.io/2016/04/21/designPattern/%E5%A4%96%E8%A7%82%E6%A8%A1%E5%BC%8F/"/>
    <id>http://jinpingwang.github.io/2016/04/21/designPattern/外观模式/</id>
    <published>2016-04-20T22:59:42.000Z</published>
    <updated>2016-07-13T12:26:22.166Z</updated>
    <content type="html"><![CDATA[<h3 id="what"><a href="#what" class="headerlink" title="what"></a>what</h3><p>提供了一个统一的接口，用来访问子系统中的一群接口。外观定义了一个高层接口，让子系统更容易使用。</p>
<h3 id="why"><a href="#why" class="headerlink" title="why"></a>why</h3><p>让接口更简单</p>
<h3 id="how"><a href="#how" class="headerlink" title="how"></a>how</h3><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">public class HomeTheaterFacade&#123;</span><br><span class="line">    Amplifier amp<span class="comment">;</span></span><br><span class="line">    Tuner tunner<span class="comment">;</span></span><br><span class="line">    DvdPlayer dvd<span class="comment">;</span></span><br><span class="line">    CdPlayer cd<span class="comment">;</span></span><br><span class="line">    Projector projector<span class="comment">;</span></span><br><span class="line">    TheaterLights lights<span class="comment">;</span></span><br><span class="line">    Screen screen<span class="comment">;</span></span><br><span class="line">    PopcornPopper popper<span class="comment">;</span></span><br><span class="line">    </span><br><span class="line">    public HomeTheaterFacade(Amplifier amp, Tuner tuner, DvdPlayer dvd, CdPlayer cd, Projector projector, Screen screen, TheaterLights lights, PopcornPopper popper)&#123;</span><br><span class="line">        this.amp = amp<span class="comment">;</span></span><br><span class="line">        this.tuner = tuner<span class="comment">;</span></span><br><span class="line">        this.dvd = dvd<span class="comment">;</span></span><br><span class="line">        this.cd = cd<span class="comment">;</span></span><br><span class="line">        this.projector = projector<span class="comment">;</span></span><br><span class="line">        this.screen = screen<span class="comment">;</span></span><br><span class="line">        this.lights = lights<span class="comment">;</span></span><br><span class="line">        this.popper = popper<span class="comment">;</span></span><br><span class="line">    &#125;</span><br><span class="line">    public void watchMovie(String movie)&#123;</span><br><span class="line">        System.out.println("Get ready to watch a movie...")<span class="comment">;</span></span><br><span class="line">        popper.on()<span class="comment">;</span></span><br><span class="line">        popper.pop()<span class="comment">;</span></span><br><span class="line">        lights.dim(10)<span class="comment">;</span></span><br><span class="line">        screen.down()<span class="comment">;</span></span><br><span class="line">        projector.on()<span class="comment">;</span></span><br><span class="line">        projector.wideScreenMode()<span class="comment">;</span></span><br><span class="line">        amp.on()<span class="comment">;</span></span><br><span class="line">        amp.setDvd(dvd)<span class="comment">;</span></span><br><span class="line">        amp.setSurroundSound()<span class="comment">;</span></span><br><span class="line">        amp.setVolume(5)<span class="comment">;</span></span><br><span class="line">        dvd.on()<span class="comment">;</span></span><br><span class="line">        dvd.play(movie)<span class="comment">;</span></span><br><span class="line">    &#125;</span><br><span class="line">    public void endMovie()&#123;</span><br><span class="line">        System.out.println("Shutting movie theater down...")<span class="comment">;</span></span><br><span class="line">        popper.off()<span class="comment">;</span></span><br><span class="line">        lights.on()<span class="comment">;</span></span><br><span class="line">        screen.up()<span class="comment">;</span></span><br><span class="line">        projector.off()<span class="comment">;</span></span><br><span class="line">        amp.off()<span class="comment">;</span></span><br><span class="line">        dvd.stop()<span class="comment">;</span></span><br><span class="line">        dvd.eject()<span class="comment">;</span></span><br><span class="line">        dvd.off()<span class="comment">;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">HomeTheaterTestDrive</span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span>(<span class="params">String args[]</span>)</span>&#123;</span><br><span class="line">        HomeTheaterFacade homeTheater = <span class="keyword">new</span> HomeTheaterFacade(amp, tuner, dvd, cd, projector, screen, lights, popper);</span><br><span class="line">        homeTheater.watchMovie(<span class="string">"Raiders of the Lost Ark"</span>);</span><br><span class="line">        homeTheater.endMovie();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[<h3 id="what"><a href="#what" class="headerlink" title="what"></a>what</h3><p>提供了一个统一的接口，用来访问子系统中的一群接口。外观定义了一个高层接口，让子系统更容易使用。</p>
<h3 id="wh]]>
    </summary>
    
      <category term="设计模式" scheme="http://jinpingwang.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
      <category term="设计模式" scheme="http://jinpingwang.github.io/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[缺省适配模式]]></title>
    <link href="http://jinpingwang.github.io/2016/04/19/designPattern/%E7%BC%BA%E7%9C%81%E9%80%82%E9%85%8D%E6%A8%A1%E5%BC%8F/"/>
    <id>http://jinpingwang.github.io/2016/04/19/designPattern/缺省适配模式/</id>
    <published>2016-04-19T12:18:39.000Z</published>
    <updated>2016-07-13T12:28:13.800Z</updated>
    <content type="html"><![CDATA[<h3 id="what"><a href="#what" class="headerlink" title="what"></a>what</h3><p>缺省适配模式为一个接口提供缺省实现。由缺省适配器类直接实现接口，并为所有方法提供缺省的空实现。用户类就只需要继承适配器类，只实现感兴趣的方法就行了。</p>
<h3 id="why"><a href="#why" class="headerlink" title="why"></a>why</h3><p>这样的类型可以从这个缺省实现，而不必从原有的接口进行扩展。当源接口中定义的方法太多，而其中大部分又不被需要时，这种模式非常实用。</p>
<h3 id="how"><a href="#how" class="headerlink" title="how"></a>how</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Collection</span>&lt;<span class="title">E</span>&gt; <span class="keyword">extends</span> <span class="title">Iterable</span> </span>&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">int</span> <span class="title">size</span><span class="params">()</span></span>;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span></span>;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">boolean</span> <span class="title">contains</span><span class="params">(Object o)</span></span>;</span><br><span class="line">	</span><br><span class="line">	<span class="function">Iterator&lt;E&gt; <span class="title">iterator</span><span class="params">()</span></span>;</span><br><span class="line">	</span><br><span class="line">	Object[] toArray();</span><br><span class="line">	</span><br><span class="line">	&lt;T&gt; T[] toArray(T[] a);</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">boolean</span> <span class="title">add</span><span class="params">(E e)</span></span>;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">boolean</span> <span class="title">remove</span><span class="params">(Object o)</span></span>;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">boolean</span> <span class="title">containsAll</span><span class="params">(Collection&lt;?&gt; c)</span></span>;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">boolean</span> <span class="title">addAll</span><span class="params">(Collection&lt;? extends E&gt; c)</span></span>;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">boolean</span> <span class="title">removeAll</span><span class="params">(Collection&lt;?&gt; c)</span></span>;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">boolean</span> <span class="title">retrainAll</span><span class="params">(Collection&lt;?&gt; c)</span></span>;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span></span>;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object o)</span></span>;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> AbstractCollection&lt;E&gt; <span class="keyword">implements</span> Collection&lt;E&gt; &#123;</span><br><span class="line">	<span class="keyword">protected</span> AbstractCollection()&#123;	</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">abstract</span> Iterator&lt;E&gt; iterator();</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">int</span> <span class="keyword">size</span>();</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">boolean</span> isEmpty()&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">size</span>()==<span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">boolean</span> add(E e)&#123;</span><br><span class="line">		<span class="keyword">throw</span> <span class="keyword">new</span> UnsupportedOperationException();</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">boolean</span> contains(Object o)&#123;</span><br><span class="line">		Iterator&lt;E&gt; it=iterator();</span><br><span class="line">		<span class="keyword">if</span>(java.util.Objects.equals(o, <span class="keyword">null</span>))&#123;</span><br><span class="line">			<span class="keyword">while</span>(it.hasNext())&#123;</span><br><span class="line">				<span class="keyword">if</span>(java.util.Objects.equals(it.<span class="keyword">next</span>(),<span class="keyword">null</span>))&#123;</span><br><span class="line">					<span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span>&#123;</span><br><span class="line">			<span class="keyword">while</span>(it.hasNext())&#123;</span><br><span class="line">				<span class="keyword">if</span>(o.equals(it.<span class="keyword">next</span>()))&#123;</span><br><span class="line">					<span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">boolean</span> containsAll(Collection&lt;?&gt; c)&#123;</span><br><span class="line">		<span class="keyword">for</span>(Object e:c)&#123;</span><br><span class="line">			<span class="keyword">if</span>(!contains(e))&#123;</span><br><span class="line">				<span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">boolean</span> remove(Object o)&#123;</span><br><span class="line">		Iterator&lt;E&gt; it=iterator();</span><br><span class="line">		<span class="keyword">if</span>(java.util.Objects.equals(o,<span class="keyword">null</span>))&#123;</span><br><span class="line">			<span class="keyword">while</span>(it.hasNext())&#123;</span><br><span class="line">				<span class="keyword">if</span>(it.<span class="keyword">next</span>().equals(o))&#123;</span><br><span class="line">					it.remove();</span><br><span class="line">					<span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span>&#123;</span><br><span class="line">			<span class="keyword">while</span>(it.hasNext())&#123;</span><br><span class="line">				<span class="keyword">if</span>(it.<span class="keyword">next</span>().equals(o))&#123;</span><br><span class="line">					it.remove();</span><br><span class="line">					<span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">boolean</span> removeAll(Collection&lt;?&gt; c)&#123;</span><br><span class="line">		Objects.requireNonNull(c);</span><br><span class="line">		<span class="keyword">boolean</span> modified=<span class="keyword">false</span>;</span><br><span class="line">		Iterator&lt;E&gt; it=iterator();</span><br><span class="line">		<span class="keyword">while</span>(it.hasNext())&#123;</span><br><span class="line">			<span class="keyword">if</span>(c.contains(it.<span class="keyword">next</span>()))&#123;</span><br><span class="line">				it.remove();</span><br><span class="line">				modified=<span class="keyword">true</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> modified;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">boolean</span> retainAll(Collection&lt;?&gt; c)&#123;</span><br><span class="line">		Objects.requireNonNull(c);</span><br><span class="line">		<span class="keyword">boolean</span> modified=<span class="keyword">false</span>;</span><br><span class="line">		Iterator&lt;E&gt; it=iterator();</span><br><span class="line">		<span class="keyword">while</span>(it.hasNext())&#123;</span><br><span class="line">			<span class="keyword">if</span>(!c.contains(it.<span class="keyword">next</span>()))&#123;</span><br><span class="line">				it.remove();</span><br><span class="line">				modified=<span class="keyword">true</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> modified;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> clear()&#123;</span><br><span class="line">		Iterator&lt;E&gt; it=iterator();</span><br><span class="line">		<span class="keyword">while</span>(it.hasNext())&#123;</span><br><span class="line">			it.<span class="keyword">next</span>();</span><br><span class="line">			it.remove();</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">public</span> String toString()&#123;</span><br><span class="line">		Iterator&lt;E&gt; it=iterator();</span><br><span class="line">		<span class="keyword">if</span>(!it.hasNext())&#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="string">"[]"</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">		StringBuilder sb=<span class="keyword">new</span> StringBuilder();</span><br><span class="line">		sb.<span class="keyword">append</span>(<span class="string">"["</span>);</span><br><span class="line">		<span class="keyword">for</span>(;;)&#123;</span><br><span class="line">			E e=it.<span class="keyword">next</span>();</span><br><span class="line">			sb.<span class="keyword">append</span>(e==<span class="keyword">this</span>? <span class="string">"(this Collection"</span> :e);</span><br><span class="line">			<span class="keyword">if</span>(!it.hasNext())&#123;</span><br><span class="line">				<span class="keyword">return</span> sb.<span class="keyword">append</span>(<span class="string">"]"</span>).toString();</span><br><span class="line">			&#125;</span><br><span class="line">			sb.<span class="keyword">append</span>(<span class="string">","</span>).<span class="keyword">append</span>(<span class="string">" "</span>);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">public</span> Object[] toArray()&#123;</span><br><span class="line">		Object r[]=<span class="keyword">new</span> Object[<span class="keyword">size</span>()];</span><br><span class="line">		Iterator&lt;E&gt; it=iterator();</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;r.length;i++)&#123;</span><br><span class="line">			<span class="keyword">if</span>(!it.hasNext())&#123;</span><br><span class="line">				<span class="keyword">return</span> Arrays.copyOf(r, i);</span><br><span class="line">			&#125;</span><br><span class="line">			r[i]=it.<span class="keyword">next</span>();</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> it.hasNext()?finishToArray(r,it):r;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MAX_ARRAY_SIZE = Integer.MAX_VALUE - <span class="number">8</span>;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> &lt;T&gt; T[] finishToArray(T[] r, Iterator&lt;?&gt; it) &#123;</span><br><span class="line">	        <span class="keyword">int</span> i = r.length;</span><br><span class="line">	        <span class="keyword">while</span> (it.hasNext()) &#123;</span><br><span class="line">	            <span class="keyword">int</span> cap = r.length;</span><br><span class="line">	            <span class="keyword">if</span> (i == cap) &#123;</span><br><span class="line">	                <span class="keyword">int</span> newCap = cap + (cap &gt;&gt; <span class="number">1</span>) + <span class="number">1</span>;</span><br><span class="line">	                <span class="comment">// overflow-conscious code</span></span><br><span class="line">	                <span class="keyword">if</span> (newCap - MAX_ARRAY_SIZE &gt; <span class="number">0</span>)</span><br><span class="line">	                    newCap = hugeCapacity(cap + <span class="number">1</span>);</span><br><span class="line">	                r = Arrays.copyOf(r, newCap);</span><br><span class="line">	            &#125;</span><br><span class="line">	            r[i++] = (T)it.<span class="keyword">next</span>();</span><br><span class="line">	        &#125;</span><br><span class="line">	        <span class="comment">// trim if overallocated</span></span><br><span class="line">	        <span class="keyword">return</span> (i == r.length) ? r : Arrays.copyOf(r, i);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> hugeCapacity(<span class="keyword">int</span> minCapacity) &#123;</span><br><span class="line">        <span class="keyword">if</span> (minCapacity &lt; <span class="number">0</span>) <span class="comment">// overflow</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> OutOfMemoryError</span><br><span class="line">                (<span class="string">"Required array size too large"</span>);</span><br><span class="line">        <span class="keyword">return</span> (minCapacity &gt; MAX_ARRAY_SIZE) ?</span><br><span class="line">            Integer.MAX_VALUE :</span><br><span class="line">            MAX_ARRAY_SIZE;</span><br><span class="line">    &#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">public</span> &lt;T&gt; T[] toArray(T[] a) &#123;</span><br><span class="line">        <span class="comment">// Estimate size of array; be prepared to see more or fewer elements</span></span><br><span class="line">        <span class="keyword">int</span> <span class="keyword">size</span> = <span class="keyword">size</span>();</span><br><span class="line">        T[] r = a.length &gt;= <span class="keyword">size</span> ? a :</span><br><span class="line">                  (T[])java.lang.reflect.Array</span><br><span class="line">                  .newInstance(a.getClass().getComponentType(), <span class="keyword">size</span>);</span><br><span class="line">        Iterator&lt;E&gt; it = iterator();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; r.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (! it.hasNext()) &#123; <span class="comment">// fewer elements than expected</span></span><br><span class="line">                <span class="keyword">if</span> (a == r) &#123;</span><br><span class="line">                    r[i] = <span class="keyword">null</span>; <span class="comment">// null-terminate</span></span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (a.length &lt; i) &#123;</span><br><span class="line">                    <span class="keyword">return</span> Arrays.copyOf(r, i);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    System.arraycopy(r, <span class="number">0</span>, a, <span class="number">0</span>, i);</span><br><span class="line">                    <span class="keyword">if</span> (a.length &gt; i) &#123;</span><br><span class="line">                        a[i] = <span class="keyword">null</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> a;</span><br><span class="line">            &#125;</span><br><span class="line">            r[i] = (T)it.<span class="keyword">next</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// more elements than expected</span></span><br><span class="line">        <span class="keyword">return</span> it.hasNext() ? finishToArray(r, it) : r;</span><br><span class="line">    &#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">boolean</span> addAll(Collection&lt;? <span class="keyword">extends</span> E&gt; c)&#123;</span><br><span class="line">		<span class="keyword">boolean</span> modified=<span class="keyword">false</span>;</span><br><span class="line">		<span class="keyword">for</span>(E e:c)&#123;</span><br><span class="line">			<span class="keyword">if</span>(add(e))&#123;</span><br><span class="line">				modified=<span class="keyword">true</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> modified;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[<h3 id="what"><a href="#what" class="headerlink" title="what"></a>what</h3><p>缺省适配模式为一个接口提供缺省实现。由缺省适配器类直接实现接口，并为所有方法提供缺省的空实现。用户类就只需要继承适配器类，只]]>
    </summary>
    
      <category term="设计模式" scheme="http://jinpingwang.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
      <category term="设计模式" scheme="http://jinpingwang.github.io/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
</feed>
