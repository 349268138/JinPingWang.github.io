<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[Quick notes]]></title>
  <subtitle><![CDATA[王谨平]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://jinpingwang.github.io/"/>
  <updated>2016-04-30T07:55:12.012Z</updated>
  <id>http://jinpingwang.github.io/</id>
  
  <author>
    <name><![CDATA[王谨平]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[基于贝叶斯的2-Gram中文分词]]></title>
    <link href="http://jinpingwang.github.io/2016/04/25/nlp/3:%E5%9F%BA%E4%BA%8E%E8%B4%9D%E5%8F%B6%E6%96%AF%E7%9A%842-Gram%E4%B8%AD%E6%96%87%E5%88%86%E8%AF%8D/"/>
    <id>http://jinpingwang.github.io/2016/04/25/nlp/3:基于贝叶斯的2-Gram中文分词/</id>
    <published>2016-04-25T02:41:56.000Z</published>
    <updated>2016-04-30T07:55:12.012Z</updated>
    <content type="html"><![CDATA[<p>介绍了基于贝叶斯的2-Gram分词方法（可以与另外两篇机械分词器相比对：<a href="http://blog.wangjinping.top/2016/01/02/nlp/1:%E6%AD%A3%E5%90%91%E6%9C%80%E9%95%BF%E5%8C%B9%E9%85%8D%E4%B8%AD%E5%88%86%E8%AF%8D/" target="_blank" rel="external">正向最长匹配</a> 和 <a href="http://blog.wangjinping.top/2016/01/02/nlp/2:%E5%8F%8D%E5%90%91%E6%9C%80%E9%95%BF%E5%8C%B9%E9%85%8D%E4%B8%AD%E5%88%86%E8%AF%8D/" target="_blank" rel="external">反向最长匹配</a>）。</p>
<h3 id="u95EE_u9898"><a href="#u95EE_u9898" class="headerlink" title="问题"></a>问题</h3><p>1：输入语料库词频<br>2：输入”上网站联盟”<br>3：输出分词结果</p>
<h3 id="u89E3_u51B3_u63CF_u8FF0"><a href="#u89E3_u51B3_u63CF_u8FF0" class="headerlink" title="解决描述"></a>解决描述</h3><p>1：一个n+1个字的句子，它的分词方法有：2的n次方。比如：”上网站”，可以分词为：上/网/站，上/网站，上网/站，上网站。<br>2：按照每一种分词，根据语料库中的词频统计，利用贝叶斯计算出这种分词下的概率；比如，上，网，站这三个字独自出现的概率为100，上出现在网站前的词频为1000，词表中有10000个词，那么按照贝叶斯公式可计算出”上/网站”这种分词的概率为：p(上网站)=p(上)*p(网站/上)=(100/10000)*(1000/10000)=0.001；同理按贝叶斯公式可计算出”上/网/站”这种分词的概率为：p(上网站)=p(上)*p(网)*p(站)=(100/10000)*(100/10000)*(100/10000)=0.000001。因为0.001&gt;0.000001，所以，分词”上/网站”要优于”上/网/站”。<br>3：对所有分词的情况都计算出它的概率，取概率最大的那个分词方式，即为该句子的分词方式。<br><a id="more"></a></p>
<h3 id="u8BED_u6599_u5E93_u8BCD_u9891"><a href="#u8BED_u6599_u5E93_u8BCD_u9891" class="headerlink" title="语料库词频"></a>语料库词频</h3><table>
<thead>
<tr>
<th>项目</th>
<th style="text-align:right">上</th>
<th style="text-align:center">网</th>
<th>站</th>
<th>联</th>
<th>盟</th>
<th>上网</th>
<th>网站</th>
<th>站联</th>
<th>联盟</th>
<th>上网站</th>
<th>网站联</th>
<th>站联盟</th>
<th>上网站联</th>
<th>网站联盟</th>
<th>上网站联盟</th>
</tr>
</thead>
<tbody>
<tr>
<td>上</td>
<td style="text-align:right">100</td>
<td style="text-align:center">1000</td>
<td></td>
<td></td>
<td></td>
<td></td>
<td>1600</td>
<td></td>
<td></td>
<td></td>
<td>3</td>
<td></td>
<td></td>
<td>1400</td>
<td></td>
</tr>
<tr>
<td>网</td>
<td style="text-align:right"></td>
<td style="text-align:center">100</td>
<td>1300</td>
<td></td>
<td></td>
<td></td>
<td></td>
<td>3</td>
<td></td>
<td></td>
<td></td>
<td>4</td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>站</td>
<td style="text-align:right"></td>
<td style="text-align:center"></td>
<td>100</td>
<td>4</td>
<td></td>
<td></td>
<td></td>
<td></td>
<td>6</td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>联</td>
<td style="text-align:right"></td>
<td style="text-align:center"></td>
<td></td>
<td>100</td>
<td>1900</td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>盟</td>
<td style="text-align:right"></td>
<td style="text-align:center"></td>
<td></td>
<td></td>
<td>100</td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>上网</td>
<td style="text-align:right"></td>
<td style="text-align:center"></td>
<td>5</td>
<td></td>
<td></td>
<td>400</td>
<td></td>
<td>4</td>
<td></td>
<td></td>
<td></td>
<td>7</td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>网站</td>
<td style="text-align:right"></td>
<td style="text-align:center"></td>
<td></td>
<td>3</td>
<td></td>
<td></td>
<td>600</td>
<td></td>
<td>800</td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>站联</td>
<td style="text-align:right"></td>
<td style="text-align:center"></td>
<td></td>
<td></td>
<td>2</td>
<td></td>
<td></td>
<td>2</td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>联盟</td>
<td style="text-align:right"></td>
<td style="text-align:center"></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td>1100</td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>上网站</td>
<td style="text-align:right"></td>
<td style="text-align:center"></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td>50</td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>网站联</td>
<td style="text-align:right"></td>
<td style="text-align:center"></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td>2</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>站联盟</td>
<td style="text-align:right"></td>
<td style="text-align:center"></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td>3</td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>上网站联</td>
<td style="text-align:right"></td>
<td style="text-align:center"></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td>1</td>
<td></td>
<td></td>
</tr>
<tr>
<td>网站联盟</td>
<td style="text-align:right"></td>
<td style="text-align:center"></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td>1200</td>
<td></td>
</tr>
<tr>
<td>上网站联盟</td>
<td style="text-align:right"></td>
<td style="text-align:center"></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td>2</td>
</tr>
</tbody>
</table>
<p>假设词表有10000个词，可以计算出p(上网站联盟)=p(上)*p(网站联盟/上)=(100/10000)*(1400/10000)=0.0014，是所有分词中概率最大的。<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">分词结果：上/网站联盟</span><br></pre></td></tr></table></figure></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>介绍了基于贝叶斯的2-Gram分词方法（可以与另外两篇机械分词器相比对：<a href="http://blog.wangjinping.top/2016/01/02/nlp/1:%E6%AD%A3%E5%90%91%E6%9C%80%E9%95%BF%E5%8C%B9%E9%85%8D%E4%B8%AD%E5%88%86%E8%AF%8D/">正向最长匹配</a> 和 <a href="http://blog.wangjinping.top/2016/01/02/nlp/2:%E5%8F%8D%E5%90%91%E6%9C%80%E9%95%BF%E5%8C%B9%E9%85%8D%E4%B8%AD%E5%88%86%E8%AF%8D/">反向最长匹配</a>）。</p>
<h3 id="u95EE_u9898"><a href="#u95EE_u9898" class="headerlink" title="问题"></a>问题</h3><p>1：输入语料库词频<br>2：输入”上网站联盟”<br>3：输出分词结果</p>
<h3 id="u89E3_u51B3_u63CF_u8FF0"><a href="#u89E3_u51B3_u63CF_u8FF0" class="headerlink" title="解决描述"></a>解决描述</h3><p>1：一个n+1个字的句子，它的分词方法有：2的n次方。比如：”上网站”，可以分词为：上/网/站，上/网站，上网/站，上网站。<br>2：按照每一种分词，根据语料库中的词频统计，利用贝叶斯计算出这种分词下的概率；比如，上，网，站这三个字独自出现的概率为100，上出现在网站前的词频为1000，词表中有10000个词，那么按照贝叶斯公式可计算出”上/网站”这种分词的概率为：p(上网站)=p(上)*p(网站/上)=(100/10000)*(1000/10000)=0.001；同理按贝叶斯公式可计算出”上/网/站”这种分词的概率为：p(上网站)=p(上)*p(网)*p(站)=(100/10000)*(100/10000)*(100/10000)=0.000001。因为0.001&gt;0.000001，所以，分词”上/网站”要优于”上/网/站”。<br>3：对所有分词的情况都计算出它的概率，取概率最大的那个分词方式，即为该句子的分词方式。<br>]]>
    
    </summary>
    
      <category term="NLP" scheme="http://jinpingwang.github.io/tags/NLP/"/>
    
      <category term="自然语言处理" scheme="http://jinpingwang.github.io/tags/%E8%87%AA%E7%84%B6%E8%AF%AD%E8%A8%80%E5%A4%84%E7%90%86/"/>
    
      <category term="自然语言处理" scheme="http://jinpingwang.github.io/categories/%E8%87%AA%E7%84%B6%E8%AF%AD%E8%A8%80%E5%A4%84%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[HTTP状态保持之Session与Cookie]]></title>
    <link href="http://jinpingwang.github.io/2016/04/24/web/HTTP%E7%8A%B6%E6%80%81%E4%BF%9D%E6%8C%81%E4%B9%8BSession%E4%B8%8ECookie/"/>
    <id>http://jinpingwang.github.io/2016/04/24/web/HTTP状态保持之Session与Cookie/</id>
    <published>2016-04-24T14:32:45.000Z</published>
    <updated>2016-04-28T02:36:35.544Z</updated>
    <content type="html"><![CDATA[<p>之前介绍了Servlet-api中javax.servlet.http包下的HttpSession接口与Cookie类的方法等内容。今天着重讲解Session与Cookie结合在一起如何完成服务器如何与客户端保持状态连接，以及讨论购物车下的实现方式。<br><a id="more"></a></p>
<h3 id="Session_uFF08URL_u91CD_u5199_uFF09"><a href="#Session_uFF08URL_u91CD_u5199_uFF09" class="headerlink" title="Session（URL重写）"></a>Session（URL重写）</h3><h4 id="u4F7F_u7528URL_u91CD_u5199_u7684_u60C5_u51B5"><a href="#u4F7F_u7528URL_u91CD_u5199_u7684_u60C5_u51B5" class="headerlink" title="使用URL重写的情况"></a>使用URL重写的情况</h4><p>如果浏览器禁用了cookie，则需要使用URL重写来保持服务器与客户端的状态。</p>
<h4 id="u5982_u4F55_u5224_u65AD_u662F_u5426_u9700_u8981URL_u91CD_u5199"><a href="#u5982_u4F55_u5224_u65AD_u662F_u5426_u9700_u8981URL_u91CD_u5199" class="headerlink" title="如何判断是否需要URL重写"></a>如何判断是否需要URL重写</h4><p>一开始时，服务器并不知道浏览器是否禁用了cookie，所以在第一次进行响应时可以通过URL重写与cookie设置。如果下一次浏览器访问时只有URL重写而没有cookie，则服务器知道浏览器禁止了cookie。但如果浏览器带回URL重写与cookie，则服务器知道浏览器没有禁止cookie，则往后的响应就不进行URL重写。</p>
<h3 id="Cookie+Session"><a href="#Cookie+Session" class="headerlink" title="Cookie+Session"></a>Cookie+Session</h3><p>客户端首次访问服务器时，服务器通过<code>request.getSession()</code>创建Session。在响应中添加sessionid的cookie返回给客户端。这样客户端与服务器就可以保持状态了。但是，因为cookie默认保存在机器给浏览器开辟的内存中，即在服务器创建新sessionid，并将其放进cookie时，使用cookie的setMaxAge(-1)方法，设置cookie在浏览器关闭前会保存在客户端内存中，即只要不关闭浏览器，新打开一个窗口，还是会把sessionid的cookie传回服务器。但如果关闭浏览器，就没了存储sessionID的cookie，这样向服务器发送新请求时，服务器就会创建新的session。另外session也在服务器内存中也是有生命周期，时间超时也会消失。所以，如果想解决浏览器退出时，sessionid的cookie不会消失，则就自己写个cookie覆盖掉服务器发送给客户端的的cookie，然后设置时间长一些，cookie就保存在硬盘上了。当然以上情况是在浏览器非隐身模式下，且没有禁用Cookie条件下。但如果是在隐身模式访问，则创建的全部 Cookie（不管有没有设置保存在客户端硬盘上） 都会在您关闭隐身窗口后删除。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">HttpSession session = request.getSession();</span><br><span class="line">Cookie cookie = <span class="keyword">new</span> Cookie(<span class="string">"JSESSIONID"</span>, session.getId());</span><br><span class="line">cookie.setMaxAge(<span class="number">40</span>*<span class="number">60</span>);</span><br><span class="line">response.addCookie(cookie);</span><br></pre></td></tr></table></figure></p>
<h3 id="u8D2D_u7269_u8F66"><a href="#u8D2D_u7269_u8F66" class="headerlink" title="购物车"></a>购物车</h3><p>因为用户打开一个网站添加到购物车后，关闭浏览器；使用另一个浏览器打开购物车。这时肯定是一个新的请求，会产生新sessionid，但服务器上原来浏览器的那个sessionid还存活着，所以这里需要考虑用原先存储在服务器上sessionid设置为这一个浏览器访问时的sessionid。购物车这一种还需要根据用户名密码与JSSESSIONID进行映射+mysql数据持久化。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>之前介绍了Servlet-api中javax.servlet.http包下的HttpSession接口与Cookie类的方法等内容。今天着重讲解Session与Cookie结合在一起如何完成服务器如何与客户端保持状态连接，以及讨论购物车下的实现方式。<br>]]>
    
    </summary>
    
      <category term="Cookie" scheme="http://jinpingwang.github.io/tags/Cookie/"/>
    
      <category term="Session" scheme="http://jinpingwang.github.io/tags/Session/"/>
    
      <category term="web" scheme="http://jinpingwang.github.io/tags/web/"/>
    
      <category term="web" scheme="http://jinpingwang.github.io/categories/web/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[mysql之用户表与授权]]></title>
    <link href="http://jinpingwang.github.io/2016/04/18/database/mysql%E4%B9%8B%E7%94%A8%E6%88%B7%E8%A1%A8%E4%B8%8E%E6%8E%88%E6%9D%83/"/>
    <id>http://jinpingwang.github.io/2016/04/18/database/mysql之用户表与授权/</id>
    <published>2016-04-18T07:24:17.000Z</published>
    <updated>2016-04-21T12:17:06.586Z</updated>
    <content type="html"><![CDATA[<p>介绍了mysql数据库下系统自带user表；mysql授权与撤销授权；ip远程登陆设置。</p>
<h3 id="user_u8868"><a href="#user_u8868" class="headerlink" title="user表"></a>user表</h3><p>使用mysql数据库<br><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> mysql</span><br></pre></td></tr></table></figure></p>
<p>查询当前所有用户相关信息（可以通过该表来删除某个用户）。<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator"><span class="keyword">select</span> host ,<span class="keyword">user</span> ,<span class="keyword">password</span> <span class="keyword">from</span> <span class="keyword">user</span>;</span></span><br></pre></td></tr></table></figure></p>
<a id="more"></a>
<h3 id="u6388_u6743_u4E0E_u64A4_u9500_u6388_u6743"><a href="#u6388_u6743_u4E0E_u64A4_u9500_u6388_u6743" class="headerlink" title="授权与撤销授权"></a>授权与撤销授权</h3><h4 id="u6388_u6743"><a href="#u6388_u6743" class="headerlink" title="授权"></a>授权</h4><h5 id="u6388_u6743_u5E76_u521B_u5EFA"><a href="#u6388_u6743_u5E76_u521B_u5EFA" class="headerlink" title="授权并创建"></a>授权并创建</h5><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">/<span class="keyword">*</span><span class="keyword">*</span></span><br><span class="line">  <span class="keyword">*</span> 创建一个用户，并且为他授权。</span><br><span class="line">  <span class="keyword">*</span> all privileges代表所有权限</span><br><span class="line">  <span class="keyword">*</span> 当然也可以改为select,delete,update,create,drop组合</span><br><span class="line">  <span class="keyword">*</span> 如：select,delete。</span><br><span class="line">  <span class="keyword">*</span> <span class="keyword">*</span>.<span class="keyword">*</span>代表所有数据库的所有表，test.<span class="keyword">*</span>代表test数据库的所有表</span><br><span class="line">  <span class="keyword">*</span> %表示登陆的ip，可以为具体ip，也可以为localhost，</span><br><span class="line">  <span class="keyword">*</span> 如果为%则表示可以从任何ip登陆。</span><br><span class="line">  <span class="keyword">*</span>/</span><br><span class="line">grant all privileges on <span class="keyword">*</span>.<span class="keyword">*</span> to '用户名'<span class="comment">@'%' identified by '这个用户的密码'</span></span><br><span class="line">//刷新权限</span><br><span class="line">flush privileges;</span><br></pre></td></tr></table></figure>
<h5 id="u6388_u6743-1"><a href="#u6388_u6743-1" class="headerlink" title="授权"></a>授权</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator"><span class="keyword">grant</span> all <span class="keyword">privileges</span> <span class="keyword">on</span> *.* <span class="keyword">to</span> <span class="string">'用户名'</span>@<span class="string">'%'</span></span><br><span class="line">//刷新权限</span><br><span class="line"><span class="keyword">flush</span> <span class="keyword">privileges</span>;</span></span><br></pre></td></tr></table></figure>
<h4 id="u64A4_u9500_u6388_u6743"><a href="#u64A4_u9500_u6388_u6743" class="headerlink" title="撤销授权"></a>撤销授权</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator"><span class="keyword">grant</span> all <span class="keyword">privileges</span> <span class="keyword">on</span> *.* <span class="keyword">from</span> <span class="string">'root'</span>@<span class="string">'%'</span></span></span><br></pre></td></tr></table></figure>
<h3 id="ip_u8FDC_u7A0B_u767B_u9646_u8BBE_u7F6E"><a href="#ip_u8FDC_u7A0B_u767B_u9646_u8BBE_u7F6E" class="headerlink" title="ip远程登陆设置"></a>ip远程登陆设置</h3><h4 id="u4FEE_u6539vim_/etc/mysql/my-cnf"><a href="#u4FEE_u6539vim_/etc/mysql/my-cnf" class="headerlink" title="修改vim /etc/mysql/my.cnf"></a>修改vim /etc/mysql/my.cnf</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bind-address           = <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span></span><br></pre></td></tr></table></figure>
<p>注释掉，即修改为<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">#bind-address           = <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span></span></span><br></pre></td></tr></table></figure></p>
<h4 id="u901A_u8FC7_u6388_u6743_uFF0C_u8BBE_u7F6E_u53EF_u4EE5_u901A_u8FC7_u4EFB_u4F55ip_u6216_u6307_u5B9Aip_u8FDB_u884C_u767B_u9646"><a href="#u901A_u8FC7_u6388_u6743_uFF0C_u8BBE_u7F6E_u53EF_u4EE5_u901A_u8FC7_u4EFB_u4F55ip_u6216_u6307_u5B9Aip_u8FDB_u884C_u767B_u9646" class="headerlink" title="通过授权，设置可以通过任何ip或指定ip进行登陆"></a>通过授权，设置可以通过任何ip或指定ip进行登陆</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator"><span class="keyword">grant</span> all <span class="keyword">privileges</span> <span class="keyword">on</span> *.* <span class="keyword">to</span> <span class="string">'用户名'</span>@<span class="string">'%'</span></span></span><br></pre></td></tr></table></figure>
<h4 id="u5173_u95ED_u5E76_u542F_u52A8_u6570_u636E_u5E93"><a href="#u5173_u95ED_u5E76_u542F_u52A8_u6570_u636E_u5E93" class="headerlink" title="关闭并启动数据库"></a>关闭并启动数据库</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">/etc/init.d/mysql <span class="operator"><span class="keyword">stop</span></span><br><span class="line">/etc/init.<span class="keyword">d</span>/mysql <span class="keyword">start</span></span></span><br></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[<p>介绍了mysql数据库下系统自带user表；mysql授权与撤销授权；ip远程登陆设置。</p>
<h3 id="user_u8868"><a href="#user_u8868" class="headerlink" title="user表"></a>user表</h3><p>使用mysql数据库<br><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> mysql</span><br></pre></td></tr></table></figure></p>
<p>查询当前所有用户相关信息（可以通过该表来删除某个用户）。<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator"><span class="keyword">select</span> host ,<span class="keyword">user</span> ,<span class="keyword">password</span> <span class="keyword">from</span> <span class="keyword">user</span>;</span></span><br></pre></td></tr></table></figure></p>]]>
    
    </summary>
    
      <category term="mysql" scheme="http://jinpingwang.github.io/tags/mysql/"/>
    
      <category term="数据库" scheme="http://jinpingwang.github.io/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
      <category term="数据库" scheme="http://jinpingwang.github.io/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[java源码之ArrayList]]></title>
    <link href="http://jinpingwang.github.io/2016/04/17/javaSourceCode/java.util/ArrayList/"/>
    <id>http://jinpingwang.github.io/2016/04/17/javaSourceCode/java.util/ArrayList/</id>
    <published>2016-04-17T11:12:51.000Z</published>
    <updated>2016-04-23T08:25:19.574Z</updated>
    <content type="html"><![CDATA[<p>主要介绍了有关于ArrayList的源码，包括一些动态括展等方法的解析。<br><a id="more"></a></p>
<h3 id="u6E90_u4EE3_u7801"><a href="#u6E90_u4EE3_u7801" class="headerlink" title="源代码"></a>源代码</h3><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br><span class="line">535</span><br><span class="line">536</span><br><span class="line">537</span><br><span class="line">538</span><br><span class="line">539</span><br><span class="line">540</span><br><span class="line">541</span><br><span class="line">542</span><br><span class="line">543</span><br><span class="line">544</span><br><span class="line">545</span><br><span class="line">546</span><br><span class="line">547</span><br><span class="line">548</span><br><span class="line">549</span><br><span class="line">550</span><br><span class="line">551</span><br><span class="line">552</span><br><span class="line">553</span><br><span class="line">554</span><br><span class="line">555</span><br><span class="line">556</span><br><span class="line">557</span><br><span class="line">558</span><br><span class="line">559</span><br><span class="line">560</span><br><span class="line">561</span><br><span class="line">562</span><br><span class="line">563</span><br><span class="line">564</span><br><span class="line">565</span><br><span class="line">566</span><br><span class="line">567</span><br><span class="line">568</span><br><span class="line">569</span><br><span class="line">570</span><br><span class="line">571</span><br><span class="line">572</span><br><span class="line">573</span><br><span class="line">574</span><br><span class="line">575</span><br><span class="line">576</span><br><span class="line">577</span><br><span class="line">578</span><br><span class="line">579</span><br><span class="line">580</span><br><span class="line">581</span><br><span class="line">582</span><br><span class="line">583</span><br><span class="line">584</span><br><span class="line">585</span><br><span class="line">586</span><br><span class="line">587</span><br><span class="line">588</span><br><span class="line">589</span><br><span class="line">590</span><br><span class="line">591</span><br><span class="line">592</span><br><span class="line">593</span><br><span class="line">594</span><br><span class="line">595</span><br><span class="line">596</span><br><span class="line">597</span><br><span class="line">598</span><br><span class="line">599</span><br><span class="line">600</span><br><span class="line">601</span><br><span class="line">602</span><br><span class="line">603</span><br><span class="line">604</span><br><span class="line">605</span><br><span class="line">606</span><br><span class="line">607</span><br><span class="line">608</span><br><span class="line">609</span><br><span class="line">610</span><br><span class="line">611</span><br><span class="line">612</span><br><span class="line">613</span><br><span class="line">614</span><br><span class="line">615</span><br><span class="line">616</span><br><span class="line">617</span><br><span class="line">618</span><br><span class="line">619</span><br><span class="line">620</span><br><span class="line">621</span><br><span class="line">622</span><br><span class="line">623</span><br><span class="line">624</span><br><span class="line">625</span><br><span class="line">626</span><br><span class="line">627</span><br><span class="line">628</span><br><span class="line">629</span><br><span class="line">630</span><br><span class="line">631</span><br><span class="line">632</span><br><span class="line">633</span><br><span class="line">634</span><br><span class="line">635</span><br><span class="line">636</span><br><span class="line">637</span><br><span class="line">638</span><br><span class="line">639</span><br><span class="line">640</span><br><span class="line">641</span><br><span class="line">642</span><br><span class="line">643</span><br><span class="line">644</span><br><span class="line">645</span><br><span class="line">646</span><br><span class="line">647</span><br><span class="line">648</span><br><span class="line">649</span><br><span class="line">650</span><br><span class="line">651</span><br><span class="line">652</span><br><span class="line">653</span><br><span class="line">654</span><br><span class="line">655</span><br><span class="line">656</span><br><span class="line">657</span><br><span class="line">658</span><br><span class="line">659</span><br><span class="line">660</span><br><span class="line">661</span><br><span class="line">662</span><br><span class="line">663</span><br><span class="line">664</span><br><span class="line">665</span><br><span class="line">666</span><br><span class="line">667</span><br><span class="line">668</span><br><span class="line">669</span><br><span class="line">670</span><br><span class="line">671</span><br><span class="line">672</span><br><span class="line">673</span><br><span class="line">674</span><br><span class="line">675</span><br><span class="line">676</span><br><span class="line">677</span><br><span class="line">678</span><br><span class="line">679</span><br><span class="line">680</span><br><span class="line">681</span><br><span class="line">682</span><br><span class="line">683</span><br><span class="line">684</span><br><span class="line">685</span><br><span class="line">686</span><br><span class="line">687</span><br><span class="line">688</span><br><span class="line">689</span><br><span class="line">690</span><br><span class="line">691</span><br><span class="line">692</span><br><span class="line">693</span><br><span class="line">694</span><br><span class="line">695</span><br><span class="line">696</span><br><span class="line">697</span><br><span class="line">698</span><br><span class="line">699</span><br><span class="line">700</span><br><span class="line">701</span><br><span class="line">702</span><br><span class="line">703</span><br><span class="line">704</span><br><span class="line">705</span><br><span class="line">706</span><br><span class="line">707</span><br><span class="line">708</span><br><span class="line">709</span><br><span class="line">710</span><br><span class="line">711</span><br><span class="line">712</span><br><span class="line">713</span><br><span class="line">714</span><br><span class="line">715</span><br><span class="line">716</span><br><span class="line">717</span><br><span class="line">718</span><br><span class="line">719</span><br><span class="line">720</span><br><span class="line">721</span><br><span class="line">722</span><br><span class="line">723</span><br><span class="line">724</span><br><span class="line">725</span><br><span class="line">726</span><br><span class="line">727</span><br><span class="line">728</span><br><span class="line">729</span><br><span class="line">730</span><br><span class="line">731</span><br><span class="line">732</span><br><span class="line">733</span><br><span class="line">734</span><br><span class="line">735</span><br><span class="line">736</span><br><span class="line">737</span><br><span class="line">738</span><br><span class="line">739</span><br><span class="line">740</span><br><span class="line">741</span><br><span class="line">742</span><br><span class="line">743</span><br><span class="line">744</span><br><span class="line">745</span><br><span class="line">746</span><br><span class="line">747</span><br><span class="line">748</span><br><span class="line">749</span><br><span class="line">750</span><br><span class="line">751</span><br><span class="line">752</span><br><span class="line">753</span><br><span class="line">754</span><br><span class="line">755</span><br><span class="line">756</span><br><span class="line">757</span><br><span class="line">758</span><br><span class="line">759</span><br><span class="line">760</span><br><span class="line">761</span><br><span class="line">762</span><br><span class="line">763</span><br><span class="line">764</span><br><span class="line">765</span><br><span class="line">766</span><br><span class="line">767</span><br><span class="line">768</span><br><span class="line">769</span><br><span class="line">770</span><br><span class="line">771</span><br><span class="line">772</span><br><span class="line">773</span><br><span class="line">774</span><br><span class="line">775</span><br><span class="line">776</span><br><span class="line">777</span><br><span class="line">778</span><br><span class="line">779</span><br><span class="line">780</span><br><span class="line">781</span><br><span class="line">782</span><br><span class="line">783</span><br><span class="line">784</span><br><span class="line">785</span><br><span class="line">786</span><br><span class="line">787</span><br><span class="line">788</span><br><span class="line">789</span><br><span class="line">790</span><br><span class="line">791</span><br><span class="line">792</span><br><span class="line">793</span><br><span class="line">794</span><br><span class="line">795</span><br><span class="line">796</span><br><span class="line">797</span><br><span class="line">798</span><br><span class="line">799</span><br><span class="line">800</span><br><span class="line">801</span><br><span class="line">802</span><br><span class="line">803</span><br><span class="line">804</span><br><span class="line">805</span><br><span class="line">806</span><br><span class="line">807</span><br><span class="line">808</span><br><span class="line">809</span><br><span class="line">810</span><br><span class="line">811</span><br><span class="line">812</span><br><span class="line">813</span><br><span class="line">814</span><br><span class="line">815</span><br><span class="line">816</span><br><span class="line">817</span><br><span class="line">818</span><br><span class="line">819</span><br><span class="line">820</span><br><span class="line">821</span><br><span class="line">822</span><br><span class="line">823</span><br><span class="line">824</span><br><span class="line">825</span><br><span class="line">826</span><br><span class="line">827</span><br><span class="line">828</span><br><span class="line">829</span><br><span class="line">830</span><br><span class="line">831</span><br><span class="line">832</span><br><span class="line">833</span><br><span class="line">834</span><br><span class="line">835</span><br><span class="line">836</span><br><span class="line">837</span><br><span class="line">838</span><br><span class="line">839</span><br><span class="line">840</span><br><span class="line">841</span><br><span class="line">842</span><br><span class="line">843</span><br><span class="line">844</span><br><span class="line">845</span><br><span class="line">846</span><br><span class="line">847</span><br><span class="line">848</span><br><span class="line">849</span><br><span class="line">850</span><br><span class="line">851</span><br><span class="line">852</span><br><span class="line">853</span><br><span class="line">854</span><br><span class="line">855</span><br><span class="line">856</span><br><span class="line">857</span><br><span class="line">858</span><br><span class="line">859</span><br><span class="line">860</span><br><span class="line">861</span><br><span class="line">862</span><br><span class="line">863</span><br><span class="line">864</span><br><span class="line">865</span><br><span class="line">866</span><br><span class="line">867</span><br><span class="line">868</span><br><span class="line">869</span><br><span class="line">870</span><br><span class="line">871</span><br><span class="line">872</span><br><span class="line">873</span><br><span class="line">874</span><br><span class="line">875</span><br><span class="line">876</span><br><span class="line">877</span><br><span class="line">878</span><br><span class="line">879</span><br><span class="line">880</span><br><span class="line">881</span><br><span class="line">882</span><br><span class="line">883</span><br><span class="line">884</span><br><span class="line">885</span><br><span class="line">886</span><br><span class="line">887</span><br><span class="line">888</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> java.util;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.function.Consumer;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span><br><span class="line"> * 允许的元素类型</span><br><span class="line"> * permits all elements,including null</span><br><span class="line"> * </span><br><span class="line"> * 与Vector的区别</span><br><span class="line"> * This class is roughly equivalent to </span><br><span class="line"> * Vector,except that it is unsynchronized</span><br><span class="line"> * </span><br><span class="line"> * 时间复杂度</span><br><span class="line"> * Time Spare:</span><br><span class="line"> * The size,isEmpty,get,set,iterator,</span><br><span class="line"> * and listIterator operations run in</span><br><span class="line"> * constant time.</span><br><span class="line"> * The add operation runs in amortized</span><br><span class="line"> * constant time,that is,adding n elements</span><br><span class="line"> * requires O(n) time.</span><br><span class="line"> * </span><br><span class="line"> * size与capacity</span><br><span class="line"> * increase the capacity of an ArrayList</span><br><span class="line"> * instance before adding a large number</span><br><span class="line"> * of elements using the ensureCapacity</span><br><span class="line"> * operation,which may reduce the amount</span><br><span class="line"> * of incremental reallocation.</span><br><span class="line"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//这里虽然使用E，但elementData数组的元素类型却是Object，</span></span><br><span class="line"><span class="comment">//E的作用比如在返回数据元素时，先进行强制类型转换成E类型</span></span><br><span class="line"><span class="keyword">public</span> class ArrayList&lt;E&gt; extends AbstractList&lt;E&gt; </span><br><span class="line">		implements List&lt;E&gt;,RandomAccess,Cloneable,java.io.Serializable &#123;</span><br><span class="line"><span class="comment">//6260652</span></span><br><span class="line"><span class="comment">//http://bugs.java.com/bugdatabase/view_bug.do?bug_id=6260652</span></span><br><span class="line">	</span><br><span class="line">	<span class="comment">//ArrayList的modCount是继承于AbstractList的，没有自己另外重新定义</span></span><br><span class="line">	</span><br><span class="line">	<span class="comment">//没看出来在哪里使用，因为使用ctrl+鼠标没发现被用到</span></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="built_in">int</span> DEFAULT_CAPACITY=<span class="number">10</span>;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//当创建的构造函数中的initialCapacity为0时，使用这一个</span></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">Object</span>[] EMPTY_ELEMENTDATA=&#123;&#125;;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//当创建的构造函数的参数为空时，使用这一个</span></span><br><span class="line">	<span class="comment">//虽然与EMPTY_E&gt;EMENTDATA都是初始长度为0的Object数组</span></span><br><span class="line">	<span class="comment">//不同之处在于如果新添加一个元素时</span></span><br><span class="line">	<span class="comment">//当elementData=EMPTY_ELEMENTDATA时，动态扩涨后的elementData.length为1</span></span><br><span class="line">	<span class="comment">//当elementData=DEFAULTCAPACITY_EMPTY_ELEMENTDATA时，动态扩涨后的elementData.length为10</span></span><br><span class="line">	<span class="comment">//并且，第一个元素添加之前elementData是等于EMPTY_ELEMENTDATA或DEFAULTCAPACITY_EMPTY_ELEMENTDATA</span></span><br><span class="line">	<span class="comment">//当第一个元素添加进来后，elementData就不再指向EMPTY_ELEMENTDATA或DEFAULTCAPACITY_EMPTY_ELEMENTDATA</span></span><br><span class="line">	<span class="comment">//所以EMPTY_ELEMENTDATA或DEFAULTCAPACITY_EMPTY_ELEMENTDATA的作用只是用来判断，</span></span><br><span class="line">	<span class="comment">//第一次添加一个元素时，elementData.length是设置为1还是10而已</span></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">Object</span>[] DEFAULTCAPACITY_EMPTY_ELEMENTDATA=&#123;&#125;;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//transient关键字是指在序列化时，对这个字段不进行存储</span></span><br><span class="line">	<span class="keyword">transient</span> <span class="keyword">Object</span>[] elementData;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//构造函数没有这个字段进行初始化，因为类中的基本数据类型</span></span><br><span class="line">	<span class="comment">//会被初始化为0</span></span><br><span class="line">	<span class="keyword">private</span> <span class="built_in">int</span> <span class="built_in">size</span>;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">public</span> ArrayList(<span class="built_in">int</span> initialCapacity)&#123;</span><br><span class="line">		<span class="keyword">if</span>(initialCapacity&gt;<span class="number">0</span>)&#123;</span><br><span class="line">			<span class="keyword">this</span>.elementData=<span class="keyword">new</span> <span class="keyword">Object</span>[initialCapacity];</span><br><span class="line">		&#125;<span class="keyword">else</span> <span class="keyword">if</span>(initialCapacity==<span class="number">0</span>)&#123;</span><br><span class="line">			<span class="keyword">this</span>.elementData=EMPTY_ELEMENTDATA;</span><br><span class="line">		&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Illegal Capacity: "</span>+initialCapacity);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">public</span> ArrayList()&#123;</span><br><span class="line">		<span class="keyword">this</span>.elementData=DEFAULTCAPACITY_EMPTY_ELEMENTDATA;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">public</span> ArrayList(Collection&lt;? extends E&gt; c)&#123;</span><br><span class="line">	    <span class="comment">/**</span><br><span class="line">	     * 之前的源码解读中有说过，这个数组转换其实是浅复制，并不是深复制</span><br><span class="line">	     * 而且java中提供的基本上都是浅复制</span><br><span class="line">		 * 这里使用的全是Object []，而不是E []</span><br><span class="line">		 * 因为Object是所有类的基类，所以在访问ArrayList中的某个元素时，访问到的是</span><br><span class="line">		 * Object类型。因此，只要在访问的元素前加上(E)就会转变成原有的类型。</span><br><span class="line">		 */</span></span><br><span class="line">		elementData=c.toArray();</span><br><span class="line">		<span class="comment">//对size赋值，并进行判断</span></span><br><span class="line">		<span class="keyword">if</span>((<span class="built_in">size</span>=elementData.length)!=<span class="number">0</span>)&#123;</span><br><span class="line">			<span class="keyword">if</span>(elementData.getClass()!=<span class="keyword">Object</span>[].class)&#123;</span><br><span class="line">				elementData=Arrays.copyOf(elementData, <span class="built_in">size</span>,<span class="keyword">Object</span>[].class);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">			<span class="keyword">this</span>.elementData=EMPTY_ELEMENTDATA;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//elementData的长度修改为size的长度</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> trimToSize()&#123;</span><br><span class="line">		<span class="comment">//结构性的改变，对modCount进行修改</span></span><br><span class="line">		modCount++;</span><br><span class="line">		<span class="keyword">if</span>(<span class="built_in">size</span>&lt;elementData.length)&#123;</span><br><span class="line">			elementData=(<span class="built_in">size</span>==<span class="number">0</span>)</span><br><span class="line">					?EMPTY_ELEMENTDATA</span><br><span class="line">					:Arrays.copyOf(elementData, <span class="built_in">size</span>);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">/**</span><br><span class="line">	 * ensureCapacity(int minCapacity)与</span><br><span class="line">	 * ensureCapacityInternal(int minCapacity)的区别为：</span><br><span class="line">	 * </span><br><span class="line">	 * 上一个如果elementData ==DEFAULTCAPACITY_EMPTY_ELEMENTDATA</span><br><span class="line">	 * 并且minCapacity&lt;DEFAULT_CAPACITY则不会调用ensureExplicitCapacity(minCapacity)</span><br><span class="line">	 * </span><br><span class="line">	 * 下一个是不管什么情况都会调用ensureExplicitCapacity(minCapacity)</span><br><span class="line">	 * </span><br><span class="line">	 */</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> ensureCapacity(<span class="built_in">int</span> minCapacity)&#123;</span><br><span class="line">		<span class="built_in">int</span> minExpand=(elementData !=DEFAULTCAPACITY_EMPTY_ELEMENTDATA)</span><br><span class="line">			? <span class="number">0</span></span><br><span class="line">			: DEFAULT_CAPACITY;</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">if</span>(minCapacity &gt; minExpand)&#123;</span><br><span class="line">			ensureExplicitCapacity(minCapacity);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">void</span> ensureCapacityInternal(<span class="built_in">int</span> minCapacity)&#123;</span><br><span class="line">		<span class="comment">//如果是DEDAULTCAPACITY_EMPTY_ELEMENTDATA模式下</span></span><br><span class="line">		<span class="comment">//则至少要扩充数要从DEFAULT_CAPACITY起</span></span><br><span class="line">		<span class="keyword">if</span>(elementData==DEFAULTCAPACITY_EMPTY_ELEMENTDATA)&#123;</span><br><span class="line">			minCapacity=Math.<span class="built_in">max</span>(DEFAULT_CAPACITY,minCapacity);</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">		ensureExplicitCapacity(minCapacity);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">void</span> ensureExplicitCapacity(<span class="built_in">int</span> minCapacity)&#123;</span><br><span class="line">		<span class="comment">//如果minCapacity-elementData.length&lt;=0，则没有进行扩充</span></span><br><span class="line">		<span class="comment">//为什么还要对modCount++呢？</span></span><br><span class="line">		<span class="comment">//因为add操作里面没有对modCount进行加1操作，所有与add相关使</span></span><br><span class="line">		<span class="comment">//容量扩充导致结构变化的modCount都放到ensureExplicitCapacity中了</span></span><br><span class="line">		modCount++;</span><br><span class="line">		</span><br><span class="line">		<span class="comment">//大于0说明容量不够，要重新扩充了</span></span><br><span class="line">		<span class="keyword">if</span>(minCapacity-elementData.length&gt;<span class="number">0</span>)&#123;</span><br><span class="line">			grow(minCapacity);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="built_in">int</span> MAX_ARRAY_SIZE=Integer.MAX_VALUE-<span class="number">8</span>;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">void</span> grow(<span class="built_in">int</span> minCapacity)&#123;</span><br><span class="line">		<span class="built_in">int</span> oldCapacity=elementData.length;</span><br><span class="line">		<span class="built_in">int</span> newCapacity=oldCapacity+(oldCapacity&gt;&gt;<span class="number">1</span>);</span><br><span class="line">		<span class="keyword">if</span>(newCapacity-minCapacity&lt;<span class="number">0</span>)&#123;</span><br><span class="line">			newCapacity=minCapacity;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">//int i=2147483647;</span></span><br><span class="line">		<span class="comment">//int j=i+1;</span></span><br><span class="line">		<span class="comment">//1：if(j&gt;i)为false;</span></span><br><span class="line">		<span class="comment">//2：if(j-i&gt;0)为true;</span></span><br><span class="line">		<span class="comment">//这就是为什么要在hugeCapacity中进行判断是否是小于0;</span></span><br><span class="line">		<span class="comment">//</span></span><br><span class="line">		<span class="keyword">if</span>(newCapacity-MAX_ARRAY_SIZE&gt;<span class="number">0</span>)&#123;</span><br><span class="line">			newCapacity=hugeCapacity(minCapacity);</span><br><span class="line">		&#125;</span><br><span class="line">		elementData=Arrays.copyOf(elementData, newCapacity);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="built_in">int</span> hugeCapacity(<span class="built_in">int</span> minCapacity)&#123;</span><br><span class="line">		<span class="keyword">if</span>(minCapacity&lt;<span class="number">0</span>)&#123;</span><br><span class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> OutOfMemoryError();</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">/**</span><br><span class="line">		 * 这里觉得有点多余，minCapacity若非负数，</span><br><span class="line">		 * 由grow方法中判断已经可以得到minCapacity会比MAX_ARRAY_SIZE大</span><br><span class="line">		 */</span></span><br><span class="line">		<span class="keyword">return</span> (minCapacity&gt;MAX_ARRAY_SIZE)?</span><br><span class="line">				Integer.MAX_VALUE:</span><br><span class="line">				MAX_ARRAY_SIZE;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">public</span> <span class="built_in">int</span> <span class="built_in">size</span>()&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="built_in">size</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">public</span> <span class="built_in">boolean</span> isEmpty()&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="built_in">size</span>==<span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">/**</span><br><span class="line">	 * ArrayList继承于AbstractList，而AbstractList中的contains</span><br><span class="line">	 * 是基于迭代器实现的。但ArrayList重写了contains，不是使用迭代器的方法</span><br><span class="line">	 * 而是使用indexOf方法，但indexOf方法是通过遍历级数来实现的，并不是通过迭代器  	 */</span></span><br><span class="line">	<span class="keyword">public</span> <span class="built_in">boolean</span> contains(<span class="keyword">Object</span> o)&#123;</span><br><span class="line">		<span class="keyword">return</span> indexOf(o)&gt;=<span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">/**</span><br><span class="line">	 * 找出元素第一次出现的位置</span><br><span class="line">	 * 如果没找到就返回-1</span><br><span class="line">	 */</span></span><br><span class="line">	<span class="keyword">public</span> <span class="built_in">int</span> indexOf(<span class="keyword">Object</span> o)&#123;</span><br><span class="line">		<span class="keyword">if</span>(o==<span class="keyword">null</span>)&#123;</span><br><span class="line">			<span class="keyword">for</span>(<span class="built_in">int</span> i=<span class="number">0</span>;i&lt;elementData.length;i++)&#123;</span><br><span class="line">				<span class="keyword">if</span>(elementData[i]==<span class="keyword">null</span>)&#123;</span><br><span class="line">					<span class="keyword">return</span> i;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span>&#123;</span><br><span class="line">			<span class="keyword">for</span>(<span class="built_in">int</span> i=<span class="number">0</span>;i&lt;elementData.length;i++)&#123;</span><br><span class="line">				<span class="keyword">if</span>(elementData[i].equals(o))&#123;</span><br><span class="line">					<span class="keyword">return</span> i;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">public</span> <span class="built_in">int</span> lastIndexOf(<span class="keyword">Object</span> o)&#123;</span><br><span class="line">		<span class="keyword">if</span>(o==<span class="keyword">null</span>)&#123;</span><br><span class="line">			<span class="keyword">for</span>(<span class="built_in">int</span> i=elementData.length-<span class="number">1</span>;i&gt;=<span class="number">0</span>;i--)&#123;</span><br><span class="line">				<span class="keyword">if</span>(elementData[i]==<span class="keyword">null</span>)&#123;</span><br><span class="line">					<span class="keyword">return</span> i;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span>&#123;</span><br><span class="line">			<span class="keyword">for</span>(<span class="built_in">int</span> i=elementData.length-<span class="number">1</span>;i&gt;=<span class="number">0</span>;i--)&#123;</span><br><span class="line">				<span class="keyword">if</span>(elementData[i].equals(o))&#123;</span><br><span class="line">					<span class="keyword">return</span> i;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">/**</span><br><span class="line">	 * 是一个浅复制</span><br><span class="line">	 */</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">Object</span> clone()&#123;</span><br><span class="line">		<span class="keyword">try</span>&#123;</span><br><span class="line">			<span class="comment">//super.clone中的super是AbstractList</span></span><br><span class="line">			<span class="comment">//而ArrayList中的clone()是继承于Object中的clone()方法</span></span><br><span class="line">			<span class="comment">//所以实质上调用的是Object中的clone()方法</span></span><br><span class="line">			<span class="comment">//Object中的clone方法只是将各个数据域进行复制创建而已</span></span><br><span class="line">			<span class="comment">//所以，如果数据域只是基本数据类型，或是类似于String这种类</span></span><br><span class="line">			<span class="comment">//则不会有多大问题，可以认为是深复制，但其它基本上涉及到引用</span></span><br><span class="line">			<span class="comment">//大部分都为浅复制。</span></span><br><span class="line">			ArrayList&lt;?&gt; v=(ArrayList&lt;?&gt;)<span class="keyword">super</span>.clone();</span><br><span class="line">			</span><br><span class="line">			<span class="comment">//这里如果elementData里的元素是基本类型或是类似于String</span></span><br><span class="line">			<span class="comment">//ArrayList是深复制，否则就是浅复制</span></span><br><span class="line">			<span class="comment">//例如elementData的对象是可改变对象的引用</span></span><br><span class="line">			<span class="comment">//如：</span></span><br><span class="line">			<span class="comment">//class Test012&#123;</span></span><br><span class="line">			<span class="comment">//	public String s1;	</span></span><br><span class="line">			<span class="comment">//	public Test012(String s1)&#123;</span></span><br><span class="line">			<span class="comment">//		this.s1=s1;</span></span><br><span class="line">			<span class="comment">//	&#125;</span></span><br><span class="line">			<span class="comment">//&#125;</span></span><br><span class="line">			<span class="comment">//则如果改变了elementData中某个元素的s1的值</span></span><br><span class="line">			<span class="comment">//则会导致两都都修改，因为elementData只是引用</span></span><br><span class="line">			<span class="comment">//不同，但引用的值（即元素）是一样的</span></span><br><span class="line">			v.elementData=Arrays.copyOf(elementData, <span class="built_in">size</span>);</span><br><span class="line">			v.modCount=<span class="number">0</span>;</span><br><span class="line">			<span class="keyword">return</span> v;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">catch</span>(CloneNotSupportedException e)&#123;</span><br><span class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> InternalError(e);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">/**</span><br><span class="line">	 * 同clone，如果elementData不是像String这类非可变的对象</span><br><span class="line">	 * 则对返回的Object[]修改对象里面的值，也会同步到原elementData</span><br><span class="line">	 * 中的对应对象里面的值。</span><br><span class="line">	 */</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">Object</span>[] toArray()&#123;</span><br><span class="line">		<span class="keyword">return</span> Arrays.copyOf(elementData, <span class="built_in">size</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">/**</span><br><span class="line">	 * 第一种a.length&lt;size时，不会直接修改a</span><br><span class="line">	 * 所以需要使a=toArray(T[] a)</span><br><span class="line">	 * 才会达到修改a的目的</span><br><span class="line">	 * </span><br><span class="line">	 * 第二种a.leng&gt;=size时，会直接修改a</span><br><span class="line">	 * 所以就不需要令a=返回值了</span><br><span class="line">	 */</span></span><br><span class="line">	<span class="keyword">public</span> &lt;T&gt; T[] toArray(T[] a)&#123;</span><br><span class="line">		<span class="keyword">if</span>(a.length&lt;<span class="built_in">size</span>)&#123;</span><br><span class="line">			<span class="keyword">return</span> (T[])Arrays.copyOf(elementData,<span class="built_in">size</span>,a.getClass());</span><br><span class="line">		&#125;</span><br><span class="line">		System.arraycopy(elementData, <span class="number">0</span>, a, <span class="number">0</span>, <span class="built_in">size</span>);</span><br><span class="line">		<span class="keyword">if</span>(a.length&gt;<span class="built_in">size</span>)&#123;</span><br><span class="line">			a[<span class="built_in">size</span>]=<span class="keyword">null</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> a;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	E elementData(<span class="built_in">int</span> index)&#123;</span><br><span class="line">		<span class="keyword">return</span> (E) elementData[index];</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">public</span> E <span class="built_in">get</span>(<span class="built_in">int</span> index)&#123;</span><br><span class="line">		rangeCheck(index);</span><br><span class="line">		<span class="keyword">return</span> elementData(index);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">public</span> E <span class="built_in">set</span>(<span class="built_in">int</span> index,E element)&#123;</span><br><span class="line">		rangeCheck(index);</span><br><span class="line">	</span><br><span class="line">		E original=elementData(index);</span><br><span class="line">		elementData[index]=element;</span><br><span class="line">		<span class="keyword">return</span> original;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">public</span> <span class="built_in">boolean</span> <span class="built_in">add</span>(E e)&#123;</span><br><span class="line">		ensureCapacityInternal(<span class="built_in">size</span>+<span class="number">1</span>);</span><br><span class="line">		elementData[<span class="built_in">size</span>++]=e;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="built_in">add</span>(<span class="built_in">int</span> index,E element)&#123;</span><br><span class="line">		rangeCheckForAdd(index);</span><br><span class="line">		ensureCapacityInternal(<span class="built_in">size</span>+<span class="number">1</span>);</span><br><span class="line">		</span><br><span class="line">		<span class="comment">//使用数组复制将index开始，第个元素对应的往后移一位</span></span><br><span class="line">		System.arraycopy(elementData, index, elementData, index+<span class="number">1</span>, <span class="built_in">size</span>-index);</span><br><span class="line">		elementData[index]=element;</span><br><span class="line">		<span class="built_in">size</span>++;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">public</span> E remove(<span class="built_in">int</span> index)&#123;</span><br><span class="line">		rangeCheck(index);</span><br><span class="line">		</span><br><span class="line">		modCount++;</span><br><span class="line">		E original=elementData(index);</span><br><span class="line">		<span class="keyword">if</span>(<span class="built_in">size</span>-index-<span class="number">1</span>&gt;<span class="number">0</span>)&#123;</span><br><span class="line">			System.arraycopy(elementData, index+<span class="number">1</span>, elementData, index, <span class="built_in">size</span>-index-<span class="number">1</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">//让垃圾回收器知道，这个元素无效，可以回收了</span></span><br><span class="line">		elementData[--<span class="built_in">size</span>]=<span class="keyword">null</span>;</span><br><span class="line">		<span class="keyword">return</span> original;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//与remove的区别：</span></span><br><span class="line">	<span class="comment">//1：没有对index进行检查</span></span><br><span class="line">	<span class="comment">//2：没有返回值</span></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">void</span> fastRemove(<span class="built_in">int</span> index)&#123;</span><br><span class="line">		modCount++;</span><br><span class="line">		<span class="keyword">if</span>(<span class="built_in">size</span>-index-<span class="number">1</span>&gt;<span class="number">0</span>)&#123;</span><br><span class="line">			System.arraycopy(elementData, index+<span class="number">1</span>, elementData, index, <span class="built_in">size</span>-index-<span class="number">1</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		elementData[--<span class="built_in">size</span>]=<span class="keyword">null</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">public</span> <span class="built_in">boolean</span> remove(<span class="keyword">Object</span> o)&#123;</span><br><span class="line">		<span class="keyword">if</span>(o==<span class="keyword">null</span>)&#123;</span><br><span class="line">			<span class="keyword">for</span>(<span class="built_in">int</span> i=<span class="number">0</span>;i&lt;<span class="built_in">size</span>;i++)&#123;</span><br><span class="line">				<span class="keyword">if</span>(elementData[i]==<span class="keyword">null</span>)&#123;</span><br><span class="line">					<span class="comment">//不需要判断位置，也不需要返回值</span></span><br><span class="line">					<span class="comment">//所以直接调用fastRemove函数</span></span><br><span class="line">					fastRemove(i);</span><br><span class="line">					<span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span>&#123;</span><br><span class="line">			<span class="keyword">for</span>(<span class="built_in">int</span> i=<span class="number">0</span>;i&lt;<span class="built_in">size</span>;i++)&#123;</span><br><span class="line">				<span class="keyword">if</span>(elementData[i].equals(o))&#123;</span><br><span class="line">					fastRemove(i);</span><br><span class="line">					<span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//clear不是仅仅将size设置为0，也不是直接将elementData设置为null。</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="built_in">clear</span>()&#123;</span><br><span class="line">		modCount++;</span><br><span class="line">		<span class="keyword">for</span>(<span class="built_in">int</span> i=<span class="built_in">size</span>-<span class="number">1</span>;i&gt;=<span class="number">0</span>;i--)&#123;</span><br><span class="line">			elementData[i]=<span class="keyword">null</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">size</span>=<span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">public</span> <span class="built_in">boolean</span> addAll(Collection&lt;? extends E&gt; c)&#123;</span><br><span class="line">		<span class="keyword">Object</span> a[]=c.toArray();</span><br><span class="line">		<span class="built_in">int</span> numNew=a.length;</span><br><span class="line">		ensureCapacityInternal(numNew+<span class="built_in">size</span>);</span><br><span class="line">		System.arraycopy(a, <span class="number">0</span>, elementData, <span class="built_in">size</span>, numNew);</span><br><span class="line">		<span class="built_in">size</span>+=numNew;</span><br><span class="line">		<span class="keyword">return</span> numNew!=<span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">public</span> <span class="built_in">boolean</span> addAll(<span class="built_in">int</span> index,Collection&lt;? extends E&gt; c)&#123;</span><br><span class="line">		rangeCheckForAdd(index);</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">Object</span> a[]=c.toArray();</span><br><span class="line">		<span class="built_in">int</span> numNew=a.length;</span><br><span class="line">		ensureCapacityInternal(numNew+<span class="built_in">size</span>);</span><br><span class="line">		System.arraycopy(elementData, index, elementData, index+numNew, <span class="built_in">size</span>-index);</span><br><span class="line">		System.arraycopy(a, <span class="number">0</span>, elementData, index,numNew);</span><br><span class="line">		<span class="built_in">size</span>+=numNew;</span><br><span class="line">		<span class="keyword">return</span> numNew!=<span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">/**</span><br><span class="line">	 * [fromIndex,toIndex)</span><br><span class="line">	 */</span></span><br><span class="line">	<span class="keyword">protected</span> <span class="keyword">void</span> removeRange(<span class="built_in">int</span> fromIndex,<span class="built_in">int</span> toIndex)&#123;</span><br><span class="line">		modCount++;</span><br><span class="line">		System.arraycopy(elementData,toIndex,elementData,fromIndex,<span class="built_in">size</span>-toIndex);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">public</span> <span class="built_in">boolean</span> removeAll(Collection&lt;?&gt; c)&#123;</span><br><span class="line">		Objects.requireNonNull(c);</span><br><span class="line">		<span class="keyword">return</span> batchRemove(c,<span class="keyword">false</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">public</span> <span class="built_in">boolean</span> retainAll(Collection&lt;?&gt; c)&#123;</span><br><span class="line">		Objects.requireNonNull(c);</span><br><span class="line">		<span class="keyword">return</span> batchRemove(c,<span class="keyword">true</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">private</span> <span class="built_in">boolean</span> batchRemove(Collection&lt;?&gt; c,<span class="built_in">boolean</span> complement)&#123;</span><br><span class="line">		<span class="keyword">final</span> <span class="keyword">Object</span>[] elementData=<span class="keyword">this</span>.elementData;</span><br><span class="line">		<span class="built_in">int</span> r=<span class="number">0</span>,w=<span class="number">0</span>;</span><br><span class="line">		<span class="built_in">boolean</span> modified=<span class="keyword">false</span>;</span><br><span class="line">		<span class="keyword">try</span>&#123;</span><br><span class="line">			<span class="keyword">for</span>(;r&lt;<span class="built_in">size</span>;r++)&#123;</span><br><span class="line">			    <span class="comment">//这里很巧妙了利用了一个complement的boolean变量来判断是删除c中的元素还是保留c中的元素。</span></span><br><span class="line">				<span class="keyword">if</span>(c.contains(elementData[r])==complement)&#123;</span><br><span class="line">					elementData[w++]=elementData[r];</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">finally</span>&#123;</span><br><span class="line">			<span class="keyword">if</span>(r!=<span class="built_in">size</span>)&#123;</span><br><span class="line">				System.arraycopy(elementData,r,elementData,w,<span class="built_in">size</span>-r);</span><br><span class="line">				w+=<span class="built_in">size</span>-r;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">if</span>(w!=<span class="built_in">size</span>)&#123;</span><br><span class="line">				<span class="keyword">for</span>(<span class="built_in">int</span> i=w;i&lt;<span class="built_in">size</span>;i++)&#123;</span><br><span class="line">					elementData[i]=<span class="keyword">null</span>;</span><br><span class="line">				&#125;</span><br><span class="line">				modCount+=<span class="built_in">size</span>-w;</span><br><span class="line">				<span class="built_in">size</span>=w;</span><br><span class="line">				modified=<span class="keyword">true</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> modified;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">/**</span><br><span class="line">	 * 既然要将ArrayList的字段序列化（即将elementData序列化），</span><br><span class="line">	 * 那为什么又要用transient修饰elementData呢？回想ArrayList的自动扩容机制，</span><br><span class="line">	 * elementData数组相当于容器，当容器不足时就会再扩充容量，</span><br><span class="line">	 * 但是容器的容量往往都是大于或者等于ArrayList所存元素的个数。</span><br><span class="line">	 * 比如，现在实际有了8个元素，那么elementData数组的容量可能是8x1.5=12，</span><br><span class="line">	 * 如果直接序列化elementData数组，那么就会浪费4个元素的空间，特别是当元素个数非常多时，</span><br><span class="line">	 * 这种浪费是非常不合算的。所以ArrayList的设计者将elementData设计为transient，</span><br><span class="line">	 * 然后在writeObject方法中手动将其序列化，并且只序列化了实际存储的那些元素，而不是整个数组。</span><br><span class="line">	 * </span><br><span class="line">	 * 不过，这个方法与后面readObject方法都是private，而且里面其它地方也没有用到。      * 这两个方法在序列化中有很好的用途：</span><br><span class="line">	 * 一个类实现了序列化的接口（其实只是一个标识），那么它里面不管是基本数据类型还是类对象（只要这个对象的类也实现了序列化接口）</span><br><span class="line">	 * 那么就可以进行序列化。</span><br><span class="line">	 * 感觉其实就是按类在内存中存储，整块搬到硬盘中存储。</span><br><span class="line">	 */</span></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">void</span> writeObject(java.io.ObjectOutputStream s)</span><br><span class="line">		<span class="keyword">throws</span> java.io.IOException&#123;</span><br><span class="line">		<span class="built_in">int</span> expectedModCount=modCount;</span><br><span class="line">		s.defaultWriteObject();</span><br><span class="line">		s.writeInt(<span class="built_in">size</span>);</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">for</span>(<span class="built_in">int</span> i=<span class="number">0</span>;i&lt;<span class="built_in">size</span>;i++)&#123;</span><br><span class="line">			s.writeObject(elementData[i]);</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">if</span>(modCount!=expectedModCount)&#123;</span><br><span class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">void</span> readObject(java.io.ObjectInputStream s)</span><br><span class="line">		<span class="keyword">throws</span> java.io.IOException,ClassNotFoundException&#123;</span><br><span class="line">		elementData=EMPTY_ELEMENTDATA;</span><br><span class="line">		</span><br><span class="line">		s.defaultReadObject();</span><br><span class="line">		s.readInt();</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">if</span>(<span class="built_in">size</span>&gt;<span class="number">0</span>)&#123;</span><br><span class="line">			ensureCapacityInternal(<span class="built_in">size</span>);</span><br><span class="line">			<span class="keyword">Object</span> a[]=elementData;</span><br><span class="line">			<span class="keyword">for</span>(<span class="built_in">int</span> i=<span class="number">0</span>;i&lt;<span class="built_in">size</span>;i++)&#123;</span><br><span class="line">				a[i]=s.readObject();</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">public</span> ListIterator&lt;E&gt; listIterator(<span class="built_in">int</span> index)&#123;</span><br><span class="line">		<span class="keyword">if</span>(index&lt;<span class="number">0</span> || index&gt;<span class="built_in">size</span>)&#123;</span><br><span class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> IndexOutOfBoundsException(<span class="string">"Index: "</span>+index);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">new</span> ListItr(index);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">public</span> ListIterator&lt;E&gt; listIterator()&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">new</span> ListItr(<span class="number">0</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">public</span> Iterator&lt;E&gt; iterator()&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">new</span> Itr();</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">private</span> class Itr implements Iterator&lt;E&gt;&#123;</span><br><span class="line">		<span class="built_in">int</span> <span class="built_in">cursor</span>;</span><br><span class="line">		<span class="built_in">int</span> lastRet=-<span class="number">1</span>;</span><br><span class="line">		<span class="built_in">int</span> expectedModCount=modCount;</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">public</span> <span class="built_in">boolean</span> hasNext()&#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="built_in">cursor</span> != <span class="built_in">size</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">		<span class="comment">//这里与AbstractList不同，这里是直接通过elementData来操作，而不是通过ArrayList中的get方法来获取。但下面的remove方法又是按ArrayList的remove方法来处理。其实没什么差别，只不过一个是通过调用函数来处理，一个是通过直接对数据进行处理。</span></span><br><span class="line">		<span class="keyword">public</span> E next()&#123;</span><br><span class="line">			checkForComodification();</span><br><span class="line">			<span class="built_in">int</span> i=<span class="built_in">cursor</span>;</span><br><span class="line">			<span class="keyword">if</span>(i &gt;= <span class="built_in">size</span>)&#123;</span><br><span class="line">				<span class="keyword">throw</span> <span class="keyword">new</span> NoSuchElementException();</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">Object</span> elementData[]=ArrayList.<span class="keyword">this</span>.elementData;</span><br><span class="line">			<span class="keyword">if</span>(i &gt;= elementData.length)&#123;</span><br><span class="line">				<span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="built_in">cursor</span>=i+<span class="number">1</span>;</span><br><span class="line">			<span class="keyword">return</span> (E)elementData[lastRet=i];</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">		<span class="comment">//删除的是cursor的前一个元素</span></span><br><span class="line">		<span class="keyword">public</span> <span class="keyword">void</span> remove()&#123;</span><br><span class="line">			<span class="keyword">if</span>(lastRet&lt;<span class="number">0</span>)&#123;</span><br><span class="line">				<span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException();</span><br><span class="line">			&#125;</span><br><span class="line">			checkForComodification();</span><br><span class="line">			</span><br><span class="line">			<span class="keyword">try</span>&#123;</span><br><span class="line">				ArrayList.<span class="keyword">this</span>.remove(lastRet);</span><br><span class="line">				<span class="built_in">cursor</span>=lastRet;</span><br><span class="line">				lastRet=-<span class="number">1</span>;</span><br><span class="line">				expectedModCount=modCount;</span><br><span class="line">			&#125;<span class="keyword">catch</span>(IndexOutOfBoundsException ex)&#123;</span><br><span class="line">				<span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">public</span> <span class="keyword">void</span> forEachRemaining(Consumer&lt;? <span class="keyword">super</span> E&gt; consumer)&#123;</span><br><span class="line">			Objects.requireNonNull(consumer);</span><br><span class="line">			<span class="keyword">final</span> <span class="built_in">int</span> <span class="built_in">size</span>=ArrayList.<span class="keyword">this</span>.<span class="built_in">size</span>;</span><br><span class="line">			<span class="built_in">int</span> i=<span class="built_in">cursor</span>;</span><br><span class="line">			<span class="keyword">if</span>(i&gt;=<span class="built_in">size</span>)&#123;</span><br><span class="line">				<span class="keyword">return</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">final</span> <span class="keyword">Object</span>[] elementData=ArrayList.<span class="keyword">this</span>.elementData;</span><br><span class="line">			<span class="keyword">if</span>(i&gt;=elementData.length)&#123;</span><br><span class="line">				<span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">while</span>(i!=<span class="built_in">size</span> &amp;&amp; modCount==expectedModCount)&#123;</span><br><span class="line">				consumer.accept((E) elementData[i++]);</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="built_in">cursor</span>=i;</span><br><span class="line">			lastRet=i-<span class="number">1</span>;</span><br><span class="line">			checkForComodification();</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">final</span> <span class="keyword">void</span> checkForComodification()&#123;</span><br><span class="line">			<span class="keyword">if</span>(modCount != expectedModCount)&#123;</span><br><span class="line">				<span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">private</span> class ListItr extends Itr implements ListIterator&lt;E&gt;&#123;</span><br><span class="line">		ListItr(<span class="built_in">int</span> index)&#123;</span><br><span class="line">			<span class="keyword">super</span>();</span><br><span class="line">			<span class="built_in">cursor</span>=index;</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">public</span> <span class="built_in">boolean</span> hasPrevious()&#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="built_in">cursor</span> != <span class="number">0</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">public</span> <span class="built_in">int</span> nextIndex()&#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="built_in">cursor</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">public</span> <span class="built_in">int</span> previousIndex()&#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="built_in">cursor</span>-<span class="number">1</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">public</span> E previous()&#123;</span><br><span class="line">			checkForComodification();</span><br><span class="line">			<span class="built_in">int</span> i=<span class="built_in">cursor</span>-<span class="number">1</span>;</span><br><span class="line">			<span class="keyword">if</span>(i&lt;<span class="number">0</span>)&#123;</span><br><span class="line">				<span class="keyword">throw</span> <span class="keyword">new</span> NoSuchElementException();</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="comment">//这里为什么要重新定义一个Object[]</span></span><br><span class="line">			<span class="comment">//用原来的不可以么？</span></span><br><span class="line">			<span class="keyword">Object</span> elementData[]=ArrayList.<span class="keyword">this</span>.elementData;</span><br><span class="line">			<span class="keyword">if</span>(i&gt;=elementData.length)&#123;</span><br><span class="line">				<span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="built_in">cursor</span>=i;</span><br><span class="line">			<span class="keyword">return</span> (E) elementData[lastRet=i];</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">public</span> <span class="keyword">void</span> <span class="built_in">set</span>(E e)&#123;</span><br><span class="line">			<span class="keyword">if</span>(lastRet &lt; <span class="number">0</span>)&#123;</span><br><span class="line">				<span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException();</span><br><span class="line">			&#125;</span><br><span class="line">			checkForComodification();</span><br><span class="line">			</span><br><span class="line">			<span class="keyword">try</span>&#123;</span><br><span class="line">				ArrayList.<span class="keyword">this</span>.<span class="built_in">set</span>(lastRet, e);</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">catch</span>(IndexOutOfBoundsException ex)&#123;</span><br><span class="line">				<span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">public</span> <span class="keyword">void</span> <span class="built_in">add</span>(E e)&#123;</span><br><span class="line">			checkForComodification();</span><br><span class="line">			<span class="keyword">try</span>&#123;</span><br><span class="line">				<span class="built_in">int</span> i=<span class="built_in">cursor</span>;</span><br><span class="line">				ArrayList.<span class="keyword">this</span>.<span class="built_in">add</span>(i,e);</span><br><span class="line">				<span class="built_in">cursor</span>=i+<span class="number">1</span>;</span><br><span class="line">				lastRet=i;</span><br><span class="line">				expectedModCount=modCount;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">catch</span>(IndexOutOfBoundsException ex)&#123;</span><br><span class="line">				<span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;	</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">public</span> List&lt;E&gt; subList(<span class="built_in">int</span> fromIndex,<span class="built_in">int</span> toIndex)&#123;</span><br><span class="line">		subListRangeCheck(fromIndex,toIndex,<span class="built_in">size</span>);</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">new</span> SubList(<span class="keyword">this</span>,<span class="number">0</span>,fromIndex,toIndex);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">static</span> <span class="keyword">void</span> subListRangeCheck(<span class="built_in">int</span> fromIndex,<span class="built_in">int</span> toIndex,<span class="built_in">int</span> <span class="built_in">size</span>)&#123;</span><br><span class="line">		<span class="keyword">if</span>(fromIndex&lt;<span class="number">0</span>)&#123;</span><br><span class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> IndexOutOfBoundsException(<span class="string">"fromIndex = "</span>+fromIndex);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(toIndex&gt;<span class="built_in">size</span>)&#123;</span><br><span class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> IndexOutOfBoundsException(<span class="string">"toIndex = "</span>+toIndex);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(fromIndex&gt;toIndex)&#123;</span><br><span class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"fromIndex("</span>+fromIndex+<span class="string">") &gt; toIndex("</span>+toIndex+<span class="string">")"</span>);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> class SubList extends AbstractList&lt;E&gt; implements RandomAccess&#123;</span><br><span class="line">		<span class="keyword">private</span> <span class="keyword">final</span> AbstractList&lt;E&gt; parent;</span><br><span class="line">		<span class="keyword">private</span> <span class="keyword">final</span> <span class="built_in">int</span> parentOffset;</span><br><span class="line">		<span class="keyword">private</span> <span class="keyword">final</span> <span class="built_in">int</span> offset;</span><br><span class="line">		<span class="built_in">int</span> <span class="built_in">size</span>;</span><br><span class="line">		</span><br><span class="line">		SubList(AbstractList&lt;E&gt; parent,</span><br><span class="line">				<span class="built_in">int</span> offset,<span class="built_in">int</span> fromIndex,<span class="built_in">int</span> toIndex)&#123;</span><br><span class="line">			<span class="keyword">this</span>.parent=parent;</span><br><span class="line">			<span class="comment">//好像是为了防止子链的子链</span></span><br><span class="line">			<span class="comment">//例如第一个子链是[3,12)</span></span><br><span class="line">			<span class="comment">//第二个子链是第一个子链的子链取[1,3)</span></span><br><span class="line">			<span class="comment">//按道理第二个子链处理的是原链的[4,6)</span></span><br><span class="line">			<span class="comment">//如果没有offset就变成原连的[1,3)</span></span><br><span class="line">			<span class="comment">//第一次是ArrayList.subList获取子链List</span></span><br><span class="line">			<span class="comment">//第二次获取子链是SubList的subList</span></span><br><span class="line">			<span class="comment">//不再是ArrayList的subList了</span></span><br><span class="line">			<span class="comment">//调用ArrayList.subList中的offset参数值是0</span></span><br><span class="line">			<span class="comment">//但调用SubList的subList的offset参数值</span></span><br><span class="line">			<span class="comment">//是SubList中的的成员变量offset，而不是0</span></span><br><span class="line">			<span class="keyword">this</span>.parentOffset=fromIndex;</span><br><span class="line">			<span class="keyword">this</span>.offset=offset+fromIndex;</span><br><span class="line">			<span class="keyword">this</span>.<span class="built_in">size</span>=toIndex-fromIndex;</span><br><span class="line">			<span class="keyword">this</span>.modCount=ArrayList.<span class="keyword">this</span>.modCount;</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">		<span class="comment">/**</span><br><span class="line">		 * 为什么set与get用的是ArrayList对应的elementData</span><br><span class="line">		 * 而其它add,remove等用的是parent</span><br><span class="line">		 * 虽然都可以完成，为什么不进行统一？</span><br><span class="line">		 */</span></span><br><span class="line">		<span class="keyword">public</span> E <span class="built_in">set</span>(<span class="built_in">int</span> index,E e)&#123;</span><br><span class="line">			<span class="comment">//这里是从新定义了rangeCheck函数，不是</span></span><br><span class="line">			<span class="comment">//ArrayList中的rangeCheck，所以对应的</span></span><br><span class="line">			<span class="comment">//index也不需要加上偏移值，因为函数里的size</span></span><br><span class="line">			<span class="comment">//指的是SubList中的size</span></span><br><span class="line">			rangeCheck(index);</span><br><span class="line">			checkForComodification();</span><br><span class="line">			E oldValue=ArrayList.<span class="keyword">this</span>.elementData(offset+index);</span><br><span class="line">			ArrayList.<span class="keyword">this</span>.elementData[offset+index]=e;</span><br><span class="line">			<span class="keyword">return</span> oldValue;</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">public</span> E <span class="built_in">get</span>(<span class="built_in">int</span> index)&#123;</span><br><span class="line">			rangeCheck(index);</span><br><span class="line">			checkForComodification();</span><br><span class="line">			<span class="keyword">return</span> ArrayList.<span class="keyword">this</span>.elementData(offset+index);</span><br><span class="line">		&#125;</span><br><span class="line">			</span><br><span class="line">		<span class="keyword">public</span> <span class="built_in">int</span> <span class="built_in">size</span>()&#123;</span><br><span class="line">			checkForComodification();</span><br><span class="line">			<span class="keyword">return</span> <span class="built_in">size</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">public</span> <span class="keyword">void</span> <span class="built_in">add</span>(<span class="built_in">int</span> index,E e)&#123;</span><br><span class="line">			rangeCheckForAdd(index);</span><br><span class="line">			checkForComodification();</span><br><span class="line">			<span class="comment">//可以用offset的这种方式，此时应该用ArrayList的elementData</span></span><br><span class="line">			<span class="comment">//也可以用parentOffset这种方式，此时用parent的elementData</span></span><br><span class="line">			parent.<span class="built_in">add</span>(parentOffset+index,e);</span><br><span class="line">			<span class="keyword">this</span>.modCount=parent.modCount;</span><br><span class="line">			<span class="keyword">this</span>.<span class="built_in">size</span>++;</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">public</span> E remove(<span class="built_in">int</span> index)&#123;</span><br><span class="line">			rangeCheck(index);</span><br><span class="line">			checkForComodification();</span><br><span class="line">			E result=parent.remove(parentOffset+index);</span><br><span class="line">			<span class="keyword">this</span>.modCount=parent.modCount;</span><br><span class="line">			<span class="built_in">size</span>--;</span><br><span class="line">			<span class="keyword">return</span> result;</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">protected</span> <span class="keyword">void</span> removeRange(<span class="built_in">int</span> fromIndex,<span class="built_in">int</span> toIndex)&#123;</span><br><span class="line">			checkForComodification();</span><br><span class="line">			parent.removeRange(parentOffset+fromIndex,</span><br><span class="line">								parentOffset+toIndex);</span><br><span class="line">			<span class="keyword">this</span>.modCount=parent.modCount;</span><br><span class="line">			<span class="keyword">this</span>.<span class="built_in">size</span>=<span class="keyword">this</span>.<span class="built_in">size</span>-(toIndex-fromIndex);</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">public</span> <span class="built_in">boolean</span> addAll(Collection&lt;? extends E&gt; c)&#123;</span><br><span class="line">			<span class="keyword">return</span> addAll(<span class="keyword">this</span>.<span class="built_in">size</span>,c);</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">		<span class="comment">//用parent这种方式调用的话，会依次递归调用</span></span><br><span class="line">		<span class="comment">//子子链List调用addAll，调用的是子链List的addAll</span></span><br><span class="line">		<span class="comment">//子链List调用addAll，调用的是ArrayList的addAll</span></span><br><span class="line">		<span class="keyword">public</span> <span class="built_in">boolean</span> addAll(<span class="built_in">int</span> index,Collection&lt;? extends E&gt; c)&#123;</span><br><span class="line">			rangeCheckForAdd(index);</span><br><span class="line">			<span class="built_in">int</span> cSize=c.<span class="built_in">size</span>();</span><br><span class="line">			<span class="keyword">if</span>(cSize==<span class="number">0</span>)&#123;</span><br><span class="line">				<span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			</span><br><span class="line">			checkForComodification();</span><br><span class="line">			parent.addAll(index+parentOffset,c);</span><br><span class="line">			<span class="keyword">this</span>.modCount=parent.modCount;</span><br><span class="line">			<span class="keyword">this</span>.<span class="built_in">size</span>+=c.<span class="built_in">size</span>();</span><br><span class="line">			<span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">public</span> Iterator&lt;E&gt; iterator()&#123;</span><br><span class="line">			<span class="keyword">return</span> listIterator();</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">public</span> ListIterator&lt;E&gt; listIterator(<span class="keyword">final</span> <span class="built_in">int</span> index)&#123;</span><br><span class="line">			checkForComodification();</span><br><span class="line">			rangeCheckForAdd(index);</span><br><span class="line">			<span class="keyword">final</span> <span class="built_in">int</span> offset=<span class="keyword">this</span>.offset;</span><br><span class="line">			</span><br><span class="line">			<span class="keyword">return</span> <span class="keyword">new</span> ListIterator&lt;E&gt;()&#123;</span><br><span class="line">				<span class="built_in">int</span> <span class="built_in">cursor</span>=index;</span><br><span class="line">				<span class="built_in">int</span> lastRet=-<span class="number">1</span>;</span><br><span class="line">				<span class="built_in">int</span> expectedModCount=ArrayList.<span class="keyword">this</span>.modCount;</span><br><span class="line">				</span><br><span class="line">				<span class="keyword">public</span> <span class="built_in">boolean</span> hasNext()&#123;</span><br><span class="line">					<span class="keyword">return</span> <span class="built_in">cursor</span> !=SubList.<span class="keyword">this</span>.<span class="built_in">size</span>;</span><br><span class="line">				&#125;</span><br><span class="line">				</span><br><span class="line">				<span class="keyword">public</span> E next()&#123;</span><br><span class="line">					checkForComodification();</span><br><span class="line">					<span class="built_in">int</span> i=<span class="built_in">cursor</span>;</span><br><span class="line">					<span class="keyword">if</span>(i &gt;= SubList.<span class="keyword">this</span>.<span class="built_in">size</span>)&#123;</span><br><span class="line">						<span class="keyword">throw</span> <span class="keyword">new</span> NoSuchElementException();</span><br><span class="line">					&#125;</span><br><span class="line">					<span class="keyword">Object</span> elementData[]=ArrayList.<span class="keyword">this</span>.elementData;</span><br><span class="line">					<span class="keyword">if</span>(offset+i&gt;=elementData.length)&#123;</span><br><span class="line">						<span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();</span><br><span class="line">					&#125;</span><br><span class="line">					<span class="built_in">cursor</span>=i+<span class="number">1</span>;</span><br><span class="line">					<span class="keyword">return</span> (E) elementData[offset+(lastRet=i)];</span><br><span class="line">				&#125;</span><br><span class="line">				</span><br><span class="line">				<span class="keyword">public</span> <span class="built_in">boolean</span> hasPrevious()&#123;</span><br><span class="line">					<span class="keyword">return</span> <span class="built_in">cursor</span> &gt; <span class="number">0</span>;</span><br><span class="line">				&#125;</span><br><span class="line">				</span><br><span class="line">				<span class="keyword">public</span> E previous()&#123;</span><br><span class="line">					checkForComodification();</span><br><span class="line">					<span class="built_in">int</span> i=<span class="built_in">cursor</span>-<span class="number">1</span>;</span><br><span class="line">					<span class="keyword">if</span>(i&lt;<span class="number">0</span>)&#123;</span><br><span class="line">						<span class="keyword">throw</span> <span class="keyword">new</span> NoSuchElementException();</span><br><span class="line">					&#125;</span><br><span class="line">					<span class="keyword">Object</span> elementData[]=ArrayList.<span class="keyword">this</span>.elementData;</span><br><span class="line">					<span class="keyword">if</span>(offset+i &gt;= elementData.length)&#123;</span><br><span class="line">						<span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();</span><br><span class="line">					&#125;</span><br><span class="line">					<span class="built_in">cursor</span>=i;</span><br><span class="line">					<span class="keyword">return</span> (E)elementData[offset+(lastRet=i)];</span><br><span class="line">				&#125;</span><br><span class="line">				</span><br><span class="line">				<span class="keyword">public</span> <span class="keyword">void</span> forEachRemaining(Consumer&lt;? <span class="keyword">super</span> E&gt; consumer)&#123;</span><br><span class="line">					Objects.requireNonNull(consumer);</span><br><span class="line">					<span class="keyword">final</span> <span class="built_in">int</span> <span class="built_in">size</span>=SubList.<span class="keyword">this</span>.<span class="built_in">size</span>;</span><br><span class="line">					<span class="built_in">int</span> i=<span class="built_in">cursor</span>;</span><br><span class="line">					<span class="keyword">if</span>(i &gt;= <span class="built_in">size</span>)&#123;</span><br><span class="line">						<span class="keyword">return</span>;</span><br><span class="line">					&#125;</span><br><span class="line">					<span class="keyword">final</span> <span class="keyword">Object</span> elementData[]=ArrayList.<span class="keyword">this</span>.elementData;</span><br><span class="line">					<span class="keyword">if</span>(offset+i &gt;= elementData.length)&#123;</span><br><span class="line">						<span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();</span><br><span class="line">					&#125;</span><br><span class="line">					</span><br><span class="line">					<span class="keyword">while</span>(i != <span class="built_in">size</span> &amp;&amp; modCount==expectedModCount)&#123;</span><br><span class="line">						consumer.accept((E) elementData[offset+(i++)]);</span><br><span class="line">					&#125;</span><br><span class="line">					lastRet=<span class="built_in">cursor</span>=i;</span><br><span class="line">					checkForComodification();</span><br><span class="line">				&#125;</span><br><span class="line">				</span><br><span class="line">				<span class="keyword">public</span> <span class="built_in">int</span> nextIndex()&#123;</span><br><span class="line">					<span class="keyword">return</span> <span class="built_in">cursor</span>;</span><br><span class="line">				&#125;</span><br><span class="line">				</span><br><span class="line">				<span class="keyword">public</span> <span class="built_in">int</span> previousIndex()&#123;</span><br><span class="line">					<span class="keyword">return</span> <span class="built_in">cursor</span>-<span class="number">1</span>;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;;</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">private</span> <span class="keyword">void</span> rangeCheck(<span class="built_in">int</span> index)&#123;</span><br><span class="line">			<span class="keyword">if</span>(index &lt; <span class="number">0</span> || index &gt;= <span class="keyword">this</span>.<span class="built_in">size</span>)&#123;</span><br><span class="line">				<span class="keyword">throw</span> <span class="keyword">new</span> IndexOutOfBoundsException(outOfBoundsMsg(index));</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">private</span> <span class="keyword">void</span> rangeCheckForAdd(<span class="built_in">int</span> index)&#123;</span><br><span class="line">			<span class="keyword">if</span>(index &lt; <span class="number">0</span> || index &gt; <span class="keyword">this</span>.<span class="built_in">size</span>)&#123;</span><br><span class="line">				<span class="keyword">throw</span> <span class="keyword">new</span> IndexOutOfBoundsException(outOfBoundsMsg(index));</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">private</span> <span class="keyword">String</span> outOfBoundsMsg(<span class="built_in">int</span> index)&#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="string">"Index: "</span>+index+<span class="string">", Size: "</span>+<span class="keyword">this</span>.<span class="built_in">size</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">private</span> <span class="keyword">void</span> checkForComodification()&#123;</span><br><span class="line">			<span class="keyword">if</span>(ArrayList.<span class="keyword">this</span>.modCount != <span class="keyword">this</span>.modCount)&#123;</span><br><span class="line">				<span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">void</span> rangeCheck(<span class="built_in">int</span> index)&#123;</span><br><span class="line">		<span class="keyword">if</span>(index&gt;=<span class="built_in">size</span>)&#123;</span><br><span class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> IndexOutOfBoundsException(outOfBoundsMsg(index));</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">void</span> rangeCheckForAdd(<span class="built_in">int</span> index)&#123;</span><br><span class="line">		<span class="keyword">if</span>(index&gt;<span class="built_in">size</span> || index&lt;<span class="number">0</span>)&#123;</span><br><span class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> IndexOutOfBoundsException(outOfBoundsMsg(index));</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">String</span> outOfBoundsMsg(<span class="built_in">int</span> index)&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="string">"Index: "</span>+index+<span class="string">", Size: "</span>+<span class="built_in">size</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="u5256_u6790"><a href="#u5256_u6790" class="headerlink" title="剖析"></a>剖析</h3><h4 id="u6570_u636E_u6210_u5458"><a href="#u6570_u636E_u6210_u5458" class="headerlink" title="数据成员"></a>数据成员</h4><p><code>DEFAULT_CAPACITY</code>：虽说是默认构造函数时创建的元素个数为这个值，但源码中并没有体现，可省略不看。<br><code>elementData</code>：数据存储的地方，元素类型为Object []。<br><code>EMPTY_ELEMENTDATA</code>与<code>DEFAULTCAPACITY_EMPTY_ELEMENTDATA</code>：这两个都是长度为0的Object数组。当使用默认构造函数创建时，便令elementData=DEFAULTCAPACITY_EMPTY_ELEMENTDATA;当使用带数值长度为0来创建对象时，便令elementData=EMPTY_ELEMENTDATA。这两个主要主要作用：<br>其一 ，不同之处在于如果新添加一个元素时，当elementData=EMPTY_ELEMENTDATA时，动态扩涨后的elementData.length为1，当elementData=DEFAULTCAPACITY_EMPTY_ELEMENTDATA时，动态扩涨后的elementData.length为10<br>其二，是用于在判断一些条件时，如果长度为0时，就直接令elementData=EMPTY_ELEMENTDATA，这样比写elementData={}意义会明确一些。<br><code>modCount</code>：这个是继承于AbstractList类的，详见AbstractList。</p>
<h4 id="u65B9_u6CD5"><a href="#u65B9_u6CD5" class="headerlink" title="方法"></a>方法</h4><h5 id="u52A8_u6001_u6269_u5F20"><a href="#u52A8_u6001_u6269_u5F20" class="headerlink" title="动态扩张"></a>动态扩张</h5><p>1：<code>public void ensureCapacity(int minCapacity)</code>：public类型，给外部使用；<br>2：<code>private void ensureCapacityInternal(int minCapacity)</code>：private类型，是内部比如add等方法时，先进是否需要扩张判断<br>3：<code>private void ensureExplicitCapacity(int minCapacity)</code>：以上1，2都是调用这个方法。里面有一个点需要注意：<code>modCount++;</code>，因为比如add方法里面没有对modCount进行操作，而是放到这里。因为不管你是否要扩张，add总是要添加，并且add添加时都会调用是否要动态扩张的方法，所以将modCount的操作放在这里。当然，关于remove等操作造成modCount修改自然不会在这里。</p>
<h5 id="u5B9E_u73B0_u7EE7_u627F_u8FC7_u6765_u7684_u65B9_u6CD5"><a href="#u5B9E_u73B0_u7EE7_u627F_u8FC7_u6765_u7684_u65B9_u6CD5" class="headerlink" title="实现继承过来的方法"></a>实现继承过来的方法</h5><p>从Iterator，Iterable，Collection，ListIterator，List中示实现的接口等在这里实现了。<br>1.<code>size()</code>。数据域中定义了size变量，直接返回这个数值。<br>2.<code>get(index)</code>。数据域中是Object数组，因此可以通过elementData[index]来获取，只是加上了一些条件控件。<br>3.<code>set(index,element)</code>。同get<br>4.<code>add(index,element)</code>。也是通过对elementData操作，包含了可能的动态扩张。<br>5.<code>remove(index)</code>。也是对elementData操作，并且使用System.arraycopy暴力复制的方法来将(index,size)复制到前一个位置。</p>
<h5 id="u5173_u4E8E_u6DFB_u52A0_u4E0E_u5220_u9664_u7684_u5B9E_u8D28"><a href="#u5173_u4E8E_u6DFB_u52A0_u4E0E_u5220_u9664_u7684_u5B9E_u8D28" class="headerlink" title="关于添加与删除的实质"></a>关于添加与删除的实质</h5><p>以add或remove相关的添加与删除（除了删除某个集合，因为删除集合时需要一个个元素进行比对。），里面所用到的基本都是使用系统数组复制的的方法，比如System.arraycopy或Arrays.copyof。</p>
<h5 id="u6709_u5C0F_u6280_u5DE7_u6027_u7684_u65B9_u6CD5"><a href="#u6709_u5C0F_u6280_u5DE7_u6027_u7684_u65B9_u6CD5" class="headerlink" title="有小技巧性的方法"></a>有小技巧性的方法</h5><p><code>private boolean batchRemove(Collection&lt;?&gt; c,boolean complement)</code>：这里利用一个complement的boolean变量来实现删除还是保留c中的元素。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>主要介绍了有关于ArrayList的源码，包括一些动态括展等方法的解析。<br>]]>
    
    </summary>
    
      <category term="java.util" scheme="http://jinpingwang.github.io/tags/java-util/"/>
    
      <category term="java源码" scheme="http://jinpingwang.github.io/tags/java%E6%BA%90%E7%A0%81/"/>
    
      <category term="java.util" scheme="http://jinpingwang.github.io/categories/java-util/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[自动化测试工具Selenium使用]]></title>
    <link href="http://jinpingwang.github.io/2016/04/16/test/%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95%E5%B7%A5%E5%85%B7Selenium%E4%BD%BF%E7%94%A8/"/>
    <id>http://jinpingwang.github.io/2016/04/16/test/自动化测试工具Selenium使用/</id>
    <published>2016-04-16T06:21:35.000Z</published>
    <updated>2016-04-26T11:47:14.852Z</updated>
    <content type="html"><![CDATA[<p>Selenium也是一个用于Web应用程序测试的工具。Selenium测试直接运行在浏览器中，就像真正的用户在操作一样。支持的浏览器包括IE、Mozilla Firefox、Mozilla Suite等。本文通过简单的介绍如何安装与使用Selenium。</p>
<h4 id="u5728Maven_u5DE5_u7A0B_u7684pom-xml_u6DFB_u52A0_u4F9D_u8D56"><a href="#u5728Maven_u5DE5_u7A0B_u7684pom-xml_u6DFB_u52A0_u4F9D_u8D56" class="headerlink" title="在Maven工程的pom.xml添加依赖"></a>在Maven工程的pom.xml添加依赖</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">dependency</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="title">groupId</span>&gt;</span>org.seleniumhq.selenium<span class="tag">&lt;/<span class="title">groupId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="title">artifactId</span>&gt;</span>selenium-java<span class="tag">&lt;/<span class="title">artifactId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="title">version</span>&gt;</span>2.53.0<span class="tag">&lt;/<span class="title">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h4 id="u521B_u5EFA_u4E00_u4E2Aoppo_u767B_u9646_u6D4B_u8BD5_u7C7B"><a href="#u521B_u5EFA_u4E00_u4E2Aoppo_u767B_u9646_u6D4B_u8BD5_u7C7B" class="headerlink" title="创建一个oppo登陆测试类"></a>创建一个oppo登陆测试类</h4><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">GoogleTest</span>&#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> WebDriver driver;  </span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span>(<span class="params">String[] args</span>)  </span>&#123;</span><br><span class="line">		System.<span class="keyword">out</span>.print(<span class="string">"开始web自动化!!"</span>);</span><br><span class="line">		</span><br><span class="line">		<span class="comment">//如果fireFox则不需要这个操作</span></span><br><span class="line">		System.setProperty(<span class="string">"webdriver.chrome.driver"</span>,<span class="string">"C:/Program Files (x86)/Google/Chrome/Application/chromedriver.exe"</span>);</span><br><span class="line">		driver =<span class="keyword">new</span> ChromeDriver();</span><br><span class="line">		driver.<span class="keyword">get</span>(<span class="string">"http://www.oppo.com/cn/"</span>);</span><br><span class="line">		driver.findElement(By.linkText(<span class="string">"注册"</span>)).click();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="u8FD0_u884C"><a href="#u8FD0_u884C" class="headerlink" title="运行"></a>运行</h4><p>点击eclipse运行后，就会自动打开chrome，然后点击了oppo首页中的注册按钮，跳转到注册页面。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>Selenium也是一个用于Web应用程序测试的工具。Selenium测试直接运行在浏览器中，就像真正的用户在操作一样。支持的浏览器包括IE、Mozilla Firefox、Mozilla Suite等。本文通过简单的介绍如何安装与使用Selenium。</p>
<h4 id="u5728Maven_u5DE5_u7A0B_u7684pom-xml_u6DFB_u52A0_u4F9D_u8D56"><a href="#u5728Maven_u5DE5_u7A0B_u7684pom-xml_u6DFB_u52A0_u4F9D_u8D56" class="headerlink" title="在Maven工程的pom.xml添加依赖"></a>在Maven工程的pom.xml添加依赖</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">dependency</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="title">groupId</span>&gt;</span>org.seleniumhq.selenium<span class="tag">&lt;/<span class="title">groupId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="title">artifactId</span>&gt;</span>selenium-java<span class="tag">&lt;/<span class="title">artifactId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="title">version</span>&gt;</span>2.53.0<span class="tag">&lt;/<span class="title">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>]]>
    
    </summary>
    
      <category term="Selenium" scheme="http://jinpingwang.github.io/tags/Selenium/"/>
    
      <category term="测试" scheme="http://jinpingwang.github.io/tags/%E6%B5%8B%E8%AF%95/"/>
    
      <category term="测试" scheme="http://jinpingwang.github.io/categories/%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[linux下c++编程]]></title>
    <link href="http://jinpingwang.github.io/2016/04/15/c++/linux%E4%B8%8Bc++%E7%BC%96%E7%A8%8B/"/>
    <id>http://jinpingwang.github.io/2016/04/15/c++/linux下c++编程/</id>
    <published>2016-04-15T01:55:12.000Z</published>
    <updated>2016-04-21T12:15:42.988Z</updated>
    <content type="html"><![CDATA[<p>介绍了gcc与g++的区别；linux下c++编程环境的搭建；编译链接c++程序；gdb调试c++程序四个部分内容。</p>
<h3 id="gcc_u4E0Eg++_u7684_u533A_u522B"><a href="#gcc_u4E0Eg++_u7684_u533A_u522B" class="headerlink" title="gcc与g++的区别"></a>gcc与g++的区别</h3><h4 id="u76F8_u540C_u70B9"><a href="#u76F8_u540C_u70B9" class="headerlink" title="相同点"></a>相同点</h4><p>gcc与g++都能编译c++程序（其实g++也是调用gcc)。</p>
<h4 id="u4E0D_u540C_u70B9"><a href="#u4E0D_u540C_u70B9" class="headerlink" title="不同点"></a>不同点</h4><p>链接阶段，gcc命令不能自动和c++程序使用的库相联接，而g++可以自动相联。但gcc通过添加一些参数命令后，也可以与库相联接，如有一个test01.cpp的c++程序，则使用gcc完成编译如下：<br><a id="more"></a><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gcc <span class="built_in">test</span>01.cpp -o <span class="built_in">test</span> -lstdc++</span><br></pre></td></tr></table></figure></p>
<h3 id="linux_u4E0Bc++_u7F16_u7A0B_u73AF_u5883_u642D_u5EFA"><a href="#linux_u4E0Bc++_u7F16_u7A0B_u73AF_u5883_u642D_u5EFA" class="headerlink" title="linux下c++编程环境搭建"></a>linux下c++编程环境搭建</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">apt-get <span class="operator"><span class="keyword">install</span> gcc</span><br><span class="line">apt-<span class="keyword">get</span> <span class="keyword">install</span> <span class="keyword">g</span>++</span><br><span class="line">apt-<span class="keyword">get</span> <span class="keyword">install</span> gdb</span></span><br></pre></td></tr></table></figure>
<h3 id="u7F16_u8BD1c++_u7A0B_u5E8F"><a href="#u7F16_u8BD1c++_u7A0B_u5E8F" class="headerlink" title="编译c++程序"></a>编译c++程序</h3><h4 id="vim_u7F16_u5199_u4E00_u4E2Ac++_u7A0B_u5E8F_uFF1Atest01-cpp"><a href="#vim_u7F16_u5199_u4E00_u4E2Ac++_u7A0B_u5E8F_uFF1Atest01-cpp" class="headerlink" title="vim编写一个c++程序：test01.cpp"></a>vim编写一个c++程序：test01.cpp</h4><p>···<br>vim test01.cpp<br>···</p>
<h4 id="test01-cpp_u5185_u5BB9"><a href="#test01-cpp_u5185_u5BB9" class="headerlink" title="test01.cpp内容"></a>test01.cpp内容</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> loop=<span class="number">0</span>; loop&lt;<span class="number">10</span>; loop++)&#123;</span><br><span class="line">                <span class="built_in">cout</span>&lt;&lt;loop&lt;&lt;endl;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="u4F7F_u7528g++_u8FDB_u884C_u7F16_u8BD1_u94FE_u63A5_u4E0E_u6267_u884C"><a href="#u4F7F_u7528g++_u8FDB_u884C_u7F16_u8BD1_u94FE_u63A5_u4E0E_u6267_u884C" class="headerlink" title="使用g++进行编译链接与执行"></a>使用g++进行编译链接与执行</h4><p>编译链接<br><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//-o test参数将输出文件命名为test，若无此参数则直接输出a.out</span></span><br><span class="line"><span class="keyword">g</span>++ test01.cpp -o <span class="keyword">test</span></span><br><span class="line"><span class="comment">//如果需要使用gdb进行调试，则需要添加-g参数，即</span></span><br><span class="line"><span class="keyword">g</span>++ -<span class="keyword">g</span> test01.cpp -o <span class="keyword">test</span></span><br></pre></td></tr></table></figure></p>
<p>执行<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./<span class="built_in">test</span></span><br></pre></td></tr></table></figure></p>
<p>输出<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">4</span></span><br><span class="line"><span class="number">5</span></span><br><span class="line"><span class="number">6</span></span><br><span class="line"><span class="number">7</span></span><br><span class="line"><span class="number">8</span></span><br><span class="line"><span class="number">9</span></span><br></pre></td></tr></table></figure></p>
<h3 id="gdb_u8C03_u8BD5c++_u7A0B_u5E8F"><a href="#gdb_u8C03_u8BD5c++_u7A0B_u5E8F" class="headerlink" title="gdb调试c++程序"></a>gdb调试c++程序</h3><h4 id="u6DFB_u52A0-gdbinit_u6587_u4EF6"><a href="#u6DFB_u52A0-gdbinit_u6587_u4EF6" class="headerlink" title="添加.gdbinit文件"></a>添加.gdbinit文件</h4><p>在进行调试时可能会报以下错误：<br><figure class="highlight ceylon"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gdb ImportError: No <span class="keyword">module</span> named <span class="string">'libstdcxx'</span></span><br></pre></td></tr></table></figure></p>
<p>解决方法<br>在用户主目录创建文件：.gdbinit<br>在.gdbinit中添加以下内容：<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">py import sys</span><br><span class="line">py sys<span class="class">.path</span><span class="class">.append</span>(<span class="string">"/usr/share/gcc-4.8/python"</span>)</span><br></pre></td></tr></table></figure></p>
<h4 id="u7F16_u8BD1_u4EA7_u751F_u8C03_u8BD5_u4FE1_u606F"><a href="#u7F16_u8BD1_u4EA7_u751F_u8C03_u8BD5_u4FE1_u606F" class="headerlink" title="编译产生调试信息"></a>编译产生调试信息</h4><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">g</span>++ -<span class="keyword">g</span> test01.cpp -o <span class="keyword">test</span></span><br></pre></td></tr></table></figure>
<h4 id="u4F7F_u7528gdb_u8FDB_u884C_u8C03_u8BD5"><a href="#u4F7F_u7528gdb_u8FDB_u884C_u8C03_u8BD5" class="headerlink" title="使用gdb进行调试"></a>使用gdb进行调试</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gdb <span class="built_in">test</span></span><br></pre></td></tr></table></figure>
<h4 id="u8C03_u8BD5_u5177_u4F53_u64CD_u4F5C"><a href="#u8C03_u8BD5_u5177_u4F53_u64CD_u4F5C" class="headerlink" title="调试具体操作"></a>调试具体操作</h4><h5 id="u5217_u51FA_u4EE3_u7801"><a href="#u5217_u51FA_u4EE3_u7801" class="headerlink" title="列出代码"></a>列出代码</h5><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">list</span></span><br><span class="line"><span class="keyword">list</span> <span class="keyword">m</span>,<span class="keyword">n</span></span><br></pre></td></tr></table></figure>
<h5 id="u6267_u884C_u7A0B_u5E8F"><a href="#u6267_u884C_u7A0B_u5E8F" class="headerlink" title="执行程序"></a>执行程序</h5><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">run</span></span><br><span class="line"><span class="literal">r</span></span><br></pre></td></tr></table></figure>
<h5 id="u8BBE_u7F6E_u65AD_u70B9"><a href="#u8BBE_u7F6E_u65AD_u70B9" class="headerlink" title="设置断点"></a>设置断点</h5><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//在第n行打断点</span></span><br><span class="line"><span class="keyword">break</span> <span class="keyword">n</span></span><br></pre></td></tr></table></figure>
<h5 id="u5220_u9664_u65AD_u70B9"><a href="#u5220_u9664_u65AD_u70B9" class="headerlink" title="删除断点"></a>删除断点</h5><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//删除编号为m的断点。注：编号与代码中的行号不一样。第一个断点，则编号为1，与行号没关系</span></span><br><span class="line"><span class="keyword">break</span> <span class="literal">m</span></span><br></pre></td></tr></table></figure>
<h5 id="u65AD_u70B9_u5904_u7EE7_u7EED_u6267_u884C"><a href="#u65AD_u70B9_u5904_u7EE7_u7EED_u6267_u884C" class="headerlink" title="断点处继续执行"></a>断点处继续执行</h5><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">continue</span></span><br><span class="line"><span class="built_in">c</span></span><br></pre></td></tr></table></figure>
<h5 id="u76D1_u6D4B_u53D8_u91CF_u503C"><a href="#u76D1_u6D4B_u53D8_u91CF_u503C" class="headerlink" title="监测变量值"></a>监测变量值</h5><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//只有在变量值有变化时才会显示</span></span><br><span class="line">watch 变量名</span><br></pre></td></tr></table></figure>
<h5 id="u81EA_u52A8_u663E_u793A_u53D8_u91CF_u503C"><a href="#u81EA_u52A8_u663E_u793A_u53D8_u91CF_u503C" class="headerlink" title="自动显示变量值"></a>自动显示变量值</h5><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//不管变量值有没有改变都会显示</span></span><br><span class="line"><span class="attribute">display</span> 变量名</span><br></pre></td></tr></table></figure>
<h5 id="u67E5_u770B_u67D0_u4E00_u4E2A_u7279_u5B9A_u7684_u53D8_u91CF_u503C"><a href="#u67E5_u770B_u67D0_u4E00_u4E2A_u7279_u5B9A_u7684_u53D8_u91CF_u503C" class="headerlink" title="查看某一个特定的变量值"></a>查看某一个特定的变量值</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span> 变量名</span><br></pre></td></tr></table></figure>
<h5 id="u67E5_u770B_u53D8_u91CF_u7C7B_u578B"><a href="#u67E5_u770B_u53D8_u91CF_u7C7B_u578B" class="headerlink" title="查看变量类型"></a>查看变量类型</h5><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">whatis</span> 变量名</span><br></pre></td></tr></table></figure>
<h5 id="u8FDB_u5165_u51FD_u6570_u5185_u90E8"><a href="#u8FDB_u5165_u51FD_u6570_u5185_u90E8" class="headerlink" title="进入函数内部"></a>进入函数内部</h5><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">step</span></span><br></pre></td></tr></table></figure>
<h5 id="u4E00_u6761_u6761_u8BED_u53E5_u6267_u884C_uFF08_u51FD_u6570_u8C03_u7528_u4E5F_u662F_u4E00_u6761_u8BED_u53E5_uFF09"><a href="#u4E00_u6761_u6761_u8BED_u53E5_u6267_u884C_uFF08_u51FD_u6570_u8C03_u7528_u4E5F_u662F_u4E00_u6761_u8BED_u53E5_uFF09" class="headerlink" title="一条条语句执行（函数调用也是一条语句）"></a>一条条语句执行（函数调用也是一条语句）</h5><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">next</span></span><br></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[<p>介绍了gcc与g++的区别；linux下c++编程环境的搭建；编译链接c++程序；gdb调试c++程序四个部分内容。</p>
<h3 id="gcc_u4E0Eg++_u7684_u533A_u522B"><a href="#gcc_u4E0Eg++_u7684_u533A_u522B" class="headerlink" title="gcc与g++的区别"></a>gcc与g++的区别</h3><h4 id="u76F8_u540C_u70B9"><a href="#u76F8_u540C_u70B9" class="headerlink" title="相同点"></a>相同点</h4><p>gcc与g++都能编译c++程序（其实g++也是调用gcc)。</p>
<h4 id="u4E0D_u540C_u70B9"><a href="#u4E0D_u540C_u70B9" class="headerlink" title="不同点"></a>不同点</h4><p>链接阶段，gcc命令不能自动和c++程序使用的库相联接，而g++可以自动相联。但gcc通过添加一些参数命令后，也可以与库相联接，如有一个test01.cpp的c++程序，则使用gcc完成编译如下：<br>]]>
    
    </summary>
    
      <category term="c++" scheme="http://jinpingwang.github.io/tags/c/"/>
    
      <category term="g++" scheme="http://jinpingwang.github.io/tags/g/"/>
    
      <category term="gdb" scheme="http://jinpingwang.github.io/tags/gdb/"/>
    
      <category term="c++" scheme="http://jinpingwang.github.io/categories/c/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Servlet源码之ServletContext]]></title>
    <link href="http://jinpingwang.github.io/2016/04/14/javaSourceCode/javax.servlet/ServletContext/"/>
    <id>http://jinpingwang.github.io/2016/04/14/javaSourceCode/javax.servlet/ServletContext/</id>
    <published>2016-04-14T14:22:14.000Z</published>
    <updated>2016-04-21T12:18:33.240Z</updated>
    <content type="html"><![CDATA[<p>介绍了Servlet-api中的ServletContext接口，对接口作用以及里面的方法描述和需要注意的地方。</p>
<h3 id="u6E90_u7801"><a href="#u6E90_u7801" class="headerlink" title="源码"></a>源码</h3><p>ServletContext接口定义了一组方法用于servlet与servlet窗口进行通信，例如：得到一个文件的MIME类型，requests的转发，向文件中写日志。ServletContext不同于ServletConfig，ServletContext是针对一个web工程，而ServletConfig只针对单个Servlet。<br><a id="more"></a><br><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> interface ServletContext &#123;</span><br><span class="line">    <span class="keyword">public</span> ServletContext getContext(<span class="keyword">String</span> uripath);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> getMajorVersion();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> getMinorVersion();</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">String</span> getMimeType(<span class="keyword">String</span> file);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> Set getResourcePaths(<span class="keyword">String</span> path);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> URL getResource(<span class="keyword">String</span> path) <span class="keyword">throws</span> MalformedURLException;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> InputStream getResourceAsStream(<span class="keyword">String</span> path);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> RequestDispatcher getRequestDispatcher(<span class="keyword">String</span> path);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> RequestDispatcher getNamedDispatcher(<span class="keyword">String</span> name);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="built_in">log</span>(<span class="keyword">String</span> msg);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="built_in">log</span>(<span class="keyword">String</span> message, Throwable throwable);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">String</span> getRealPath(<span class="keyword">String</span> path);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">String</span> getServerInfo();</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">String</span> getInitParameter(<span class="keyword">String</span> name);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> Enumeration getInitParameterNames();</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">Object</span> getAttribute(<span class="keyword">String</span> name);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> Enumeration getAttributeNames();</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> setAttribute(<span class="keyword">String</span> name, <span class="keyword">Object</span> object);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> removeAttribute(<span class="keyword">String</span> name);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">String</span> getServletContextName();    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="web-xml"><a href="#web-xml" class="headerlink" title="web.xml"></a>web.xml</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">servlet-name</span>&gt;</span>test<span class="tag">&lt;/<span class="title">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">servlet-class</span>&gt;</span>test.test01<span class="tag">&lt;/<span class="title">servlte-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">param-name</span>&gt;</span>test01Name<span class="tag">&lt;/<span class="title">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">para-value</span>&gt;</span>test01Value<span class="tag">&lt;/<span class="title">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="title">init-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">servlet</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="title">context-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">param-name</span>&gt;</span>test01<span class="tag">&lt;/<span class="title">param-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">param-value</span>&gt;</span>test02<span class="tag">&lt;/<span class="title">param-value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">context-para</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="u5256_u6790"><a href="#u5256_u6790" class="headerlink" title="剖析"></a>剖析</h3><p><code>public ServletContext getContext(String uripath);</code>：<br>可以通这个方法获取其它web上下文的配置文件，前提是保证相应的<context>配置中设置crossContext=”true”。例如，tomcat下有两个web应用：baseweb，test。则在/tomcat/conf/Catalina/localhost下配置baseweb.xml与test.xml：<br>baseweb.xml<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="pi">&lt;?xml version='1.0' encoding='utf-8'?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">Context</span> <span class="attribute">docBase</span>=<span class="value">"F:\eclipse64WorkPlace\servletcode\baseweb\target\baseweb"</span> <span class="attribute">crossContext</span>=<span class="value">"true"</span>/&gt;</span></span><br></pre></td></tr></table></figure></context></p>
<p>test.xml<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="pi">&lt;?xml version='1.0' encoding='utf-8'?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">Context</span> <span class="attribute">docBase</span>=<span class="value">"F:\eclipse64WorkPlace\servletcode\test\target\test"</span> <span class="attribute">crossContext</span>=<span class="value">"true"</span>/&gt;</span>。</span><br></pre></td></tr></table></figure></p>
<p>则在baseweb应用中通过getContext(“/test”)来获取test应用下的web.xml配置。</p>
<p><code>public int getMajorVersion();</code>：<br>用于获取servlet容器支持的servlet api的主版本号</p>
<p><code>public int getMinorVersion();</code>：<br>用于获取servlet容器支持的servlet api的次版本号</p>
<p><code>public String getMimeType(String file);</code>：<br>获取某个文件的Mime类型。如getMimeType(“index.html”)则返回text/html，getMimeType(“46.gim”)则返回image/jpeg。这个函数只是根据file后缀进行判断，和你工程里面是否有这个文件并无关系。</p>
<p><code>public Set getResourcePaths(String path);</code>：<br>用于返回path目录下的文件。如根目录下的文件为：<br><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">*</span> /welcome.html<span class="variable">&lt;br&gt;</span></span><br><span class="line"><span class="keyword">*</span> /catalog/index.html<span class="variable">&lt;br&gt;</span></span><br><span class="line"><span class="keyword">*</span> /catalog/products.html<span class="variable">&lt;br&gt;</span></span><br><span class="line"><span class="keyword">*</span> /catalog/offers/books.html<span class="variable">&lt;br&gt;</span></span><br><span class="line"><span class="keyword">*</span> /catalog/offers/music.html<span class="variable">&lt;br&gt;</span></span><br><span class="line"><span class="keyword">*</span> /customer/login.jsp<span class="variable">&lt;br&gt;</span></span><br><span class="line"><span class="keyword">*</span> /WEB-INF/web.xml<span class="variable">&lt;br&gt;</span></span><br><span class="line"><span class="keyword">*</span> /WEB-INF/classes/com.acme.OrderServlet.class,<span class="variable">&lt;br&gt;</span><span class="variable">&lt;br&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>则getResourcePaths(“/“)返回的是：/welcome.html /catalog/ /customer/ /WEB-INF/（只到/的下一层，并不会递归）</p>
<p><code>public URL getResource(String path) throws MalformedURLException;</code>：<br>用于获取path路径在存储上的全路径，当然也可是数据库等的路径。如/webapp下有一个文件index.html。则调用getResource(“/index.html”)则会返回：<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/<span class="constant">F</span><span class="symbol">:/eclipse64WorkPlace/servletcode/</span>.metadata/.plugins/org.eclipse.wst.server.core/tmp<span class="number">0</span>/wtpwebapps/baseweb/index.html</span><br></pre></td></tr></table></figure></p>
<p><code>public InputStream getResourceAsStream(String path);</code>：<br>将path的文件当作一个InputStream。比如/webapp下有一个test.txt文档，文档内容为：<br><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">hello</span></span><br><span class="line">world</span><br></pre></td></tr></table></figure></p>
<p>则调用以下语句就可以读取test.txt文件中的内容了。<br><figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Scanner scanner = <span class="literal">new</span> Scanner(getResourceAsStream(<span class="string">"/test.txt"</span>));</span><br><span class="line"><span class="keyword">while</span>(scanner<span class="built_in">.</span>hasNextLine())&#123;</span><br><span class="line"><span class="attribute">...</span><span class="built_in">.</span><br><span class="line"></span>&#125;</span><br></pre></td></tr></table></figure></p>
<p><code>public RequestDispatcher getRequestDispatcher(String path);</code>：<br>根据提供的path返回一个RequestDispatcher对象。path必须是以”/“开头，表示要从这个Web应用的根开始查找。不同于ServletRequest可以不以”/“开头，表示从原来请求路的相对路径径查找。</p>
<p><code>public RequestDispatcher getNamedDispatcher(String name);</code>：<br>根据提供的name返回一个RequestDispatcher对象。这个name指的是在web.xml中配置servlet-name。<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">servlet</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="title">servlet-name</span>&gt;</span>test3<span class="tag">&lt;/<span class="title">servlet-name</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="title">servlet-class</span>&gt;</span>test.test02<span class="tag">&lt;/<span class="title">servlet-class</span>&gt;</span>		</span><br><span class="line"><span class="tag">&lt;/<span class="title">servlet</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p><code>public void log(String msg);</code>:<br>用于记录日志文件，在用eclipse开发时，会直接输出</p>
<p><code>public void log(String message, Throwable throwable);</code>：<br>作用同上</p>
<p><code>public String getRealPath(String path);</code>：<br>获取某个文件的绝对路径，即在硬盘中存储的路径。与getResource(String path)有点类似。</p>
<p><code>public String getServerInfo();</code>：<br>用于返回Servlet容器的信息。信息的形式为：servername/versionnumber<br>如：Apache Tomcat/8.0.14</p>
<p><code>public String getInitParameter(String name);</code>：<br>获取web.xml下<context-param>中<param-name>里与name对应<param-value>的值。</param-value></param-name></context-param></p>
<p><code>public Enumeration getInitParameterNames();</code>：<br>获取web.xml下<context-param>中<param-name>的集合。</param-name></context-param></p>
<p><code>public Object getAttribute(String name);</code>：<br>name是指servlet容器中相关的属性，根据这个属性返回相应的值。<br>比如<br>name=”org.apache.tomcat.InstanceManager”时，<br>返回的是<br>org.apache.catalina.core.DefaultInstanceManager@140103bd</p>
<p><code>public Enumeration getAttributeNames();</code>：<br>获取servlet容器相关的所有属性集合。</p>
<p><code>public void setAttribute(String name, Object object);</code>：<br>将sevlet容器中的某个属性值设置为object。</p>
<p><code>public void removeAttribute(String name);</code>：<br>移除servlet容器中的某个属性。</p>
<p><code>public String getServletContextName();</code>：<br>返回的是这个web application的名字，即web.xml下<display-name>标签的内容。</display-name></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>介绍了Servlet-api中的ServletContext接口，对接口作用以及里面的方法描述和需要注意的地方。</p>
<h3 id="u6E90_u7801"><a href="#u6E90_u7801" class="headerlink" title="源码"></a>源码</h3><p>ServletContext接口定义了一组方法用于servlet与servlet窗口进行通信，例如：得到一个文件的MIME类型，requests的转发，向文件中写日志。ServletContext不同于ServletConfig，ServletContext是针对一个web工程，而ServletConfig只针对单个Servlet。<br>]]>
    
    </summary>
    
      <category term="Servlet" scheme="http://jinpingwang.github.io/tags/Servlet/"/>
    
      <category term="Servlet" scheme="http://jinpingwang.github.io/categories/Servlet/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[二维数组中的查找]]></title>
    <link href="http://jinpingwang.github.io/2016/04/12/algorithm/1/"/>
    <id>http://jinpingwang.github.io/2016/04/12/algorithm/1/</id>
    <published>2016-04-12T02:07:21.000Z</published>
    <updated>2016-04-21T12:16:25.945Z</updated>
    <content type="html"><![CDATA[<h2 id="u9898_u76EE_u63CF_u8FF0"><a href="#u9898_u76EE_u63CF_u8FF0" class="headerlink" title="题目描述"></a>题目描述</h2><p>在一个二维数组中，每一行都按照从左到右递增的顺序排序，每一列都按照从上到下递增的顺序排序。请完成一个函数，输入这样的一个二维数组和一个整数，判断数组中是否含有该整数。 </p>
<h2 id="u8F93_u5165_u63CF_u8FF0"><a href="#u8F93_u5165_u63CF_u8FF0" class="headerlink" title="输入描述"></a>输入描述</h2><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">array： 待查找的二维数组</span><br><span class="line"><span class="keyword">target</span>：查找的数字</span><br></pre></td></tr></table></figure>
<h2 id="u8F93_u51FA_u63CF_u8FF0"><a href="#u8F93_u51FA_u63CF_u8FF0" class="headerlink" title="输出描述"></a>输出描述</h2><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">查找到返回<span class="literal">true</span>，查找不到返回<span class="literal">false</span></span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h2 id="java_u4EE3_u7801_u5B9E_u73B0"><a href="#java_u4EE3_u7801_u5B9E_u73B0" class="headerlink" title="java代码实现"></a>java代码实现</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> Solution &#123;	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> boolean <span class="title">find</span><span class="params">(<span class="keyword">int</span> [][] <span class="built_in">array</span>,<span class="keyword">int</span> target)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(<span class="built_in">array</span>.length==<span class="number">0</span>)</span><br><span class="line">			<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">		<span class="keyword">int</span> row=<span class="built_in">array</span>.length;</span><br><span class="line">		<span class="keyword">int</span> col=<span class="built_in">array</span>[<span class="number">0</span>].length;</span><br><span class="line">		<span class="keyword">int</span> i=<span class="number">0</span>,j=col-<span class="number">1</span>;</span><br><span class="line">		<span class="keyword">while</span>(i&lt;row &amp;&amp; j&gt;=<span class="number">0</span>)&#123;</span><br><span class="line">			<span class="keyword">if</span>(<span class="built_in">array</span>[i][j]==target)</span><br><span class="line">				<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">			<span class="keyword">if</span>(<span class="built_in">array</span>[i][j]&gt;target)</span><br><span class="line">				j--;</span><br><span class="line">			<span class="keyword">else</span></span><br><span class="line">				i++;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="u7B97_u6CD5_u590D_u6742_u5EA6"><a href="#u7B97_u6CD5_u590D_u6742_u5EA6" class="headerlink" title="算法复杂度"></a>算法复杂度</h2><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">O</span><span class="params">(m+n)</span></span></span><br></pre></td></tr></table></figure>
<p>注：m，n为分别为数组的行数与列数</p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="u9898_u76EE_u63CF_u8FF0"><a href="#u9898_u76EE_u63CF_u8FF0" class="headerlink" title="题目描述"></a>题目描述</h2><p>在一个二维数组中，每一行都按照从左到右递增的顺序排序，每一列都按照从上到下递增的顺序排序。请完成一个函数，输入这样的一个二维数组和一个整数，判断数组中是否含有该整数。 </p>
<h2 id="u8F93_u5165_u63CF_u8FF0"><a href="#u8F93_u5165_u63CF_u8FF0" class="headerlink" title="输入描述"></a>输入描述</h2><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">array： 待查找的二维数组</span><br><span class="line"><span class="keyword">target</span>：查找的数字</span><br></pre></td></tr></table></figure>
<h2 id="u8F93_u51FA_u63CF_u8FF0"><a href="#u8F93_u51FA_u63CF_u8FF0" class="headerlink" title="输出描述"></a>输出描述</h2><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">查找到返回<span class="literal">true</span>，查找不到返回<span class="literal">false</span></span><br></pre></td></tr></table></figure>]]>
    
    </summary>
    
      <category term="算法" scheme="http://jinpingwang.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="算法" scheme="http://jinpingwang.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[mysql之安装配置]]></title>
    <link href="http://jinpingwang.github.io/2016/04/11/database/mysql%E4%B9%8B%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE/"/>
    <id>http://jinpingwang.github.io/2016/04/11/database/mysql之安装配置/</id>
    <published>2016-04-11T13:47:34.000Z</published>
    <updated>2016-04-21T12:17:42.458Z</updated>
    <content type="html"><![CDATA[<p>介绍了linux下mysql-server的安装与卸载；登陆；编码配置；启动与关闭；root用户无法登陆解决。</p>
<h3 id="u5B89_u88C5_u4E0E_u5378_u8F7D"><a href="#u5B89_u88C5_u4E0E_u5378_u8F7D" class="headerlink" title="安装与卸载"></a>安装与卸载</h3><h4 id="u5B89_u88C5"><a href="#u5B89_u88C5" class="headerlink" title="安装"></a>安装</h4><p>mysql-server, mysql-client, libmysqlclient-dev。一般安装mysql-server就可以了。<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt-get <span class="operator"><span class="keyword">install</span> mysql-<span class="keyword">server</span></span></span><br></pre></td></tr></table></figure></p>
<p>将/etc/mysql/my.cnf中的这一行<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bind-address           = <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span></span><br></pre></td></tr></table></figure></p>
<a id="more"></a>
<p>注释掉，修改为<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">#bind-address           = <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span></span></span><br></pre></td></tr></table></figure></p>
<p>然后重启<br><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="regexp">/etc/i</span>nit.d<span class="regexp">/mysql restart</span></span><br></pre></td></tr></table></figure></p>
<h4 id="u5378_u8F7D"><a href="#u5378_u8F7D" class="headerlink" title="卸载"></a>卸载</h4><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">//如果不知道版本号就直接用*来代替</span><br><span class="line">apt-<span class="built_in">get</span> autoremove --purge mysql-server-*</span><br><span class="line">apt-<span class="built_in">get</span> <span class="built_in">remove</span> mysql-server</span><br><span class="line">apt-<span class="built_in">get</span> autoremove mysql-server</span><br><span class="line">apt-<span class="built_in">get</span> <span class="built_in">remove</span> mysql-common</span><br></pre></td></tr></table></figure>
<h3 id="u767B_u9646"><a href="#u767B_u9646" class="headerlink" title="登陆"></a>登陆</h3><h4 id="u767B_u9646_u672C_u673A_u6570_u636E_u5E93"><a href="#u767B_u9646_u672C_u673A_u6570_u636E_u5E93" class="headerlink" title="登陆本机数据库"></a>登陆本机数据库</h4><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mysql -u username -<span class="tag">p</span></span><br><span class="line">mysql -u username -<span class="tag">p</span> dbname</span><br></pre></td></tr></table></figure>
<h4 id="u767B_u9646_u8FDC_u7A0B_u6570_u636E_u5E93"><a href="#u767B_u9646_u8FDC_u7A0B_u6570_u636E_u5E93" class="headerlink" title="登陆远程数据库"></a>登陆远程数据库</h4><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//默认下root用户不支持远程登陆</span></span><br><span class="line">mysql -<span class="keyword">h</span> ip -<span class="keyword">u</span> username</span><br></pre></td></tr></table></figure>
<h3 id="u7F16_u7801_u914D_u7F6E"><a href="#u7F16_u7801_u914D_u7F6E" class="headerlink" title="编码配置"></a>编码配置</h3><h4 id="u67E5_u770B_u5F53_u524D_u6570_u636E_u5E93_u7684_u5B57_u7B26_u96C6"><a href="#u67E5_u770B_u5F53_u524D_u6570_u636E_u5E93_u7684_u5B57_u7B26_u96C6" class="headerlink" title="查看当前数据库的字符集"></a>查看当前数据库的字符集</h4><p>登入mysql后输入<br><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">status<span class="comment">;</span></span><br></pre></td></tr></table></figure></p>
<p>然后可以看到<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">Server <span class="string">characterset:</span>	latin1</span><br><span class="line">Db     <span class="string">characterset:</span>	latin1</span><br><span class="line">Client <span class="string">characterset:</span>	latin1</span><br><span class="line">Conn.  <span class="string">characterset:</span>	latin1</span><br><span class="line">...</span><br></pre></td></tr></table></figure></p>
<h4 id="u5C06_u5B57_u7B26_u96C6_u4FEE_u6539_u6210utf-8"><a href="#u5C06_u5B57_u7B26_u96C6_u4FEE_u6539_u6210utf-8" class="headerlink" title="将字符集修改成utf-8"></a>将字符集修改成utf-8</h4><p>编辑/etc/mysql/my.cnf，修改以下两个地方<br>其一：<br><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">[client]</span></span><br><span class="line"><span class="setting">port        =<span class="value"><span class="number">3306</span></span></span></span><br><span class="line"><span class="setting">socket     =<span class="value">/var/run/mysqld/mysqld.sock</span></span></span><br></pre></td></tr></table></figure></p>
<p>在port前添加一行，修改成<br><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">[client]</span></span><br><span class="line"><span class="setting">default-character-set=<span class="value">utf8</span></span></span><br><span class="line"><span class="setting">port        =<span class="value"><span class="number">3306</span></span></span></span><br><span class="line"><span class="setting">socket     =<span class="value">/var/run/mysqld/mysqld.sock</span></span></span><br></pre></td></tr></table></figure></p>
<p>其二：<br><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[mysqld]</span><br><span class="line"><span class="keyword">user</span>        <span class="title">=mysql</span></span><br><span class="line">pid-file     =/var/run/mysqld/mysqld.pid</span><br></pre></td></tr></table></figure></p>
<p>在user前添加一行，修改成<br><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">[mysqld]</span></span><br><span class="line"><span class="setting">character_set_server=<span class="value">utf8</span></span></span><br><span class="line"><span class="setting">user        =<span class="value">mysql</span></span></span><br><span class="line"><span class="setting">pid-file     =<span class="value">/var/run/mysqld/mysqld.pid</span></span></span><br></pre></td></tr></table></figure></p>
<h4 id="u91CD_u542F_u6570_u636E_u5E93"><a href="#u91CD_u542F_u6570_u636E_u5E93" class="headerlink" title="重启数据库"></a>重启数据库</h4><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="regexp">/etc/i</span>nit.d<span class="regexp">/mysql restart</span></span><br></pre></td></tr></table></figure>
<h4 id="u5220_u9664_u539F_u5148_u6570_u636E_u5E93"><a href="#u5220_u9664_u539F_u5148_u6570_u636E_u5E93" class="headerlink" title="删除原先数据库"></a>删除原先数据库</h4><p>修改编码后，原先的数据库还是乱码。但新建的数据库中创建的数据就不会乱码了。注意，在原先数据库中创建的新表还是乱码，必需在新创建的数据库中创建的表才不会乱码。</p>
<h3 id="u542F_u52A8_u4E0E_u5173_u95ED"><a href="#u542F_u52A8_u4E0E_u5173_u95ED" class="headerlink" title="启动与关闭"></a>启动与关闭</h3><h4 id="u542F_u52A8"><a href="#u542F_u52A8" class="headerlink" title="启动"></a>启动</h4><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/etc/init.d/mysql <span class="literal">start</span></span><br></pre></td></tr></table></figure>
<h4 id="u5173_u95ED"><a href="#u5173_u95ED" class="headerlink" title="关闭"></a>关闭</h4><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/etc/init.d/mysql <span class="literal">stop</span></span><br></pre></td></tr></table></figure>
<h3 id="root_u7528_u6237_u65E0_u6CD5_u767B_u9646_u89E3_u51B3"><a href="#root_u7528_u6237_u65E0_u6CD5_u767B_u9646_u89E3_u51B3" class="headerlink" title="root用户无法登陆解决"></a>root用户无法登陆解决</h3><p>直接使用/etc/mysql/debian.cnf文件中[client]节提供的用户名和密码，进入数据库后删除root，然后重新创建并授权root用户。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>介绍了linux下mysql-server的安装与卸载；登陆；编码配置；启动与关闭；root用户无法登陆解决。</p>
<h3 id="u5B89_u88C5_u4E0E_u5378_u8F7D"><a href="#u5B89_u88C5_u4E0E_u5378_u8F7D" class="headerlink" title="安装与卸载"></a>安装与卸载</h3><h4 id="u5B89_u88C5"><a href="#u5B89_u88C5" class="headerlink" title="安装"></a>安装</h4><p>mysql-server, mysql-client, libmysqlclient-dev。一般安装mysql-server就可以了。<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt-get <span class="operator"><span class="keyword">install</span> mysql-<span class="keyword">server</span></span></span><br></pre></td></tr></table></figure></p>
<p>将/etc/mysql/my.cnf中的这一行<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bind-address           = <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span></span><br></pre></td></tr></table></figure></p>]]>
    
    </summary>
    
      <category term="mysql" scheme="http://jinpingwang.github.io/tags/mysql/"/>
    
      <category term="数据库" scheme="http://jinpingwang.github.io/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
      <category term="数据库" scheme="http://jinpingwang.github.io/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[bootstrap源码之Images]]></title>
    <link href="http://jinpingwang.github.io/2016/04/07/bootstrap/11:bootstrap%E6%BA%90%E7%A0%81%E4%B9%8BImages/"/>
    <id>http://jinpingwang.github.io/2016/04/07/bootstrap/11:bootstrap源码之Images/</id>
    <published>2016-04-07T01:08:54.000Z</published>
    <updated>2016-04-21T10:58:42.876Z</updated>
    <content type="html"><![CDATA[<p>介绍了bootstrap中Images。简单介绍有关Responsive images，Image shapes。<br><a id="more"></a></p>
<h3 id="u6E90_u7801"><a href="#u6E90_u7801" class="headerlink" title="源码"></a>源码</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="class">.img-responsive</span> <span class="rules">&#123;</span><br><span class="line">  <span class="rule"><span class="attribute">display</span>:<span class="value"> block</span></span>;</span><br><span class="line">  <span class="rule"><span class="attribute">max-width</span>:<span class="value"> <span class="number">100%</span></span></span>;</span><br><span class="line">  <span class="rule"><span class="attribute">height</span>:<span class="value"> auto</span></span>;</span><br><span class="line">&#125;</span></span><br><span class="line"><span class="class">.center-block</span> <span class="rules">&#123;</span><br><span class="line">  <span class="rule"><span class="attribute">display</span>:<span class="value"> block</span></span>;</span><br><span class="line">  <span class="rule"><span class="attribute">margin-right</span>:<span class="value"> auto</span></span>;</span><br><span class="line">  <span class="rule"><span class="attribute">margin-left</span>:<span class="value"> auto</span></span>;</span><br><span class="line">&#125;</span></span><br><span class="line"><span class="class">.img-rounded</span> <span class="rules">&#123;</span><br><span class="line">  <span class="rule"><span class="attribute">border-radius</span>:<span class="value"> <span class="number">6px</span></span></span>;</span><br><span class="line">&#125;</span></span><br><span class="line"><span class="class">.img-thumbnail</span> <span class="rules">&#123;</span><br><span class="line">  <span class="rule"><span class="attribute">display</span>:<span class="value"> inline-block</span></span>;</span><br><span class="line">  <span class="rule"><span class="attribute">max-width</span>:<span class="value"> <span class="number">100%</span></span></span>;</span><br><span class="line">  <span class="rule"><span class="attribute">height</span>:<span class="value"> auto</span></span>;</span><br><span class="line">  <span class="rule"><span class="attribute">padding</span>:<span class="value"> <span class="number">4px</span></span></span>;</span><br><span class="line">  <span class="rule"><span class="attribute">line-height</span>:<span class="value"> <span class="number">1.42857143</span></span></span>;</span><br><span class="line">  <span class="rule"><span class="attribute">background-color</span>:<span class="value"> <span class="hexcolor">#fff</span></span></span>;</span><br><span class="line">  <span class="rule"><span class="attribute">border</span>:<span class="value"> <span class="number">1px</span> solid <span class="hexcolor">#ddd</span></span></span>;</span><br><span class="line">  <span class="rule"><span class="attribute">border-radius</span>:<span class="value"> <span class="number">4px</span></span></span>;</span><br><span class="line">  <span class="rule"><span class="attribute">-webkit-transition</span>:<span class="value"> all .<span class="number">2s</span> ease-in-out</span></span>;</span><br><span class="line">       <span class="rule"><span class="attribute">-o-transition</span>:<span class="value"> all .<span class="number">2s</span> ease-in-out</span></span>;</span><br><span class="line">          <span class="rule"><span class="attribute">transition</span>:<span class="value"> all .<span class="number">2s</span> ease-in-out</span></span>;</span><br><span class="line">&#125;</span></span><br><span class="line"><span class="class">.img-circle</span> <span class="rules">&#123;</span><br><span class="line">  <span class="rule"><span class="attribute">border-radius</span>:<span class="value"> <span class="number">50%</span></span></span>;</span><br><span class="line">&#125;</span></span><br></pre></td></tr></table></figure>
<h3 id="u5256_u6790"><a href="#u5256_u6790" class="headerlink" title="剖析"></a>剖析</h3><h4 id="Responsive_images"><a href="#Responsive_images" class="headerlink" title="Responsive images"></a>Responsive images</h4><p><code>display: block</code>：将元素设置为块元素；<br><code>max-width: 100%;</code>：将元素的max-width设置为父元素的宽度。如果父元素的宽度大于元素本身的宽度，则使用元素的本身宽度。如果使用的是width: 100%，则不论元素的宽度是否大于父元素，则元素的的宽度都为父元素的宽度。<br><code>height: auto;</code>：将元素的height设置为auto。</p>
<h4 id="Image_shapes"><a href="#Image_shapes" class="headerlink" title="Image shapes"></a>Image shapes</h4><h5 id="image-rounded"><a href="#image-rounded" class="headerlink" title="image-rounded"></a>image-rounded</h5><p>边角是圆弧形。如果圆弧不明显，可以重新设置border-radius的值。</p>
<h5 id="image-thumbnail"><a href="#image-thumbnail" class="headerlink" title="image-thumbnail"></a>image-thumbnail</h5><p><code>display: inline-block;</code>：把元素设置为块元素，但可以在同一行。<br><code>max-width: 100%;</code>：宽度设置为父元素的宽度，超过了父元素的宽度则使用元素自己的宽度。<br>其它的就是设置边框与边界。</p>
<h5 id="img-circle"><a href="#img-circle" class="headerlink" title="img-circle"></a>img-circle</h5><p>与image-rounded类似，通过设置border-radius来实现。</p>
<h4 id="center-block_u4E0Etext-center"><a href="#center-block_u4E0Etext-center" class="headerlink" title="center-block与text-center"></a>center-block与text-center</h4><p>为了使img元素能居中，则通过为img元素添加center-block样式即可。<br>如果是为了使块元素中的文字居中，则通过为块元素添加text-center样式即可。但如果是非块元素，因为无法设置长宽，所以没办法通过text-center来使非块元素居中。<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class">.text-center</span> <span class="rules">&#123;</span><br><span class="line">  <span class="rule"><span class="attribute">text-align</span>:<span class="value"> center</span></span>;</span><br><span class="line">&#125;</span></span><br></pre></td></tr></table></figure></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>介绍了bootstrap中Images。简单介绍有关Responsive images，Image shapes。<br>]]>
    
    </summary>
    
      <category term="bootstrap" scheme="http://jinpingwang.github.io/tags/bootstrap/"/>
    
      <category term="前端" scheme="http://jinpingwang.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="bootstrap" scheme="http://jinpingwang.github.io/categories/bootstrap/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[URL访问路径在服务器上的匹配详解]]></title>
    <link href="http://jinpingwang.github.io/2016/04/02/web/URL%E8%AE%BF%E9%97%AE%E8%B7%AF%E5%BE%84%E5%9C%A8%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B8%8A%E7%9A%84%E5%8C%B9%E9%85%8D%E8%AF%A6%E8%A7%A3/"/>
    <id>http://jinpingwang.github.io/2016/04/02/web/URL访问路径在服务器上的匹配详解/</id>
    <published>2016-04-02T07:45:24.000Z</published>
    <updated>2016-04-22T13:32:15.864Z</updated>
    <content type="html"><![CDATA[<p>讲述了服务器是如何根据客户端访问的URL来返回相应的资源：servlet，目录下的欢迎文件还是真实存在的资源。<br><a id="more"></a></p>
<h3 id="u6E90_u7801"><a href="#u6E90_u7801" class="headerlink" title="源码"></a>源码</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">servlet</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="title">servlet-name</span>&gt;</span>test01<span class="tag">&lt;/<span class="title">servlet-name</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="title">servlet-class</span>&gt;</span>test.test01<span class="tag">&lt;/<span class="title">servlet-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">servlet</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">servlet-mapping</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="title">servlet-name</span>&gt;</span>test01<span class="tag">&lt;/<span class="title">servlet-name</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="title">url-pattern</span>&gt;</span>/test<span class="tag">&lt;/<span class="title">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">servlet-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="title">servlet</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="title">servlet-name</span>&gt;</span>test02<span class="tag">&lt;/<span class="title">servlet-name</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="title">servlet-class</span>&gt;</span>test.test02<span class="tag">&lt;/<span class="title">servlet-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">servlet</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">servlet-mapping</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="title">servlet-name</span>&gt;</span>test02<span class="tag">&lt;/<span class="title">servlet-name</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="title">url-pattern</span>&gt;</span>/test.html<span class="tag">&lt;/<span class="title">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">servlet-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="title">welcome-file-list</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">welcom-file</span>&gt;</span>index.html<span class="tag">&lt;/<span class="title">welcome-file</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">welcome-file-list</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="u5256_u6790"><a href="#u5256_u6790" class="headerlink" title="剖析"></a>剖析</h3><p>一：先匹配servlet<br>servlet中url-pattern匹配顺序：<br>first：完全匹配<br>second：目录匹配<br>third：扩展名匹配</p>
<p>二：servlet无法匹配，执行如下匹配操作<br>1：如果url访问的不是文件夹，则查看服务器对应的路径下是否有这个文件，有则返回，无则返回404。假设服务器上存在myapp/error/errorPage.html，则访问：<br>host/myapp/error/errorPage.html    :   能访问<br>2：如果是文件夹，则查看该文件夹下是否有web.xml中welcome-file-list匹配的文件，有则返回，无则返回404。假设服务器上存在myapp/hello/index.html，则访问：<br>host/myapp/hello    :   能访问（返回hello/index.html）</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>讲述了服务器是如何根据客户端访问的URL来返回相应的资源：servlet，目录下的欢迎文件还是真实存在的资源。<br>]]>
    
    </summary>
    
      <category term="web" scheme="http://jinpingwang.github.io/tags/web/"/>
    
      <category term="web" scheme="http://jinpingwang.github.io/categories/web/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[深入浅出部署描述文件web.xml]]></title>
    <link href="http://jinpingwang.github.io/2016/04/02/web/%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BA%E9%83%A8%E7%BD%B2%E6%8F%8F%E8%BF%B0%E6%96%87%E4%BB%B6web.xml/"/>
    <id>http://jinpingwang.github.io/2016/04/02/web/深入浅出部署描述文件web.xml/</id>
    <published>2016-04-02T05:10:47.000Z</published>
    <updated>2016-04-22T14:01:11.703Z</updated>
    <content type="html"><![CDATA[<p>详解了web.xml中servlet映射配置，ServletContext的初始化参数配置，监听类配置，会话超时设置，过滤器设置，错误页面配置，欢迎文件配置。<br><a id="more"></a></p>
<h3 id="u6E90_u7801"><a href="#u6E90_u7801" class="headerlink" title="源码"></a>源码</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"><span class="pi">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">web-app</span> <span class="attribute">xmlns:xsi</span>=<span class="value">"http://www.w3.org/2001/XMLSchema-instance"</span></span><br><span class="line">	<span class="attribute">xmlns</span>=<span class="value">"http://java.sun.com/xml/ns/javaee"</span></span><br><span class="line">	<span class="attribute">xsi:schemaLocation</span>=<span class="value">"http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd"</span></span><br><span class="line">	<span class="attribute">id</span>=<span class="value">"WebApp_ID"</span> <span class="attribute">version</span>=<span class="value">"3.0"</span>&gt;</span></span><br><span class="line">	</span><br><span class="line">	<span class="tag">&lt;<span class="title">display-name</span>&gt;</span>Archetype Created Web Application<span class="tag">&lt;/<span class="title">display-name</span>&gt;</span></span><br><span class="line">	</span><br><span class="line">	<span class="comment">&lt;!-- servlet映射配置 --&gt;</span>	</span><br><span class="line">	<span class="tag">&lt;<span class="title">servlet</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="title">servlet-name</span>&gt;</span>test<span class="tag">&lt;/<span class="title">servlet-name</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="title">servlet-class</span>&gt;</span>test.test01<span class="tag">&lt;/<span class="title">servlet-class</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="title">init-param</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="title">param-name</span>&gt;</span>test01<span class="tag">&lt;/<span class="title">param-name</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="title">param-value</span>&gt;</span>test02<span class="tag">&lt;/<span class="title">param-value</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="title">init-param</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="title">init-param</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="title">param-name</span>&gt;</span>hello<span class="tag">&lt;/<span class="title">param-name</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="title">param-value</span>&gt;</span>world<span class="tag">&lt;/<span class="title">param-value</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="title">init-param</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="title">servlet</span>&gt;</span></span><br><span class="line">	</span><br><span class="line">	<span class="tag">&lt;<span class="title">servlet-mapping</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="title">servlet-name</span>&gt;</span>test<span class="tag">&lt;/<span class="title">servlet-name</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="title">url-pattern</span>&gt;</span>/test<span class="tag">&lt;/<span class="title">url-pattern</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="title">servlet-mapping</span>&gt;</span></span><br><span class="line">	</span><br><span class="line">	<span class="comment">&lt;!-- ServletContext的初始化参数配置 --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="title">context-param</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="title">param-name</span>&gt;</span>test02<span class="tag">&lt;/<span class="title">param-name</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="title">param-value</span>&gt;</span>test03<span class="tag">&lt;/<span class="title">param-value</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="title">context-param</span>&gt;</span></span><br><span class="line">	</span><br><span class="line">	<span class="comment">&lt;!-- ServletcContext相关监听配置 --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="title">listener</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="title">listener-class</span>&gt;</span>test.MyServletContextListener<span class="tag">&lt;/<span class="title">listener-class</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="title">listener</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="title">listener</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="title">listener-class</span>&gt;</span>test.MyServletContextAttributeListener<span class="tag">&lt;/<span class="title">listener-class</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="title">listener</span>&gt;</span></span><br><span class="line">	</span><br><span class="line">	<span class="tag">&lt;<span class="title">listener</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="title">listener-class</span>&gt;</span>test.MyServletRequestListener<span class="tag">&lt;/<span class="title">listener-class</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="title">listener</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="title">listener</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="title">listener-class</span>&gt;</span>test.MyServletRequestAttributeListener<span class="tag">&lt;/<span class="title">listener-class</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="title">listener</span>&gt;</span></span><br><span class="line">	</span><br><span class="line">	<span class="comment">&lt;!-- 会话超时设置 --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="title">session-config</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="title">session-timeout</span>&gt;</span>1<span class="tag">&lt;/<span class="title">session-timeout</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="title">session-config</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 过滤器设置 --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="title">filter</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="title">filter-name</span>&gt;</span>filter<span class="tag">&lt;/<span class="title">filter-name</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="title">filter-class</span>&gt;</span>filters.setCharacterEncodingFilter<span class="tag">&lt;/<span class="title">filter-class</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="title">init-param</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="title">param-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="title">param-name</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="title">param-value</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="title">param-value</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="title">init-param</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="title">init-param</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="title">param-name</span>&gt;</span>ignore<span class="tag">&lt;/<span class="title">param-name</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="title">param-value</span>&gt;</span>true<span class="tag">&lt;/<span class="title">param-value</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="title">init-param</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="title">filter</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="tag">&lt;<span class="title">filter-mapping</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="title">filter-name</span>&gt;</span>filter<span class="tag">&lt;/<span class="title">filter-name</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="title">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="title">url-pattern</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="title">filter-mapping</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- 错误页面配置 --&gt;</span></span><br><span class="line">  	<span class="tag">&lt;<span class="title">error-page</span>&gt;</span></span><br><span class="line">  		<span class="tag">&lt;<span class="title">error-code</span>&gt;</span>404<span class="tag">&lt;/<span class="title">error-code</span>&gt;</span></span><br><span class="line">  		<span class="tag">&lt;<span class="title">location</span>&gt;</span>/error/error1.html<span class="tag">&lt;/<span class="title">location</span>&gt;</span></span><br><span class="line">  	<span class="tag">&lt;/<span class="title">error-page</span>&gt;</span></span><br><span class="line">  	</span><br><span class="line">  	<span class="tag">&lt;<span class="title">error-page</span>&gt;</span></span><br><span class="line">  		<span class="tag">&lt;<span class="title">exception-type</span>&gt;</span>java.lang.Throwable<span class="tag">&lt;/<span class="title">exception-type</span>&gt;</span></span><br><span class="line">  		<span class="tag">&lt;<span class="title">location</span>&gt;</span>/error/error2.jsp<span class="tag">&lt;/<span class="title">location</span>&gt;</span></span><br><span class="line">  	<span class="tag">&lt;/<span class="title">error-page</span>&gt;</span>	</span><br><span class="line">  	</span><br><span class="line">  	<span class="comment">&lt;!-- 欢迎文件配置 --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="title">welcome-file-list</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="title">welcome-file</span>&gt;</span>index.html<span class="tag">&lt;/<span class="title">welcome-file</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="title">welcome-file-list</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="u5256_u6790"><a href="#u5256_u6790" class="headerlink" title="剖析"></a>剖析</h3><h4 id="web_u4E2D_u5404_u6587_u4EF6_u7684_u76EE_u5F55_u7ED3_u6784"><a href="#web_u4E2D_u5404_u6587_u4EF6_u7684_u76EE_u5F55_u7ED3_u6784" class="headerlink" title="web中各文件的目录结构"></a>web中各文件的目录结构</h4><p>webapps<br>webapps/myapp<br>webapps/myapp/WEB-INF<br>webapps/myapp/classes<br>webapps/myapp/classes/package<br>webapps/myapp/lib<br>webapps/myapp/tags</p>
<h4 id="servlet_u6620_u5C04_u914D_u7F6E"><a href="#servlet_u6620_u5C04_u914D_u7F6E" class="headerlink" title="servlet映射配置"></a>servlet映射配置</h4><p>一：一个servlet对应一个servlet-mapping。<br>二：servlet与servlet-mapping是通过servlet-name进行相关联<br>三：ServletConfig可以获取servlet中的init-param的初始化参数</p>
<h4 id="ServletContext_u7684_u521D_u59CB_u5316_u53C2_u6570_u914D_u7F6E"><a href="#ServletContext_u7684_u521D_u59CB_u5316_u53C2_u6570_u914D_u7F6E" class="headerlink" title="ServletContext的初始化参数配置"></a>ServletContext的初始化参数配置</h4><p>在ServletContext中可以获取这些初始化参数，都是String类型。</p>
<h4 id="u76D1_u542C_u7C7B_u914D_u7F6E"><a href="#u76D1_u542C_u7C7B_u914D_u7F6E" class="headerlink" title="监听类配置"></a>监听类配置</h4><p>ServletContext相关的两个监听类（即继承了ServletContextListener与ServletContextAttributeListener），ServletRequest相关的两个监听类（即继承ServletRequestListener与ServletContextAttributeListener）需要在web.xml中设置，而与HttpSession的监听类不需要在web.xml中设置。</p>
<h4 id="u4F1A_u8BDD_u8D85_u65F6_u8BBE_u7F6E"><a href="#u4F1A_u8BDD_u8D85_u65F6_u8BBE_u7F6E" class="headerlink" title="会话超时设置"></a>会话超时设置</h4><p>以分钟为单位，如果设置为-1则代表永不会到期。</p>
<h4 id="u8FC7_u6EE4_u5668_u8BBE_u7F6E"><a href="#u8FC7_u6EE4_u5668_u8BBE_u7F6E" class="headerlink" title="过滤器设置"></a>过滤器设置</h4><h4 id="u9519_u8BEF_u9875_u9762_u914D_u7F6E"><a href="#u9519_u8BEF_u9875_u9762_u914D_u7F6E" class="headerlink" title="错误页面配置"></a>错误页面配置</h4><p>一个是异常的错误页面设置，另一个是返回状态码的页面设置。</p>
<h4 id="u6B22_u8FCE_u6587_u4EF6_u914D_u7F6E"><a href="#u6B22_u8FCE_u6587_u4EF6_u914D_u7F6E" class="headerlink" title="欢迎文件配置"></a>欢迎文件配置</h4><p>访问URL路径中如果是一个目录，则会在该目录中找与welcome-file-list中第一个匹配的文件。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>详解了web.xml中servlet映射配置，ServletContext的初始化参数配置，监听类配置，会话超时设置，过滤器设置，错误页面配置，欢迎文件配置。<br>]]>
    
    </summary>
    
      <category term="web" scheme="http://jinpingwang.github.io/tags/web/"/>
    
      <category term="web" scheme="http://jinpingwang.github.io/categories/web/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Servlet源码之RequestDispatcher]]></title>
    <link href="http://jinpingwang.github.io/2016/04/02/javaSourceCode/javax.servlet/RequestDispatcher/"/>
    <id>http://jinpingwang.github.io/2016/04/02/javaSourceCode/javax.servlet/RequestDispatcher/</id>
    <published>2016-04-02T04:01:54.000Z</published>
    <updated>2016-04-21T12:18:55.432Z</updated>
    <content type="html"><![CDATA[<p>介绍了Servlet-api中的RequestDispatcher接口，对接口作用以及里面的方法描述和需要注意的地方。</p>
<h3 id="u6E90_u7801"><a href="#u6E90_u7801" class="headerlink" title="源码"></a>源码</h3><p>ServletDispatcher接口用于从客户那里接收到的请求，然后发送给服务器上的servlet，HTML文件，或者是JSP文件。<br><a id="more"></a><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">RequestDispatcher</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">forward</span><span class="params">(ServletRequest request, ServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">include</span><span class="params">(ServletRequest request, ServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="u5256_u6790"><a href="#u5256_u6790" class="headerlink" title="剖析"></a>剖析</h3><p><code>public void forward(ServletRequest request, ServletResponse response) throws ServletException, IOException;</code>：<br>调用这个方法转发到别一个服务器上的资源比如：servlet，HTML，JSP。有一个需要注意的地方，在调用这个方法时必须保证response还没有被提交给客户。比如：<br><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">PrintWriter <span class="keyword">out</span> = response.getWriter();</span><br><span class="line"><span class="keyword">out</span>.write(<span class="string">"oh my god"</span>);</span><br><span class="line"><span class="keyword">out</span>.flush();</span><br><span class="line"></span><br><span class="line">RequestDispatcher rd = request.getRequestDispatcher(<span class="string">"test3"</span>);</span><br><span class="line">rd.forward(request, response);</span><br><span class="line"></span><br><span class="line"><span class="keyword">out</span>.<span class="keyword">close</span>();</span><br></pre></td></tr></table></figure></p>
<p>因为在调用forward时，使用了out.flush()，表示已经提交给客户，所以调用这个方法时就会抛出异常。如果在调用forward方法后还有语句，则还会接着执行。所以，如果不想让后面的语句继续执行，则应加一条return语句。</p>
<p><code>public void include(ServletRequest request, ServletResponse response) throws ServletException, IOException;</code>：<br>将服务器上的servlet，HTML，JSP包括进当前的response中返回给用户。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>介绍了Servlet-api中的RequestDispatcher接口，对接口作用以及里面的方法描述和需要注意的地方。</p>
<h3 id="u6E90_u7801"><a href="#u6E90_u7801" class="headerlink" title="源码"></a>源码</h3><p>ServletDispatcher接口用于从客户那里接收到的请求，然后发送给服务器上的servlet，HTML文件，或者是JSP文件。<br>]]>
    
    </summary>
    
      <category term="Servlet" scheme="http://jinpingwang.github.io/tags/Servlet/"/>
    
      <category term="Servlet" scheme="http://jinpingwang.github.io/categories/Servlet/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[反向最长匹配中文分词]]></title>
    <link href="http://jinpingwang.github.io/2016/01/02/nlp/2:%E5%8F%8D%E5%90%91%E6%9C%80%E9%95%BF%E5%8C%B9%E9%85%8D%E4%B8%AD%E5%88%86%E8%AF%8D/"/>
    <id>http://jinpingwang.github.io/2016/01/02/nlp/2:反向最长匹配中分词/</id>
    <published>2016-01-02T13:18:36.000Z</published>
    <updated>2016-03-12T01:29:06.404Z</updated>
    <content type="html"><![CDATA[<p>介绍了最基本的一种机械分词方法–反向最长匹配（另一种是上一篇讲的<a href="http://blog.wangjinping.top/2016/01/02/nlp/1:%E6%AD%A3%E5%90%91%E6%9C%80%E9%95%BF%E5%8C%B9%E9%85%8D%E4%B8%AD%E5%88%86%E8%AF%8D/" target="_blank" rel="external">正向最长匹配</a>）。以及使用java来实现分词功能。<br><a id="more"></a></p>
<h3 id="u95EE_u9898"><a href="#u95EE_u9898" class="headerlink" title="问题"></a>问题</h3><p>1：语料库为Corput：{“上网”，”网站”，”联盟”，”网站联盟”，”加入”，”我们”}<br>2：输入”上网站联盟加入我们”<br>3：输出分词结果</p>
<h3 id="u89E3_u51B3_u63CF_u8FF0"><a href="#u89E3_u51B3_u63CF_u8FF0" class="headerlink" title="解决描述"></a>解决描述</h3><p>1：查找”上网站联盟加入我们”是否在语料库Corput；<br>2：因为不在。所以取后n-1个字符：”网站联盟加入我们”，看是否在语料库Corput中；<br>3：依次执行这个过程，直到取到：”我们”，这两个字符在Corput语料库中；<br>4：取下”我们”，剩余未分词字符为：”上网站联盟加入”；<br>5：依次按1-4的流程得到剩余的分词为：”上”，”网站联盟”，”加入”，”我们”。</p>
<h3 id="u7A0B_u5E8F_u5B9E_u73B0"><a href="#u7A0B_u5E8F_u5B9E_u73B0" class="headerlink" title="程序实现"></a>程序实现</h3><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Test</span> </span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span>(<span class="params"> String[] args </span>)</span><br><span class="line">    </span>&#123;</span><br><span class="line">        ReversePositiveLongestMatch rlm=<span class="keyword">new</span> ReversePositiveLongestMatch();</span><br><span class="line">        System.<span class="keyword">out</span>.println(rlm.getSeperateString(<span class="string">"上网站联盟加入我们"</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight nimrod"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">public class <span class="type">ReversePositiveLongestMatch</span> &#123;</span><br><span class="line">	private <span class="type">List</span>&lt;<span class="type">String</span>&gt; ls=new <span class="type">ArrayList</span>&lt;<span class="type">String</span>&gt;(); </span><br><span class="line">	</span><br><span class="line">	public <span class="type">ReversePositiveLongestMatch</span>()&#123;</span><br><span class="line">		init();</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	private <span class="type">void</span> init()&#123;</span><br><span class="line">		ls.add(new <span class="type">String</span>(<span class="string">"上网"</span>));</span><br><span class="line">		ls.add(new <span class="type">String</span>(<span class="string">"网站"</span>));</span><br><span class="line">		ls.add(new <span class="type">String</span>(<span class="string">"联盟"</span>));</span><br><span class="line">		ls.add(new <span class="type">String</span>(<span class="string">"网站联盟"</span>));</span><br><span class="line">		ls.add(new <span class="type">String</span>(<span class="string">"加入"</span>));</span><br><span class="line">		ls.add(new <span class="type">String</span>(<span class="string">"我们"</span>));</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	public <span class="type">String</span> getSeperateString(<span class="type">String</span> sentence)&#123;</span><br><span class="line">		<span class="type">String</span> remainString=sentence;</span><br><span class="line">		<span class="type">String</span> <span class="literal">result</span>=<span class="string">""</span>;</span><br><span class="line">		<span class="keyword">while</span>(remainString.length()&gt;<span class="number">0</span>)&#123;</span><br><span class="line">			<span class="type">int</span> <span class="keyword">end</span>=getFinal(remainString);</span><br><span class="line">			<span class="keyword">if</span>(<span class="keyword">end</span>&gt;=<span class="number">0</span>)&#123;</span><br><span class="line">				<span class="keyword">if</span>(<span class="keyword">end</span>==<span class="number">0</span>)</span><br><span class="line">					<span class="keyword">return</span> <span class="literal">result</span>+remainString;</span><br><span class="line">				<span class="literal">result</span>=remainString.substring(<span class="keyword">end</span>, remainString.length())+<span class="string">"/"</span>+<span class="literal">result</span>;</span><br><span class="line">				remainString=remainString.substring(<span class="number">0</span>,<span class="keyword">end</span>);</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">else</span>&#123;</span><br><span class="line">				<span class="keyword">if</span>(remainString.length()==<span class="number">1</span>)&#123;</span><br><span class="line">					<span class="literal">result</span>=remainString+<span class="string">"/"</span>+<span class="literal">result</span>;</span><br><span class="line">					<span class="keyword">return</span> <span class="literal">result</span>.substring(<span class="number">0</span>,<span class="literal">result</span>.length()-<span class="number">1</span>);</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="literal">result</span>=remainString.charAt(remainString.length()-<span class="number">1</span>)+<span class="string">"/"</span>+<span class="literal">result</span>;</span><br><span class="line">				remainString=remainString.substring(<span class="number">0</span>,remainString.length()-<span class="number">1</span>);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">result</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	public <span class="type">int</span> getFinal(<span class="type">String</span> matchString)&#123;</span><br><span class="line">		</span><br><span class="line">		<span class="type">ArrayList</span>&lt;<span class="type">String</span>&gt; als=new <span class="type">ArrayList</span>&lt;<span class="type">String</span>&gt;();</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> i=matchString.length()-<span class="number">1</span>;i&gt;=<span class="number">0</span>;i--)&#123;</span><br><span class="line">			als.add(<span class="number">0</span>,matchString.substring(i, matchString.length()));</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;als.size();j++)&#123;</span><br><span class="line">			<span class="keyword">if</span>(ls.contains(als.get(j)))&#123;</span><br><span class="line">				<span class="keyword">return</span> j;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">分词结果：上<span class="regexp">/网站联盟/</span>加入/我们</span><br></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[<p>介绍了最基本的一种机械分词方法–反向最长匹配（另一种是上一篇讲的<a href="http://blog.wangjinping.top/2016/01/02/nlp/1:%E6%AD%A3%E5%90%91%E6%9C%80%E9%95%BF%E5%8C%B9%E9%85%8D%E4%B8%AD%E5%88%86%E8%AF%8D/">正向最长匹配</a>）。以及使用java来实现分词功能。<br>]]>
    
    </summary>
    
      <category term="NLP" scheme="http://jinpingwang.github.io/tags/NLP/"/>
    
      <category term="自然语言处理" scheme="http://jinpingwang.github.io/tags/%E8%87%AA%E7%84%B6%E8%AF%AD%E8%A8%80%E5%A4%84%E7%90%86/"/>
    
      <category term="自然语言处理" scheme="http://jinpingwang.github.io/categories/%E8%87%AA%E7%84%B6%E8%AF%AD%E8%A8%80%E5%A4%84%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[正向最长匹配中文分词]]></title>
    <link href="http://jinpingwang.github.io/2016/01/02/nlp/1:%E6%AD%A3%E5%90%91%E6%9C%80%E9%95%BF%E5%8C%B9%E9%85%8D%E4%B8%AD%E5%88%86%E8%AF%8D/"/>
    <id>http://jinpingwang.github.io/2016/01/02/nlp/1:正向最长匹配中分词/</id>
    <published>2016-01-02T01:02:21.000Z</published>
    <updated>2016-03-12T01:28:49.655Z</updated>
    <content type="html"><![CDATA[<p>介绍了最基本的一种机械分词方法–正向最长匹配（另一种是下一篇讲的<a href="http://blog.wangjinping.top/2016/01/02/nlp/2:%E5%8F%8D%E5%90%91%E6%9C%80%E9%95%BF%E5%8C%B9%E9%85%8D%E4%B8%AD%E5%88%86%E8%AF%8D/" target="_blank" rel="external">反向最长匹配</a>）。以及使用java来实现分词功能。<br><a id="more"></a></p>
<h3 id="u95EE_u9898"><a href="#u95EE_u9898" class="headerlink" title="问题"></a>问题</h3><p>1：语料库为Corput：{“上网”，”网站”，”联盟”，”网站联盟”，”加入”，”我们”}<br>2：输入”上网站联盟加入我们”<br>3：输出分词结果</p>
<h3 id="u89E3_u51B3_u63CF_u8FF0"><a href="#u89E3_u51B3_u63CF_u8FF0" class="headerlink" title="解决描述"></a>解决描述</h3><p>1：查找”上网站联盟加入我们”是否在语料库Corput；<br>2：因为不在。所以取前n-1个字符：”上网站联盟加入我”，看是否在语料库Corput中；<br>3：依次执行这个过程，直到取到：”上网”，这两个字符在Corput语料库中；<br>4：取下”上网”，剩余未分词字符为：”站联盟加入我们”；<br>5：依次按1-4的流程得到剩余的分词为：”站”，”联盟”，”加入”，”我们”。</p>
<h3 id="u7A0B_u5E8F_u5B9E_u73B0"><a href="#u7A0B_u5E8F_u5B9E_u73B0" class="headerlink" title="程序实现"></a>程序实现</h3><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Test</span> </span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span>(<span class="params"> String[] args </span>)</span><br><span class="line">    </span>&#123;</span><br><span class="line">        PositiveLongestMatch plm=<span class="keyword">new</span> PositiveLongestMatch();</span><br><span class="line">        System.<span class="keyword">out</span>.println(plm.getSeperateString(<span class="string">"上网站联盟加入我们"</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight nimrod"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">public class <span class="type">PositiveLongestMatch</span> &#123;</span><br><span class="line">	private <span class="type">List</span>&lt;<span class="type">String</span>&gt; ls=new <span class="type">ArrayList</span>&lt;<span class="type">String</span>&gt;(); </span><br><span class="line">	</span><br><span class="line">	public <span class="type">PositiveLongestMatch</span>()&#123;</span><br><span class="line">		init();</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	private <span class="type">void</span> init()&#123;</span><br><span class="line">		ls.add(new <span class="type">String</span>(<span class="string">"上网"</span>));</span><br><span class="line">		ls.add(new <span class="type">String</span>(<span class="string">"网站"</span>));</span><br><span class="line">		ls.add(new <span class="type">String</span>(<span class="string">"联盟"</span>));</span><br><span class="line">		ls.add(new <span class="type">String</span>(<span class="string">"网站联盟"</span>));</span><br><span class="line">		ls.add(new <span class="type">String</span>(<span class="string">"加入"</span>));</span><br><span class="line">		ls.add(new <span class="type">String</span>(<span class="string">"我们"</span>));</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	public <span class="type">String</span> getSeperateString(<span class="type">String</span> sentence)&#123;</span><br><span class="line">		<span class="type">String</span> remainString=sentence;</span><br><span class="line">		<span class="type">String</span> <span class="literal">result</span>=<span class="string">""</span>;</span><br><span class="line">		<span class="keyword">while</span>(remainString.length()&gt;<span class="number">0</span>)&#123;</span><br><span class="line">			<span class="type">int</span> <span class="keyword">end</span>=getFinal(remainString);</span><br><span class="line">			<span class="keyword">if</span>(<span class="keyword">end</span>&gt;<span class="number">0</span>)&#123;</span><br><span class="line">				<span class="keyword">if</span>(<span class="keyword">end</span>==remainString.length())</span><br><span class="line">					<span class="keyword">return</span> <span class="literal">result</span>+remainString;</span><br><span class="line">				<span class="literal">result</span>+=remainString.substring(<span class="number">0</span>, <span class="keyword">end</span>)+<span class="string">"|"</span>;</span><br><span class="line">				remainString=remainString.substring(<span class="keyword">end</span>);</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">else</span>&#123;</span><br><span class="line">				<span class="keyword">if</span>(remainString.length()==<span class="number">1</span>)</span><br><span class="line">					<span class="keyword">return</span> <span class="literal">result</span>+remainString;</span><br><span class="line">				<span class="literal">result</span>+=remainString.charAt(<span class="number">0</span>)+<span class="string">"|"</span>;</span><br><span class="line">				remainString=remainString.substring(<span class="number">1</span>);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">result</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	public <span class="type">int</span> getFinal(<span class="type">String</span> matchString)&#123;</span><br><span class="line">		</span><br><span class="line">		<span class="type">ArrayList</span>&lt;<span class="type">String</span>&gt; als=new <span class="type">ArrayList</span>&lt;<span class="type">String</span>&gt;();</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=matchString.length();i++)&#123;</span><br><span class="line">			als.add(matchString.substring(<span class="number">0</span>, i));</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> j=als.size();j&gt;<span class="number">0</span>;j--)&#123;</span><br><span class="line">			<span class="keyword">if</span>(ls.contains(als.get(j-<span class="number">1</span>)))&#123;</span><br><span class="line">				<span class="keyword">return</span> j;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">分词结果：上网<span class="regexp">/站/</span>联盟<span class="regexp">/加入/</span>我们</span><br></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[<p>介绍了最基本的一种机械分词方法–正向最长匹配（另一种是下一篇讲的<a href="http://blog.wangjinping.top/2016/01/02/nlp/2:%E5%8F%8D%E5%90%91%E6%9C%80%E9%95%BF%E5%8C%B9%E9%85%8D%E4%B8%AD%E5%88%86%E8%AF%8D/">反向最长匹配</a>）。以及使用java来实现分词功能。<br>]]>
    
    </summary>
    
      <category term="NLP" scheme="http://jinpingwang.github.io/tags/NLP/"/>
    
      <category term="自然语言处理" scheme="http://jinpingwang.github.io/tags/%E8%87%AA%E7%84%B6%E8%AF%AD%E8%A8%80%E5%A4%84%E7%90%86/"/>
    
      <category term="自然语言处理" scheme="http://jinpingwang.github.io/categories/%E8%87%AA%E7%84%B6%E8%AF%AD%E8%A8%80%E5%A4%84%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[java源码之Vector]]></title>
    <link href="http://jinpingwang.github.io/2015/11/08/javaSourceCode/java.util/Vector/"/>
    <id>http://jinpingwang.github.io/2015/11/08/javaSourceCode/java.util/Vector/</id>
    <published>2015-11-08T12:19:35.000Z</published>
    <updated>2016-01-07T08:26:39.664Z</updated>
    <content type="html"><![CDATA[<p>主要介绍了有关于Vector的源码。包括数据成员的解读与方法的剖析。另外还简单的与ArrayList进行比较。<br><a id="more"></a></p>
<h3 id="u6E90_u4EE3_u7801"><a href="#u6E90_u4EE3_u7801" class="headerlink" title="源代码"></a>源代码</h3><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br><span class="line">535</span><br><span class="line">536</span><br><span class="line">537</span><br><span class="line">538</span><br><span class="line">539</span><br><span class="line">540</span><br><span class="line">541</span><br><span class="line">542</span><br><span class="line">543</span><br><span class="line">544</span><br><span class="line">545</span><br><span class="line">546</span><br><span class="line">547</span><br><span class="line">548</span><br><span class="line">549</span><br><span class="line">550</span><br><span class="line">551</span><br><span class="line">552</span><br><span class="line">553</span><br><span class="line">554</span><br><span class="line">555</span><br><span class="line">556</span><br><span class="line">557</span><br><span class="line">558</span><br><span class="line">559</span><br><span class="line">560</span><br><span class="line">561</span><br><span class="line">562</span><br><span class="line">563</span><br><span class="line">564</span><br><span class="line">565</span><br><span class="line">566</span><br><span class="line">567</span><br><span class="line">568</span><br><span class="line">569</span><br><span class="line">570</span><br><span class="line">571</span><br><span class="line">572</span><br><span class="line">573</span><br><span class="line">574</span><br><span class="line">575</span><br><span class="line">576</span><br><span class="line">577</span><br><span class="line">578</span><br><span class="line">579</span><br><span class="line">580</span><br><span class="line">581</span><br><span class="line">582</span><br><span class="line">583</span><br><span class="line">584</span><br><span class="line">585</span><br><span class="line">586</span><br><span class="line">587</span><br><span class="line">588</span><br><span class="line">589</span><br><span class="line">590</span><br><span class="line">591</span><br><span class="line">592</span><br><span class="line">593</span><br><span class="line">594</span><br><span class="line">595</span><br><span class="line">596</span><br><span class="line">597</span><br><span class="line">598</span><br><span class="line">599</span><br><span class="line">600</span><br><span class="line">601</span><br><span class="line">602</span><br><span class="line">603</span><br><span class="line">604</span><br><span class="line">605</span><br><span class="line">606</span><br><span class="line">607</span><br><span class="line">608</span><br><span class="line">609</span><br><span class="line">610</span><br><span class="line">611</span><br><span class="line">612</span><br><span class="line">613</span><br><span class="line">614</span><br><span class="line">615</span><br><span class="line">616</span><br><span class="line">617</span><br><span class="line">618</span><br><span class="line">619</span><br><span class="line">620</span><br><span class="line">621</span><br><span class="line">622</span><br><span class="line">623</span><br><span class="line">624</span><br><span class="line">625</span><br><span class="line">626</span><br><span class="line">627</span><br><span class="line">628</span><br><span class="line">629</span><br><span class="line">630</span><br><span class="line">631</span><br><span class="line">632</span><br><span class="line">633</span><br><span class="line">634</span><br><span class="line">635</span><br><span class="line">636</span><br><span class="line">637</span><br><span class="line">638</span><br><span class="line">639</span><br><span class="line">640</span><br><span class="line">641</span><br><span class="line">642</span><br><span class="line">643</span><br><span class="line">644</span><br><span class="line">645</span><br><span class="line">646</span><br><span class="line">647</span><br><span class="line">648</span><br><span class="line">649</span><br><span class="line">650</span><br><span class="line">651</span><br><span class="line">652</span><br><span class="line">653</span><br><span class="line">654</span><br><span class="line">655</span><br><span class="line">656</span><br><span class="line">657</span><br><span class="line">658</span><br><span class="line">659</span><br><span class="line">660</span><br><span class="line">661</span><br><span class="line">662</span><br><span class="line">663</span><br><span class="line">664</span><br><span class="line">665</span><br><span class="line">666</span><br><span class="line">667</span><br><span class="line">668</span><br><span class="line">669</span><br><span class="line">670</span><br><span class="line">671</span><br><span class="line">672</span><br><span class="line">673</span><br><span class="line">674</span><br><span class="line">675</span><br><span class="line">676</span><br><span class="line">677</span><br><span class="line">678</span><br><span class="line">679</span><br><span class="line">680</span><br><span class="line">681</span><br><span class="line">682</span><br><span class="line">683</span><br><span class="line">684</span><br><span class="line">685</span><br><span class="line">686</span><br><span class="line">687</span><br><span class="line">688</span><br><span class="line">689</span><br><span class="line">690</span><br><span class="line">691</span><br><span class="line">692</span><br><span class="line">693</span><br><span class="line">694</span><br><span class="line">695</span><br><span class="line">696</span><br><span class="line">697</span><br><span class="line">698</span><br><span class="line">699</span><br><span class="line">700</span><br><span class="line">701</span><br><span class="line">702</span><br><span class="line">703</span><br><span class="line">704</span><br><span class="line">705</span><br><span class="line">706</span><br><span class="line">707</span><br><span class="line">708</span><br><span class="line">709</span><br><span class="line">710</span><br><span class="line">711</span><br><span class="line">712</span><br><span class="line">713</span><br><span class="line">714</span><br><span class="line">715</span><br><span class="line">716</span><br><span class="line">717</span><br><span class="line">718</span><br><span class="line">719</span><br><span class="line">720</span><br><span class="line">721</span><br><span class="line">722</span><br><span class="line">723</span><br><span class="line">724</span><br><span class="line">725</span><br><span class="line">726</span><br><span class="line">727</span><br><span class="line">728</span><br><span class="line">729</span><br><span class="line">730</span><br><span class="line">731</span><br><span class="line">732</span><br><span class="line">733</span><br><span class="line">734</span><br><span class="line">735</span><br><span class="line">736</span><br><span class="line">737</span><br><span class="line">738</span><br><span class="line">739</span><br><span class="line">740</span><br><span class="line">741</span><br><span class="line">742</span><br><span class="line">743</span><br><span class="line">744</span><br><span class="line">745</span><br><span class="line">746</span><br><span class="line">747</span><br><span class="line">748</span><br><span class="line">749</span><br><span class="line">750</span><br><span class="line">751</span><br><span class="line">752</span><br><span class="line">753</span><br><span class="line">754</span><br><span class="line">755</span><br><span class="line">756</span><br><span class="line">757</span><br><span class="line">758</span><br><span class="line">759</span><br><span class="line">760</span><br><span class="line">761</span><br><span class="line">762</span><br><span class="line">763</span><br><span class="line">764</span><br><span class="line">765</span><br><span class="line">766</span><br><span class="line">767</span><br><span class="line">768</span><br><span class="line">769</span><br><span class="line">770</span><br><span class="line">771</span><br><span class="line">772</span><br><span class="line">773</span><br><span class="line">774</span><br><span class="line">775</span><br><span class="line">776</span><br><span class="line">777</span><br><span class="line">778</span><br><span class="line">779</span><br><span class="line">780</span><br><span class="line">781</span><br><span class="line">782</span><br><span class="line">783</span><br><span class="line">784</span><br><span class="line">785</span><br><span class="line">786</span><br><span class="line">787</span><br><span class="line">788</span><br><span class="line">789</span><br><span class="line">790</span><br><span class="line">791</span><br><span class="line">792</span><br><span class="line">793</span><br><span class="line">794</span><br><span class="line">795</span><br><span class="line">796</span><br><span class="line">797</span><br><span class="line">798</span><br><span class="line">799</span><br><span class="line">800</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> java.util;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.function.Consumer;</span><br><span class="line"><span class="keyword">import</span> java.util.function.Predicate;</span><br><span class="line"><span class="keyword">import</span> java.util.function.UnaryOperator;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span><br><span class="line"> * 处理类似于Vector，ArrayList中的方法时，要考虑以下因素</span><br><span class="line"> * 1：是否需要修改长度</span><br><span class="line"> * 2：是否要动态扩涨</span><br><span class="line"> * 3：是否需要修改modCount</span><br><span class="line"> * 4：index是否越界 </span><br><span class="line"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Vector</span>&lt;<span class="title">E</span>&gt; <span class="keyword">extends</span> <span class="title">AbstractList</span> <span class="keyword">implements</span> <span class="title">Cloneable</span></span>&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//不同于ArrayList，elementData是可直接序列化</span></span><br><span class="line">	<span class="keyword">protected</span> Object[] elementData;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//类似于ArrayList中的size</span></span><br><span class="line">	<span class="keyword">protected</span> <span class="keyword">int</span> elementCount;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">protected</span> <span class="keyword">int</span> capacityIncrement;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">Vector</span><span class="params">(<span class="keyword">int</span> initialCapacity,<span class="keyword">int</span> capacityIncrement)</span></span>&#123;</span><br><span class="line">		<span class="keyword">super</span>();</span><br><span class="line">		<span class="keyword">if</span>(initialCapacity &lt; <span class="number">0</span>)&#123;</span><br><span class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Illegal Capacity: "</span>+initialCapacity);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">this</span>.elementData=<span class="keyword">new</span> Object[initialCapacity];</span><br><span class="line">		<span class="keyword">this</span>.capacityIncrement=capacityIncrement;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">Vector</span><span class="params">(<span class="keyword">int</span> intialCapacity)</span></span>&#123;</span><br><span class="line">		<span class="keyword">this</span>(intialCapacity,<span class="number">0</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">Vector</span><span class="params">()</span></span>&#123;</span><br><span class="line">		<span class="keyword">this</span>(<span class="number">10</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">Vector</span><span class="params">(Collection&lt;? <span class="keyword">extends</span> E&gt; c)</span></span>&#123;</span><br><span class="line">		elementData=c.toArray();</span><br><span class="line">		elementCount=elementData.length;</span><br><span class="line">		<span class="keyword">if</span>(elementData.getClass() != Object[].class)&#123;</span><br><span class="line">			elementData=Arrays.copyOf(elementData, elementCount,Object[].class);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="function"><span class="keyword">void</span> <span class="title">copyInto</span><span class="params">(Object[] anArray)</span></span>&#123;</span><br><span class="line">		System.arraycopy(elementData, <span class="number">0</span>, anArray, <span class="number">0</span>, elementCount);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="function"><span class="keyword">void</span> <span class="title">trimToSize</span><span class="params">()</span></span>&#123;</span><br><span class="line">		modCount++;</span><br><span class="line">		<span class="keyword">int</span> oldCapacity=elementData.length;</span><br><span class="line">		<span class="keyword">if</span>(elementCount&lt;oldCapacity)&#123;</span><br><span class="line">			elementData=Arrays.copyOf(elementData, elementCount);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">/**</span><br><span class="line">	 * 以下几个都是关于Vector动态扩张的方法：</span><br><span class="line">	 * 要注意一点，ArrayList中像对add这一类添加对modCount的修改都统一放到动态扩张的</span><br><span class="line">	 * 方法中进行修改。</span><br><span class="line">	 * 但Vector不是这样处理。Vector中的add这一类方法里直接修改了modCount，没有放到动态扩张的方法中</span><br><span class="line">	 * 还有另外一点，ArrayList是按1.5倍速度扩张，而Vector是按2倍的速度扩张（如果capacityIncrement=0）。</span><br><span class="line">	 */</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="function"><span class="keyword">void</span> <span class="title">ensureCapacity</span><span class="params">(<span class="keyword">int</span> minCapacity)</span></span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(minCapacity &gt; <span class="number">0</span>)&#123;</span><br><span class="line">			modCount++;</span><br><span class="line">			ensureCapacityHelper(minCapacity);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">private</span> <span class="function"><span class="keyword">void</span> <span class="title">ensureCapacityHelper</span><span class="params">(<span class="keyword">int</span> minCapacity)</span></span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(minCapacity-elementData.length&gt;<span class="number">0</span>)&#123;</span><br><span class="line">			grow(minCapacity);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MAX_ARRAY_SIZE=Integer.MAX_VALUE-<span class="number">8</span>;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">private</span> <span class="function"><span class="keyword">void</span> <span class="title">grow</span><span class="params">(<span class="keyword">int</span> minCapacity)</span></span>&#123;</span><br><span class="line">		<span class="keyword">int</span> oldCapacity=elementData.length;</span><br><span class="line">		<span class="keyword">int</span> newCapacity=oldCapacity+((capacityIncrement&gt;<span class="number">0</span>)?capacityIncrement:oldCapacity);</span><br><span class="line">		<span class="keyword">if</span>(newCapacity-minCapacity&lt;<span class="number">0</span>)&#123;</span><br><span class="line">			newCapacity=minCapacity;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(newCapacity-MAX_ARRAY_SIZE&gt;<span class="number">0</span>)&#123;</span><br><span class="line">			newCapacity=hugeCapacity(minCapacity);</span><br><span class="line">		&#125;</span><br><span class="line">		elementData=Arrays.copyOf(elementData, newCapacity);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="function"><span class="keyword">int</span> <span class="title">hugeCapacity</span><span class="params">(<span class="keyword">int</span> minCapacity)</span></span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(minCapacity&lt;<span class="number">0</span>)&#123;</span><br><span class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> OutOfMemoryError();</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> (minCapacity&gt;MAX_ARRAY_SIZE)?Integer.MAX_VALUE:MAX_ARRAY_SIZE;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">/**</span><br><span class="line">	 * 这里有一个不是bug的bug，假如newSize=elementCount</span><br><span class="line">	 * 则结果并没有修改，但却修改了modCount的值。 </span><br><span class="line">	 */</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="function"><span class="keyword">void</span> <span class="title">setSize</span><span class="params">(<span class="keyword">int</span> newSize)</span></span>&#123;</span><br><span class="line">		modCount++;</span><br><span class="line">		<span class="keyword">if</span>(newSize &gt; elementCount)&#123;</span><br><span class="line">			ensureCapacityHelper(newSize);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span>&#123;</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> i=newSize;i&lt;elementCount;i++)&#123;</span><br><span class="line">				elementData[i]=<span class="keyword">null</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="function"><span class="keyword">int</span> <span class="title">capacity</span><span class="params">()</span></span>&#123;</span><br><span class="line">		<span class="keyword">return</span> elementData.length;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="function"><span class="keyword">int</span> <span class="title">size</span><span class="params">()</span></span>&#123;</span><br><span class="line">		<span class="keyword">return</span> elementCount;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="function"><span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span></span>&#123;</span><br><span class="line">		<span class="keyword">return</span> elementCount==<span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">public</span> Enumeration&lt;E&gt; elements()&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">new</span> Enumeration&lt;E&gt;()&#123;</span><br><span class="line">			<span class="keyword">int</span> count=<span class="number">0</span>;</span><br><span class="line">			</span><br><span class="line">			<span class="keyword">public</span> <span class="function"><span class="keyword">boolean</span> <span class="title">hasMoreElements</span><span class="params">()</span></span>&#123;</span><br><span class="line">				<span class="keyword">return</span> count &lt; elementCount;</span><br><span class="line">			&#125;</span><br><span class="line">			</span><br><span class="line">			<span class="keyword">public</span> <span class="function">E <span class="title">nextElement</span><span class="params">()</span></span>&#123;</span><br><span class="line">				<span class="keyword">synchronized</span>(Vector.<span class="keyword">this</span>)&#123;</span><br><span class="line">					<span class="keyword">if</span>(count&lt;elementCount)&#123;</span><br><span class="line">						<span class="function"><span class="keyword">return</span> <span class="title">elementData</span><span class="params">(count++)</span></span>;</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">throw</span> <span class="keyword">new</span> NoSuchElementException(<span class="string">"Vector Enumeration"</span>);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="function">E <span class="title">elementData</span><span class="params">(<span class="keyword">int</span> index)</span></span>&#123;</span><br><span class="line">		<span class="keyword">return</span> (E) elementData[index];</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">public</span> <span class="function"><span class="keyword">boolean</span> <span class="title">contains</span><span class="params">(Object o)</span></span>&#123;</span><br><span class="line">		<span class="keyword">return</span> indexOf(o,<span class="number">0</span>)&gt;=<span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">public</span> <span class="function"><span class="keyword">int</span> <span class="title">indexOf</span><span class="params">(Object o)</span></span>&#123;</span><br><span class="line">		<span class="function"><span class="keyword">return</span> <span class="title">indexOf</span><span class="params">(o,<span class="number">0</span>)</span></span>;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">/**</span><br><span class="line">	 * 这个函数是ArrayList中没有的</span><br><span class="line">	 * 可以从指定的位置到最后，看这个区间是否包含这个元素</span><br><span class="line">	 * 而ArrayList中只能从头到尾，全局判断是否有这个元素</span><br><span class="line">	 */</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="function"><span class="keyword">int</span> <span class="title">indexOf</span><span class="params">(Object o,<span class="keyword">int</span> index)</span></span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(o==<span class="keyword">null</span>)&#123;</span><br><span class="line">			<span class="keyword">for</span>(;index&lt;elementData.length;index++)&#123;</span><br><span class="line">				<span class="keyword">if</span>(o==elementData[index])&#123;</span><br><span class="line">					<span class="keyword">return</span> index;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span>&#123;</span><br><span class="line">			<span class="keyword">for</span>(;index&lt;elementData.length;index++)&#123;</span><br><span class="line">				<span class="keyword">if</span>(o.equals(elementData[index]))&#123;</span><br><span class="line">					<span class="keyword">return</span> index;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="function"><span class="keyword">int</span> <span class="title">lastIndexOf</span><span class="params">(Object o)</span></span>&#123;</span><br><span class="line">		<span class="function"><span class="keyword">return</span> <span class="title">lastIndexOf</span><span class="params">(o,elementCount-<span class="number">1</span>)</span></span>;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">/**</span><br><span class="line">	 * 这里与indexOf(o,index)编码风格都不一致</span><br><span class="line">	 * indexOf中如果越界就直接返回-1;</span><br><span class="line">	 * lastIndexOf越界就直接抛出异常;</span><br><span class="line">	 */</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="function"><span class="keyword">int</span> <span class="title">lastIndexOf</span><span class="params">(Object o,<span class="keyword">int</span> index)</span></span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(index &gt;=elementCount)&#123;</span><br><span class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> IndexOutOfBoundsException(index+<span class="string">" &gt;= "</span>+elementCount);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(o==<span class="keyword">null</span>)&#123;</span><br><span class="line">			<span class="keyword">for</span>(;index&gt;=<span class="number">0</span>;index--)&#123;</span><br><span class="line">				<span class="keyword">if</span>(elementData[index]==o)&#123;</span><br><span class="line">					<span class="keyword">return</span> index;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span>&#123;</span><br><span class="line">			<span class="keyword">for</span>(;index&gt;<span class="number">0</span>;index--)&#123;</span><br><span class="line">				<span class="keyword">if</span>(o.equals(elementData[index]))&#123;</span><br><span class="line">					<span class="keyword">return</span> index;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="function">E <span class="title">elementAt</span><span class="params">(<span class="keyword">int</span> index)</span></span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(index &gt;= elementCount)&#123;</span><br><span class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> ArrayIndexOutOfBoundsException(index+<span class="string">" &gt;= "</span>+elementCount);</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">		<span class="function"><span class="keyword">return</span> <span class="title">elementData</span><span class="params">(index)</span></span>; </span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="function">E <span class="title">firstElement</span><span class="params">()</span></span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(elementCount==<span class="number">0</span>)&#123;</span><br><span class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> NoSuchElementException();</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="function"><span class="keyword">return</span> <span class="title">elementData</span><span class="params">(<span class="number">0</span>)</span></span>;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="function">E <span class="title">lastElement</span><span class="params">()</span></span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(elementCount==<span class="number">0</span>)&#123;</span><br><span class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> NoSuchElementException();</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="function"><span class="keyword">return</span> <span class="title">elementData</span><span class="params">(elementCount-<span class="number">1</span>)</span></span>;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">/**</span><br><span class="line">	 * Vector中的好多代码没有像ArrayList那么统一的处理，</span><br><span class="line">	 * 也不像ArrayList中那么严谨</span><br><span class="line">	 * 比如这里对index进行判断时都未加上index&lt;0的情况</span><br><span class="line">	 */</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="function"><span class="keyword">void</span> <span class="title">setElementAt</span><span class="params">(E obj,<span class="keyword">int</span> index)</span></span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(index&gt;=elementCount)&#123;</span><br><span class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> ArrayIndexOutOfBoundsException(index+<span class="string">" &gt;= "</span>+elementCount);</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">		elementData[index]=obj;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">/**</span><br><span class="line">	 * ArrayList中对应的是先进行判断是否越界，然后再进行对modCount操作</span><br><span class="line">	 * 而Vector中是先进行modCount操作，然后再进行越界判断</span><br><span class="line">	 */</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="function"><span class="keyword">void</span> <span class="title">removeElementAt</span><span class="params">(<span class="keyword">int</span> index)</span></span>&#123;</span><br><span class="line">		modCount++;</span><br><span class="line">		<span class="keyword">if</span>(index &gt;= elementCount)&#123;</span><br><span class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> ArrayIndexOutOfBoundsException(index +<span class="string">" &gt;= "</span>+elementCount);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="function"><span class="keyword">else</span> <span class="title">if</span><span class="params">(index &lt; <span class="number">0</span>)</span></span>&#123;</span><br><span class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> ArrayIndexOutOfBoundsException(index);</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">int</span> j=elementCount-index-<span class="number">1</span>;</span><br><span class="line">		<span class="keyword">if</span>(j &gt; <span class="number">0</span>)&#123;</span><br><span class="line">			System.arraycopy(elementData, index+<span class="number">1</span>, elementData, index, j);</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">		elementCount--;</span><br><span class="line">		elementData[elementCount]=<span class="keyword">null</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="function"><span class="keyword">void</span> <span class="title">insertElementAt</span><span class="params">(E obj,<span class="keyword">int</span> index)</span></span>&#123;</span><br><span class="line">		modCount++;</span><br><span class="line">		<span class="keyword">if</span>(index &gt; elementCount)&#123;</span><br><span class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> ArrayIndexOutOfBoundsException(index+<span class="string">" &gt; "</span>+elementCount);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(index &lt; <span class="number">0</span>)&#123;</span><br><span class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> ArrayIndexOutOfBoundsException(index);</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">		ensureCapacityHelper(elementCount+<span class="number">1</span>);</span><br><span class="line">		</span><br><span class="line">		System.arraycopy(elementData, index, elementData, index+<span class="number">1</span>, elementCount-index);</span><br><span class="line">		elementCount++;</span><br><span class="line">		elementData[index]=obj;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="function"><span class="keyword">void</span> <span class="title">addElement</span><span class="params">(E obj)</span></span>&#123;</span><br><span class="line">		modCount++;</span><br><span class="line">		ensureCapacityHelper(elementCount+<span class="number">1</span>);</span><br><span class="line">		elementData[elementCount++]=obj;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">/**</span><br><span class="line">	 * 这个函数调用的是removeElementAt方法，但removeElementAt中已经对modCount进行修改了</span><br><span class="line">	 * 这里还对modCount修改，并且如果elementData中不存在obj，还是对modCount修改</span><br><span class="line">	 * ArrayList中就不会这样处理</span><br><span class="line">	 */</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="function"><span class="keyword">boolean</span> <span class="title">removeElement</span><span class="params">(Object obj)</span></span>&#123;</span><br><span class="line">		modCount++;</span><br><span class="line">		<span class="keyword">int</span> index=indexOf(obj);</span><br><span class="line">		<span class="keyword">if</span>(index&gt;<span class="number">0</span>)&#123;</span><br><span class="line">			removeElementAt(index);</span><br><span class="line">			<span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="function"><span class="keyword">void</span> <span class="title">removeAllElements</span><span class="params">()</span></span>&#123;</span><br><span class="line">		modCount++;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;elementData.length;i++)&#123;</span><br><span class="line">			elementData[i]=<span class="keyword">null</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		elementCount=<span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="function">Object <span class="title">clone</span><span class="params">()</span></span>&#123;</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			<span class="annotation">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</span><br><span class="line">			<span class="comment">//调用的是Object的clone的方法</span></span><br><span class="line">			<span class="comment">//父类的clone创建了各个数据域</span></span><br><span class="line">			<span class="comment">//然后修改modCount的值，并修改elementData指向新创建的区域</span></span><br><span class="line">			<span class="comment">//如果elementData中的元素是引用，则虽然elementData不同</span></span><br><span class="line">			<span class="comment">//但elementData中元素指向的引用是同一个元素</span></span><br><span class="line">			Vector&lt;E&gt; v=(Vector&lt;E&gt;)<span class="keyword">super</span>.clone();</span><br><span class="line">			v.elementData=Arrays.copyOf(elementData, elementCount);</span><br><span class="line">			v.modCount=<span class="number">0</span>;</span><br><span class="line">			<span class="keyword">return</span> v;</span><br><span class="line">		&#125; <span class="keyword">catch</span> (CloneNotSupportedException e) &#123;</span><br><span class="line">			<span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> InternalError(e);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">synchronized</span> Object[] toArray()&#123;</span><br><span class="line">		<span class="function"><span class="keyword">return</span> Arrays.<span class="title">copyOf</span><span class="params">(elementData,elementCount)</span></span>;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">synchronized</span> &lt;T&gt; T[] toArray(T[] a)&#123;</span><br><span class="line">		<span class="keyword">if</span>(a.length&lt;elementCount)&#123;</span><br><span class="line">			<span class="keyword">return</span> (T[]) Arrays.copyOf(elementData,elementCount,a.getClass());</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">		System.arraycopy(elementData, <span class="number">0</span>, a, <span class="number">0</span>, elementCount);</span><br><span class="line">		</span><br><span class="line">		<span class="comment">//这里只对a[elementCount]这个元素设置为null</span></span><br><span class="line">		<span class="comment">//[elementCount+1,a.length-1]中的元素还是保留不变</span></span><br><span class="line">		<span class="keyword">if</span>(a.length&gt;elementCount)&#123;</span><br><span class="line">			a[elementCount]=<span class="keyword">null</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> a;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="function">E <span class="title">get</span><span class="params">(<span class="keyword">int</span> index)</span></span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(index&gt;=elementCount)&#123;</span><br><span class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> IndexOutOfBoundsException(index+<span class="string">" &gt;= "</span>+elementCount);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(index &lt; <span class="number">0</span>)&#123;</span><br><span class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> ArrayIndexOutOfBoundsException(index);</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">		<span class="function"><span class="keyword">return</span> <span class="title">elementData</span><span class="params">(index)</span></span>;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="function">E <span class="title">set</span><span class="params">(<span class="keyword">int</span> index,E element)</span></span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(index &gt;= elementCount)&#123;</span><br><span class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> IndexOutOfBoundsException(index+<span class="string">" &gt;= "</span>+elementCount);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(index &lt; <span class="number">0</span>)&#123;</span><br><span class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> ArrayIndexOutOfBoundsException(index);</span><br><span class="line">		&#125;</span><br><span class="line">		E original=elementData(index);</span><br><span class="line">		elementData[index]=element;</span><br><span class="line">		<span class="keyword">return</span> original;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="function"><span class="keyword">boolean</span> <span class="title">add</span><span class="params">(E e)</span></span>&#123;</span><br><span class="line">		modCount++;</span><br><span class="line">		ensureCapacityHelper(elementCount+<span class="number">1</span>);</span><br><span class="line">		elementData[elementCount++]=e;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//这个添加的方法之所以没有添加synchronized</span></span><br><span class="line">	<span class="comment">//是因为里面调用的是synchronized的方法</span></span><br><span class="line">	<span class="comment">//下面的add方法也一样</span></span><br><span class="line">	<span class="keyword">public</span> <span class="function"><span class="keyword">boolean</span> <span class="title">remove</span><span class="params">(Object o)</span></span>&#123;</span><br><span class="line">		<span class="function"><span class="keyword">return</span> <span class="title">removeElement</span><span class="params">(o)</span></span>;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> index,E element)</span></span>&#123;</span><br><span class="line">		insertElementAt(element,index);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="function">E <span class="title">remove</span><span class="params">(<span class="keyword">int</span> index)</span></span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(index &gt;= elementCount)&#123;</span><br><span class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> IndexOutOfBoundsException(index+<span class="string">" &gt; "</span>+elementCount);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(index &lt; <span class="number">0</span>)&#123;</span><br><span class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> ArrayIndexOutOfBoundsException(index);</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">		E value=elementData(index);</span><br><span class="line">		removeElementAt(index);</span><br><span class="line">		<span class="keyword">return</span> value;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span></span>&#123;</span><br><span class="line">		removeAllElements();</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//ArrayList中没有这个方法。</span></span><br><span class="line">	<span class="comment">//调用的是父类的containsAll，这个方法里面调用的是contains这个方法</span></span><br><span class="line">	<span class="comment">//Vector重写了contains方法，所以父类中containsAll方法调用的实际上是</span></span><br><span class="line">	<span class="comment">//Vector中的contains方法</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="function"><span class="keyword">boolean</span> <span class="title">containsAll</span><span class="params">(Collection&lt;?&gt; c)</span></span>&#123;</span><br><span class="line">		<span class="function"><span class="keyword">return</span> <span class="keyword">super</span>.<span class="title">containsAll</span><span class="params">(c)</span></span>;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	 <span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="function"><span class="keyword">boolean</span> <span class="title">addAll</span><span class="params">(Collection&lt;? <span class="keyword">extends</span> E&gt; c)</span> </span>&#123;</span><br><span class="line">	        modCount++;</span><br><span class="line">	        Object[] a = c.toArray();</span><br><span class="line">	        <span class="keyword">int</span> numNew = a.length;</span><br><span class="line">	        ensureCapacityHelper(elementCount + numNew);</span><br><span class="line">	        System.arraycopy(a, <span class="number">0</span>, elementData, elementCount, numNew);</span><br><span class="line">	        elementCount += numNew;</span><br><span class="line">	        <span class="keyword">return</span> numNew != <span class="number">0</span>;</span><br><span class="line">	    &#125;</span><br><span class="line">	 </span><br><span class="line">	 <span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="function"><span class="keyword">boolean</span> <span class="title">removeAll</span><span class="params">(Collection&lt;?&gt; c)</span> </span>&#123;</span><br><span class="line">	        <span class="function"><span class="keyword">return</span> <span class="keyword">super</span>.<span class="title">removeAll</span><span class="params">(c)</span></span>;</span><br><span class="line">	    &#125;</span><br><span class="line">	</span><br><span class="line">	 <span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="function"><span class="keyword">boolean</span> <span class="title">retainAll</span><span class="params">(Collection&lt;?&gt; c)</span> </span>&#123;</span><br><span class="line">	        <span class="function"><span class="keyword">return</span> <span class="keyword">super</span>.<span class="title">retainAll</span><span class="params">(c)</span></span>;</span><br><span class="line">	    &#125;</span><br><span class="line">	</span><br><span class="line">	 <span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="function"><span class="keyword">boolean</span> <span class="title">addAll</span><span class="params">(<span class="keyword">int</span> index, Collection&lt;? <span class="keyword">extends</span> E&gt; c)</span> </span>&#123;</span><br><span class="line">	        modCount++;</span><br><span class="line">	        <span class="keyword">if</span> (index &lt; <span class="number">0</span> || index &gt; elementCount)</span><br><span class="line">	            <span class="keyword">throw</span> <span class="keyword">new</span> ArrayIndexOutOfBoundsException(index);</span><br><span class="line"></span><br><span class="line">	        Object[] a = c.toArray();</span><br><span class="line">	        <span class="keyword">int</span> numNew = a.length;</span><br><span class="line">	        ensureCapacityHelper(elementCount + numNew);</span><br><span class="line"></span><br><span class="line">	        <span class="keyword">int</span> numMoved = elementCount - index;</span><br><span class="line">	        <span class="keyword">if</span> (numMoved &gt; <span class="number">0</span>)</span><br><span class="line">	            System.arraycopy(elementData, index, elementData, index + numNew,</span><br><span class="line">	                             numMoved);</span><br><span class="line"></span><br><span class="line">	        System.arraycopy(a, <span class="number">0</span>, elementData, index, numNew);</span><br><span class="line">	        elementCount += numNew;</span><br><span class="line">	        <span class="keyword">return</span> numNew != <span class="number">0</span>;</span><br><span class="line">	    &#125;</span><br><span class="line">	</span><br><span class="line">	 <span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="function"><span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">	        <span class="function"><span class="keyword">return</span> <span class="keyword">super</span>.<span class="title">equals</span><span class="params">(o)</span></span>;</span><br><span class="line">	    &#125;</span><br><span class="line"></span><br><span class="line">	 <span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="function"><span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	        <span class="function"><span class="keyword">return</span> <span class="keyword">super</span>.<span class="title">hashCode</span><span class="params">()</span></span>;</span><br><span class="line">	    &#125;</span><br><span class="line">	</span><br><span class="line">	 <span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="function">String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	        <span class="function"><span class="keyword">return</span> <span class="keyword">super</span>.<span class="title">toString</span><span class="params">()</span></span>;</span><br><span class="line">	    &#125;</span><br><span class="line">	</span><br><span class="line">	 <span class="keyword">public</span> <span class="keyword">synchronized</span> List&lt;E&gt; subList(<span class="keyword">int</span> fromIndex, <span class="keyword">int</span> toIndex) &#123;</span><br><span class="line">	        <span class="keyword">return</span> Collections.synchronizedList(<span class="keyword">super</span>.subList(fromIndex, toIndex),</span><br><span class="line">	                                            <span class="keyword">this</span>);</span><br><span class="line">	    &#125;</span><br><span class="line">	</span><br><span class="line">	 <span class="keyword">protected</span> <span class="keyword">synchronized</span> <span class="function"><span class="keyword">void</span> <span class="title">removeRange</span><span class="params">(<span class="keyword">int</span> fromIndex, <span class="keyword">int</span> toIndex)</span> </span>&#123;</span><br><span class="line">	        modCount++;</span><br><span class="line">	        <span class="keyword">int</span> numMoved = elementCount - toIndex;</span><br><span class="line">	        System.arraycopy(elementData, toIndex, elementData, fromIndex,</span><br><span class="line">	                         numMoved);</span><br><span class="line"></span><br><span class="line">	        <span class="comment">// Let gc do its work</span></span><br><span class="line">	        <span class="keyword">int</span> newElementCount = elementCount - (toIndex-fromIndex);</span><br><span class="line">	        <span class="keyword">while</span> (elementCount != newElementCount)</span><br><span class="line">	            elementData[--elementCount] = <span class="keyword">null</span>;</span><br><span class="line">	    &#125;</span><br><span class="line">	</span><br><span class="line">	 <span class="keyword">private</span> <span class="keyword">void</span> writeObject(java.io.ObjectOutputStream s)</span><br><span class="line">	            <span class="keyword">throws</span> java.io.IOException &#123;</span><br><span class="line">	        <span class="keyword">final</span> java.io.ObjectOutputStream.PutField fields = s.putFields();</span><br><span class="line">	        <span class="keyword">final</span> Object[] data;</span><br><span class="line">	        <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</span><br><span class="line">	            fields.put(<span class="string">"capacityIncrement"</span>, capacityIncrement);</span><br><span class="line">	            fields.put(<span class="string">"elementCount"</span>, elementCount);</span><br><span class="line">	            data = elementData.clone();</span><br><span class="line">	        &#125;</span><br><span class="line">	        fields.put(<span class="string">"elementData"</span>, data);</span><br><span class="line">	        s.writeFields();</span><br><span class="line">	    &#125;</span><br><span class="line">	</span><br><span class="line">	 <span class="keyword">public</span> <span class="keyword">synchronized</span> ListIterator&lt;E&gt; listIterator(<span class="keyword">int</span> index) &#123;</span><br><span class="line">	        <span class="keyword">if</span> (index &lt; <span class="number">0</span> || index &gt; elementCount)</span><br><span class="line">	            <span class="keyword">throw</span> <span class="keyword">new</span> IndexOutOfBoundsException(<span class="string">"Index: "</span>+index);</span><br><span class="line">	        <span class="keyword">return</span> <span class="keyword">new</span> ListItr(index);</span><br><span class="line">	    &#125;</span><br><span class="line">	</span><br><span class="line">	 <span class="keyword">public</span> <span class="keyword">synchronized</span> ListIterator&lt;E&gt; listIterator() &#123;</span><br><span class="line">	        <span class="keyword">return</span> <span class="keyword">new</span> ListItr(<span class="number">0</span>);</span><br><span class="line">	    &#125;</span><br><span class="line"></span><br><span class="line">	 <span class="keyword">public</span> <span class="keyword">synchronized</span> Iterator&lt;E&gt; iterator() &#123;</span><br><span class="line">	        <span class="keyword">return</span> <span class="keyword">new</span> Itr();</span><br><span class="line">	    &#125;</span><br><span class="line">	 </span><br><span class="line">	 <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">Itr</span> <span class="keyword">implements</span> <span class="title">Iterator</span>&lt;<span class="title">E</span>&gt; </span>&#123;</span><br><span class="line">	        <span class="keyword">int</span> cursor;       <span class="comment">// index of next element to return</span></span><br><span class="line">	        <span class="keyword">int</span> lastRet = -<span class="number">1</span>; <span class="comment">// index of last element returned; -1 if no such</span></span><br><span class="line">	        <span class="keyword">int</span> expectedModCount = modCount;</span><br><span class="line"></span><br><span class="line">	        <span class="keyword">public</span> <span class="function"><span class="keyword">boolean</span> <span class="title">hasNext</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	            <span class="comment">// Racy but within spec, since modifications are checked</span></span><br><span class="line">	            <span class="comment">// within or after synchronization in next/previous</span></span><br><span class="line">	            <span class="keyword">return</span> cursor != elementCount;</span><br><span class="line">	        &#125;</span><br><span class="line"></span><br><span class="line">	        <span class="keyword">public</span> <span class="function">E <span class="title">next</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	            <span class="keyword">synchronized</span> (Vector.<span class="keyword">this</span>) &#123;</span><br><span class="line">	                checkForComodification();</span><br><span class="line">	                <span class="keyword">int</span> i = cursor;</span><br><span class="line">	                <span class="keyword">if</span> (i &gt;= elementCount)</span><br><span class="line">	                    <span class="keyword">throw</span> <span class="keyword">new</span> NoSuchElementException();</span><br><span class="line">	                cursor = i + <span class="number">1</span>;</span><br><span class="line">	                <span class="function"><span class="keyword">return</span> <span class="title">elementData</span><span class="params">(lastRet = i)</span></span>;</span><br><span class="line">	            &#125;</span><br><span class="line">	        &#125;</span><br><span class="line"></span><br><span class="line">	        <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">remove</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	            <span class="keyword">if</span> (lastRet == -<span class="number">1</span>)</span><br><span class="line">	                <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException();</span><br><span class="line">	            <span class="keyword">synchronized</span> (Vector.<span class="keyword">this</span>) &#123;</span><br><span class="line">	                checkForComodification();</span><br><span class="line">	                Vector.<span class="keyword">this</span>.remove(lastRet);</span><br><span class="line">	                expectedModCount = modCount;</span><br><span class="line">	            &#125;</span><br><span class="line">	            cursor = lastRet;</span><br><span class="line">	            lastRet = -<span class="number">1</span>;</span><br><span class="line">	        &#125;</span><br><span class="line"></span><br><span class="line">	        <span class="annotation">@Override</span></span><br><span class="line">	        <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">forEachRemaining</span><span class="params">(Consumer&lt;? <span class="keyword">super</span> E&gt; action)</span> </span>&#123;</span><br><span class="line">	            Objects.requireNonNull(action);</span><br><span class="line">	            <span class="keyword">synchronized</span> (Vector.<span class="keyword">this</span>) &#123;</span><br><span class="line">	                <span class="keyword">final</span> <span class="keyword">int</span> size = elementCount;</span><br><span class="line">	                <span class="keyword">int</span> i = cursor;</span><br><span class="line">	                <span class="keyword">if</span> (i &gt;= size) &#123;</span><br><span class="line">	                    <span class="keyword">return</span>;</span><br><span class="line">	                &#125;</span><br><span class="line">	        <span class="annotation">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</span><br><span class="line">	                <span class="keyword">final</span> E[] elementData = (E[]) Vector.<span class="keyword">this</span>.elementData;</span><br><span class="line">	                <span class="keyword">if</span> (i &gt;= elementData.length) &#123;</span><br><span class="line">	                    <span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();</span><br><span class="line">	                &#125;</span><br><span class="line">	                <span class="keyword">while</span> (i != size &amp;&amp; modCount == expectedModCount) &#123;</span><br><span class="line">	                    action.accept(elementData[i++]);</span><br><span class="line">	                &#125;</span><br><span class="line">	                <span class="comment">// update once at end of iteration to reduce heap write traffic</span></span><br><span class="line">	                cursor = i;</span><br><span class="line">	                lastRet = i - <span class="number">1</span>;</span><br><span class="line">	                checkForComodification();</span><br><span class="line">	            &#125;</span><br><span class="line">	        &#125;</span><br><span class="line"></span><br><span class="line">	        <span class="keyword">final</span> <span class="function"><span class="keyword">void</span> <span class="title">checkForComodification</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	            <span class="keyword">if</span> (modCount != expectedModCount)</span><br><span class="line">	                <span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();</span><br><span class="line">	        &#125;</span><br><span class="line">	    &#125;</span><br><span class="line">	 </span><br><span class="line">	 <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">ListItr</span> <span class="keyword">extends</span> <span class="title">Itr</span> <span class="keyword">implements</span> <span class="title">ListIterator</span>&lt;<span class="title">E</span>&gt; </span>&#123;</span><br><span class="line">	        ListItr(<span class="keyword">int</span> index) &#123;</span><br><span class="line">	            <span class="keyword">super</span>();</span><br><span class="line">	            cursor = index;</span><br><span class="line">	        &#125;</span><br><span class="line"></span><br><span class="line">	        <span class="keyword">public</span> <span class="function"><span class="keyword">boolean</span> <span class="title">hasPrevious</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	            <span class="keyword">return</span> cursor != <span class="number">0</span>;</span><br><span class="line">	        &#125;</span><br><span class="line"></span><br><span class="line">	        <span class="keyword">public</span> <span class="function"><span class="keyword">int</span> <span class="title">nextIndex</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	            <span class="keyword">return</span> cursor;</span><br><span class="line">	        &#125;</span><br><span class="line"></span><br><span class="line">	        <span class="keyword">public</span> <span class="function"><span class="keyword">int</span> <span class="title">previousIndex</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	            <span class="keyword">return</span> cursor - <span class="number">1</span>;</span><br><span class="line">	        &#125;</span><br><span class="line"></span><br><span class="line">	        <span class="keyword">public</span> <span class="function">E <span class="title">previous</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	            <span class="keyword">synchronized</span> (Vector.<span class="keyword">this</span>) &#123;</span><br><span class="line">	                checkForComodification();</span><br><span class="line">	                <span class="keyword">int</span> i = cursor - <span class="number">1</span>;</span><br><span class="line">	                <span class="keyword">if</span> (i &lt; <span class="number">0</span>)</span><br><span class="line">	                    <span class="keyword">throw</span> <span class="keyword">new</span> NoSuchElementException();</span><br><span class="line">	                cursor = i;</span><br><span class="line">	                <span class="function"><span class="keyword">return</span> <span class="title">elementData</span><span class="params">(lastRet = i)</span></span>;</span><br><span class="line">	            &#125;</span><br><span class="line">	        &#125;</span><br><span class="line"></span><br><span class="line">	        <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">set</span><span class="params">(E e)</span> </span>&#123;</span><br><span class="line">	            <span class="keyword">if</span> (lastRet == -<span class="number">1</span>)</span><br><span class="line">	                <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException();</span><br><span class="line">	            <span class="keyword">synchronized</span> (Vector.<span class="keyword">this</span>) &#123;</span><br><span class="line">	                checkForComodification();</span><br><span class="line">	                Vector.<span class="keyword">this</span>.set(lastRet, e);</span><br><span class="line">	            &#125;</span><br><span class="line">	        &#125;</span><br><span class="line"></span><br><span class="line">	        <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(E e)</span> </span>&#123;</span><br><span class="line">	            <span class="keyword">int</span> i = cursor;</span><br><span class="line">	            <span class="keyword">synchronized</span> (Vector.<span class="keyword">this</span>) &#123;</span><br><span class="line">	                checkForComodification();</span><br><span class="line">	                Vector.<span class="keyword">this</span>.add(i, e);</span><br><span class="line">	                expectedModCount = modCount;</span><br><span class="line">	            &#125;</span><br><span class="line">	            cursor = i + <span class="number">1</span>;</span><br><span class="line">	            lastRet = -<span class="number">1</span>;</span><br><span class="line">	        &#125;</span><br><span class="line">	    &#125;</span><br><span class="line"></span><br><span class="line">	    <span class="annotation">@Override</span></span><br><span class="line">	    <span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="function"><span class="keyword">void</span> <span class="title">forEach</span><span class="params">(Consumer&lt;? <span class="keyword">super</span> E&gt; action)</span> </span>&#123;</span><br><span class="line">	        Objects.requireNonNull(action);</span><br><span class="line">	        <span class="keyword">final</span> <span class="keyword">int</span> expectedModCount = modCount;</span><br><span class="line">	        <span class="annotation">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</span><br><span class="line">	        <span class="keyword">final</span> E[] elementData = (E[]) <span class="keyword">this</span>.elementData;</span><br><span class="line">	        <span class="keyword">final</span> <span class="keyword">int</span> elementCount = <span class="keyword">this</span>.elementCount;</span><br><span class="line">	        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; modCount == expectedModCount &amp;&amp; i &lt; elementCount; i++) &#123;</span><br><span class="line">	            action.accept(elementData[i]);</span><br><span class="line">	        &#125;</span><br><span class="line">	        <span class="keyword">if</span> (modCount != expectedModCount) &#123;</span><br><span class="line">	            <span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();</span><br><span class="line">	        &#125;</span><br><span class="line">	    &#125;</span><br><span class="line"></span><br><span class="line">	    <span class="annotation">@Override</span></span><br><span class="line">	    <span class="annotation">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</span><br><span class="line">	    <span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="function"><span class="keyword">boolean</span> <span class="title">removeIf</span><span class="params">(Predicate&lt;? <span class="keyword">super</span> E&gt; filter)</span> </span>&#123;</span><br><span class="line">	        Objects.requireNonNull(filter);</span><br><span class="line">	        <span class="comment">// figure out which elements are to be removed</span></span><br><span class="line">	        <span class="comment">// any exception thrown from the filter predicate at this stage</span></span><br><span class="line">	        <span class="comment">// will leave the collection unmodified</span></span><br><span class="line">	        <span class="keyword">int</span> removeCount = <span class="number">0</span>;</span><br><span class="line">	        <span class="keyword">final</span> <span class="keyword">int</span> size = elementCount;</span><br><span class="line">	        <span class="keyword">final</span> BitSet removeSet = <span class="keyword">new</span> BitSet(size);</span><br><span class="line">	        <span class="keyword">final</span> <span class="keyword">int</span> expectedModCount = modCount;</span><br><span class="line">	        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; modCount == expectedModCount &amp;&amp; i &lt; size; i++) &#123;</span><br><span class="line">	            <span class="annotation">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</span><br><span class="line">	            <span class="keyword">final</span> E element = (E) elementData[i];</span><br><span class="line">	            <span class="keyword">if</span> (filter.test(element)) &#123;</span><br><span class="line">	                removeSet.set(i);</span><br><span class="line">	                removeCount++;</span><br><span class="line">	            &#125;</span><br><span class="line">	        &#125;</span><br><span class="line">	        <span class="keyword">if</span> (modCount != expectedModCount) &#123;</span><br><span class="line">	            <span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();</span><br><span class="line">	        &#125;</span><br><span class="line"></span><br><span class="line">	        <span class="comment">// shift surviving elements left over the spaces left by removed elements</span></span><br><span class="line">	        <span class="keyword">final</span> <span class="keyword">boolean</span> anyToRemove = removeCount &gt; <span class="number">0</span>;</span><br><span class="line">	        <span class="keyword">if</span> (anyToRemove) &#123;</span><br><span class="line">	            <span class="keyword">final</span> <span class="keyword">int</span> newSize = size - removeCount;</span><br><span class="line">	            <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>, j=<span class="number">0</span>; (i &lt; size) &amp;&amp; (j &lt; newSize); i++, j++) &#123;</span><br><span class="line">	                i = removeSet.nextClearBit(i);</span><br><span class="line">	                elementData[j] = elementData[i];</span><br><span class="line">	            &#125;</span><br><span class="line">	            <span class="keyword">for</span> (<span class="keyword">int</span> k=newSize; k &lt; size; k++) &#123;</span><br><span class="line">	                elementData[k] = <span class="keyword">null</span>;  <span class="comment">// Let gc do its work</span></span><br><span class="line">	            &#125;</span><br><span class="line">	            elementCount = newSize;</span><br><span class="line">	            <span class="keyword">if</span> (modCount != expectedModCount) &#123;</span><br><span class="line">	                <span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();</span><br><span class="line">	            &#125;</span><br><span class="line">	            modCount++;</span><br><span class="line">	        &#125;</span><br><span class="line"></span><br><span class="line">	        <span class="keyword">return</span> anyToRemove;</span><br><span class="line">	    &#125;</span><br><span class="line">	 </span><br><span class="line">	    <span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="function"><span class="keyword">void</span> <span class="title">replaceAll</span><span class="params">(UnaryOperator&lt;E&gt; operator)</span> </span>&#123;</span><br><span class="line">	        Objects.requireNonNull(operator);</span><br><span class="line">	        <span class="keyword">final</span> <span class="keyword">int</span> expectedModCount = modCount;</span><br><span class="line">	        <span class="keyword">final</span> <span class="keyword">int</span> size = elementCount;</span><br><span class="line">	        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; modCount == expectedModCount &amp;&amp; i &lt; size; i++) &#123;</span><br><span class="line">	            elementData[i] = operator.apply((E) elementData[i]);</span><br><span class="line">	        &#125;</span><br><span class="line">	        <span class="keyword">if</span> (modCount != expectedModCount) &#123;</span><br><span class="line">	            <span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();</span><br><span class="line">	        &#125;</span><br><span class="line">	        modCount++;</span><br><span class="line">	    &#125;</span><br><span class="line"></span><br><span class="line">	    <span class="annotation">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</span><br><span class="line">	    <span class="annotation">@Override</span></span><br><span class="line">	    <span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="function"><span class="keyword">void</span> <span class="title">sort</span><span class="params">(Comparator&lt;? <span class="keyword">super</span> E&gt; c)</span> </span>&#123;</span><br><span class="line">	        <span class="keyword">final</span> <span class="keyword">int</span> expectedModCount = modCount;</span><br><span class="line">	        Arrays.sort((E[]) elementData, <span class="number">0</span>, elementCount, c);</span><br><span class="line">	        <span class="keyword">if</span> (modCount != expectedModCount) &#123;</span><br><span class="line">	            <span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();</span><br><span class="line">	        &#125;</span><br><span class="line">	        modCount++;</span><br><span class="line">	    &#125;</span><br><span class="line">	    <span class="keyword">public</span> Spliterator&lt;E&gt; spliterator() &#123;</span><br><span class="line">	        <span class="keyword">return</span> <span class="keyword">new</span> VectorSpliterator&lt;&gt;(<span class="keyword">this</span>, <span class="keyword">null</span>, <span class="number">0</span>, -<span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">	    &#125;</span><br><span class="line"></span><br><span class="line">	    <span class="comment">/** Similar to ArrayList Spliterator */</span></span><br><span class="line">	    <span class="keyword">static</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">VectorSpliterator</span>&lt;<span class="title">E</span>&gt; <span class="keyword">implements</span> <span class="title">Spliterator</span>&lt;<span class="title">E</span>&gt; </span>&#123;</span><br><span class="line">	        <span class="keyword">private</span> <span class="keyword">final</span> Vector&lt;E&gt; list;</span><br><span class="line">	        <span class="keyword">private</span> Object[] array;</span><br><span class="line">	        <span class="keyword">private</span> <span class="keyword">int</span> index; <span class="comment">// current index, modified on advance/split</span></span><br><span class="line">	        <span class="keyword">private</span> <span class="keyword">int</span> fence; <span class="comment">// -1 until used; then one past last index</span></span><br><span class="line">	        <span class="keyword">private</span> <span class="keyword">int</span> expectedModCount; <span class="comment">// initialized when fence set</span></span><br><span class="line"></span><br><span class="line">	        <span class="comment">/** Create new spliterator covering the given  range */</span></span><br><span class="line">	        VectorSpliterator(Vector&lt;E&gt; list, Object[] array, <span class="keyword">int</span> origin, <span class="keyword">int</span> fence,</span><br><span class="line">	                          <span class="keyword">int</span> expectedModCount) &#123;</span><br><span class="line">	            <span class="keyword">this</span>.list = list;</span><br><span class="line">	            <span class="keyword">this</span>.array = array;</span><br><span class="line">	            <span class="keyword">this</span>.index = origin;</span><br><span class="line">	            <span class="keyword">this</span>.fence = fence;</span><br><span class="line">	            <span class="keyword">this</span>.expectedModCount = expectedModCount;</span><br><span class="line">	        &#125;</span><br><span class="line"></span><br><span class="line">	        <span class="keyword">private</span> <span class="function"><span class="keyword">int</span> <span class="title">getFence</span><span class="params">()</span> </span>&#123; <span class="comment">// initialize on first use</span></span><br><span class="line">	            <span class="keyword">int</span> hi;</span><br><span class="line">	            <span class="keyword">if</span> ((hi = fence) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">	                <span class="keyword">synchronized</span>(list) &#123;</span><br><span class="line">	                    array = list.elementData;</span><br><span class="line">	                    expectedModCount = list.modCount;</span><br><span class="line">	                    hi = fence = list.elementCount;</span><br><span class="line">	                &#125;</span><br><span class="line">	            &#125;</span><br><span class="line">	            <span class="keyword">return</span> hi;</span><br><span class="line">	        &#125;</span><br><span class="line"></span><br><span class="line">	        <span class="keyword">public</span> Spliterator&lt;E&gt; trySplit() &#123;</span><br><span class="line">	            <span class="keyword">int</span> hi = getFence(), lo = index, mid = (lo + hi) &gt;&gt;&gt; <span class="number">1</span>;</span><br><span class="line">	            <span class="keyword">return</span> (lo &gt;= mid) ? <span class="keyword">null</span> :</span><br><span class="line">	                <span class="keyword">new</span> VectorSpliterator&lt;E&gt;(list, array, lo, index = mid,</span><br><span class="line">	                                         expectedModCount);</span><br><span class="line">	        &#125;</span><br><span class="line"></span><br><span class="line">	        <span class="annotation">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</span><br><span class="line">	        <span class="keyword">public</span> <span class="function"><span class="keyword">boolean</span> <span class="title">tryAdvance</span><span class="params">(Consumer&lt;? <span class="keyword">super</span> E&gt; action)</span> </span>&#123;</span><br><span class="line">	            <span class="keyword">int</span> i;</span><br><span class="line">	            <span class="keyword">if</span> (action == <span class="keyword">null</span>)</span><br><span class="line">	                <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException();</span><br><span class="line">	            <span class="keyword">if</span> (getFence() &gt; (i = index)) &#123;</span><br><span class="line">	                index = i + <span class="number">1</span>;</span><br><span class="line">	                action.accept((E)array[i]);</span><br><span class="line">	                <span class="keyword">if</span> (list.modCount != expectedModCount)</span><br><span class="line">	                    <span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();</span><br><span class="line">	                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">	            &#125;</span><br><span class="line">	            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">	        &#125;</span><br><span class="line"></span><br><span class="line">	        <span class="annotation">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</span><br><span class="line">	        <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">forEachRemaining</span><span class="params">(Consumer&lt;? <span class="keyword">super</span> E&gt; action)</span> </span>&#123;</span><br><span class="line">	            <span class="keyword">int</span> i, hi; <span class="comment">// hoist accesses and checks from loop</span></span><br><span class="line">	            Vector&lt;E&gt; lst; Object[] a;</span><br><span class="line">	            <span class="keyword">if</span> (action == <span class="keyword">null</span>)</span><br><span class="line">	                <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException();</span><br><span class="line">	            <span class="keyword">if</span> ((lst = list) != <span class="keyword">null</span>) &#123;</span><br><span class="line">	                <span class="keyword">if</span> ((hi = fence) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">	                    <span class="keyword">synchronized</span>(lst) &#123;</span><br><span class="line">	                        expectedModCount = lst.modCount;</span><br><span class="line">	                        a = array = lst.elementData;</span><br><span class="line">	                        hi = fence = lst.elementCount;</span><br><span class="line">	                    &#125;</span><br><span class="line">	                &#125;</span><br><span class="line">	                <span class="keyword">else</span></span><br><span class="line">	                    a = array;</span><br><span class="line">	                <span class="keyword">if</span> (a != <span class="keyword">null</span> &amp;&amp; (i = index) &gt;= <span class="number">0</span> &amp;&amp; (index = hi) &lt;= a.length) &#123;</span><br><span class="line">	                    <span class="keyword">while</span> (i &lt; hi)</span><br><span class="line">	                        action.accept((E) a[i++]);</span><br><span class="line">	                    <span class="keyword">if</span> (lst.modCount == expectedModCount)</span><br><span class="line">	                        <span class="keyword">return</span>;</span><br><span class="line">	                &#125;</span><br><span class="line">	            &#125;</span><br><span class="line">	            <span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();</span><br><span class="line">	        &#125;</span><br><span class="line"></span><br><span class="line">	        <span class="keyword">public</span> <span class="function"><span class="keyword">long</span> <span class="title">estimateSize</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	            <span class="keyword">return</span> (<span class="keyword">long</span>) (getFence() - index);</span><br><span class="line">	        &#125;</span><br><span class="line"></span><br><span class="line">	        <span class="keyword">public</span> <span class="function"><span class="keyword">int</span> <span class="title">characteristics</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	            <span class="keyword">return</span> Spliterator.ORDERED | Spliterator.SIZED | Spliterator.SUBSIZED;</span><br><span class="line">	        &#125;</span><br><span class="line">	    &#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="u5256_u6790"><a href="#u5256_u6790" class="headerlink" title="剖析"></a>剖析</h3><p>Vector类与ArrayList类最主要的区别在于，Vector是并发安全的。里面的方法大部分实现的机制与ArrayList相同，一些不同之处在源代码中已注释。其它类似的方法思想可见ArrayList这一篇源码。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>主要介绍了有关于Vector的源码。包括数据成员的解读与方法的剖析。另外还简单的与ArrayList进行比较。<br>]]>
    
    </summary>
    
      <category term="java.util" scheme="http://jinpingwang.github.io/tags/java-util/"/>
    
      <category term="java源码" scheme="http://jinpingwang.github.io/tags/java%E6%BA%90%E7%A0%81/"/>
    
      <category term="java.util" scheme="http://jinpingwang.github.io/categories/java-util/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[java源码之AbstractSequentialList]]></title>
    <link href="http://jinpingwang.github.io/2015/11/07/javaSourceCode/java.util/AbstractSequentialList/"/>
    <id>http://jinpingwang.github.io/2015/11/07/javaSourceCode/java.util/AbstractSequentialList/</id>
    <published>2015-11-07T12:15:59.000Z</published>
    <updated>2016-01-20T07:55:12.588Z</updated>
    <content type="html"><![CDATA[<p>主要介绍了有关于抽象类AbstractSequentialList的源码，主要包括介绍它对List骨干方法的解析。<br><a id="more"></a></p>
<h3 id="u6E90_u4EE3_u7801"><a href="#u6E90_u4EE3_u7801" class="headerlink" title="源代码"></a>源代码</h3><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line">package java.util;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractSequentialList</span>&lt;<span class="title">E</span>&gt; <span class="keyword">extends</span> <span class="title">AbstractList</span>&lt;<span class="title">E</span>&gt;</span>&#123;</span><br><span class="line">	<span class="keyword">protected</span> AbstractSequentialList()&#123;</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">public</span> E get(<span class="keyword">int</span> <span class="keyword">index</span>)&#123;</span><br><span class="line">		<span class="keyword">try</span>&#123;</span><br><span class="line">			ListIterator&lt;E&gt; e=listIterator(<span class="keyword">index</span>);</span><br><span class="line">			<span class="keyword">return</span> e.next();</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">catch</span>(NoSuchElementException exc)&#123;</span><br><span class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> IndexOutOfBoundsException(<span class="string">"Index: "</span>+<span class="keyword">index</span>);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">public</span> E set(<span class="keyword">int</span> <span class="keyword">index</span>,E element)&#123;</span><br><span class="line">		<span class="keyword">try</span>&#123;</span><br><span class="line">			ListIterator&lt;E&gt; e=listIterator(<span class="keyword">index</span>);</span><br><span class="line">			E oldValue=e.next();</span><br><span class="line">			e.set(element);</span><br><span class="line">			<span class="keyword">return</span> oldValue;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">catch</span>(NoSuchElementException exc)&#123;</span><br><span class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> IndexOutOfBoundsException(<span class="string">"Index: "</span>+<span class="keyword">index</span>);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> add(<span class="keyword">int</span> <span class="keyword">index</span>,E element)&#123;</span><br><span class="line">		<span class="keyword">try</span>&#123;</span><br><span class="line">			ListIterator&lt;E&gt; e=listIterator(<span class="keyword">index</span>);</span><br><span class="line">			e.add(element);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">catch</span>(NoSuchElementException exc)&#123;</span><br><span class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> IndexOutOfBoundsException(<span class="string">"Index: "</span>+<span class="keyword">index</span>);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">public</span> E remove(<span class="keyword">int</span> <span class="keyword">index</span>)&#123;</span><br><span class="line">		<span class="keyword">try</span>&#123;</span><br><span class="line">			ListIterator&lt;E&gt; e=listIterator(<span class="keyword">index</span>);</span><br><span class="line">			E removeValue=e.next();</span><br><span class="line">			e.remove();</span><br><span class="line">			<span class="keyword">return</span> removeValue;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">catch</span>(NoSuchElementException exc)&#123;</span><br><span class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> IndexOutOfBoundsException(<span class="string">"Index: "</span>+<span class="keyword">index</span>);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">boolean</span> addAll(<span class="keyword">int</span> <span class="keyword">index</span>,Collection&lt;? extends E&gt; c)&#123;</span><br><span class="line">		<span class="keyword">try</span>&#123;</span><br><span class="line">			<span class="keyword">boolean</span> modified=<span class="keyword">false</span>;</span><br><span class="line">			ListIterator&lt;E&gt; e=listIterator(<span class="keyword">index</span>);</span><br><span class="line">			Iterator&lt;? extends E&gt; it=c.iterator();</span><br><span class="line">			<span class="keyword">while</span>(it.hasNext())&#123;</span><br><span class="line">				e.add(it.next());</span><br><span class="line">				modified=<span class="keyword">true</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">return</span> modified;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">catch</span>(NoSuchElementException exc)&#123;</span><br><span class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> IndexOutOfBoundsException(<span class="string">"Index: "</span>+<span class="keyword">index</span>);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">public</span> Iterator&lt;E&gt; iterator()&#123;</span><br><span class="line">		<span class="keyword">return</span> listIterator();</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">abstract</span> ListIterator&lt;E&gt; listIterator(<span class="keyword">int</span> <span class="keyword">index</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="u5256_u6790"><a href="#u5256_u6790" class="headerlink" title="剖析"></a>剖析</h3><p>AbstractSequentialList是继承抽象类AbstractList，所以AbstractSequentialList只是针对里面部分方法进行重写。重写的这些方法都是通过listIterator方法来实现的，而不是其它如直接通过数组随机访问的。<br>另外，由于本质是使用的操作是listIterator，所以也有冲突控件。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>主要介绍了有关于抽象类AbstractSequentialList的源码，主要包括介绍它对List骨干方法的解析。<br>]]>
    
    </summary>
    
      <category term="java.util" scheme="http://jinpingwang.github.io/tags/java-util/"/>
    
      <category term="java源码" scheme="http://jinpingwang.github.io/tags/java%E6%BA%90%E7%A0%81/"/>
    
      <category term="java.util" scheme="http://jinpingwang.github.io/categories/java-util/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[java源码之Deque]]></title>
    <link href="http://jinpingwang.github.io/2015/11/07/javaSourceCode/java.util/Deque/"/>
    <id>http://jinpingwang.github.io/2015/11/07/javaSourceCode/java.util/Deque/</id>
    <published>2015-11-07T07:23:41.000Z</published>
    <updated>2016-01-20T03:06:53.167Z</updated>
    <content type="html"><![CDATA[<p>主要介绍了有关于接口Deque的源码，主要包括插入，删除，获取元素方法的解析。Deque即是double ended queue的简称。<br><a id="more"></a></p>
<h3 id="u6E90_u4EE3_u7801"><a href="#u6E90_u4EE3_u7801" class="headerlink" title="源代码"></a>源代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> java.util;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Deque</span>&lt;<span class="title">E</span>&gt; <span class="keyword">extends</span> <span class="title">Queue</span>&lt;<span class="title">E</span>&gt; </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">addFirst</span><span class="params">(E e)</span></span>;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">addLast</span><span class="params">(E e)</span></span>;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">boolean</span> <span class="title">offerFirst</span><span class="params">(E e)</span></span>;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">boolean</span> <span class="title">offerLast</span><span class="params">(E e)</span></span>;</span><br><span class="line">	</span><br><span class="line">	<span class="function">E <span class="title">removeFirst</span><span class="params">()</span></span>;</span><br><span class="line">	</span><br><span class="line">	<span class="function">E <span class="title">removeLast</span><span class="params">()</span></span>;</span><br><span class="line">	</span><br><span class="line">	<span class="function">E <span class="title">pollFirst</span><span class="params">()</span></span>;</span><br><span class="line">	</span><br><span class="line">	<span class="function">E <span class="title">pollLast</span><span class="params">()</span></span>;</span><br><span class="line">	</span><br><span class="line">	<span class="function">E <span class="title">getFirst</span><span class="params">()</span></span>;</span><br><span class="line">	</span><br><span class="line">	<span class="function">E <span class="title">getLast</span><span class="params">()</span></span>;</span><br><span class="line">	</span><br><span class="line">	<span class="function">E <span class="title">peekFirst</span><span class="params">()</span></span>;</span><br><span class="line">	</span><br><span class="line">	<span class="function">E <span class="title">peekLast</span><span class="params">()</span></span>;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">boolean</span> <span class="title">removeFirstOccurrence</span><span class="params">(Object o)</span></span>;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">boolean</span> <span class="title">removeLastOccurrence</span><span class="params">(Object o)</span></span>;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">// *** Queue methods ***</span></span><br><span class="line">	<span class="function"><span class="keyword">boolean</span> <span class="title">add</span><span class="params">(E e)</span></span>;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">boolean</span> <span class="title">offer</span><span class="params">(E e)</span></span>;</span><br><span class="line">	</span><br><span class="line">	<span class="function">E <span class="title">remove</span><span class="params">()</span></span>;</span><br><span class="line">	</span><br><span class="line">	<span class="function">E <span class="title">poll</span><span class="params">()</span></span>;</span><br><span class="line">	</span><br><span class="line">	<span class="function">E <span class="title">element</span><span class="params">()</span></span>;</span><br><span class="line">	</span><br><span class="line">	<span class="function">E <span class="title">peek</span><span class="params">()</span></span>;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">// *** Stack methods ***</span></span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">push</span><span class="params">(E e)</span></span>;</span><br><span class="line">	</span><br><span class="line">	<span class="function">E <span class="title">pop</span><span class="params">()</span></span>;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">// *** Collection methods ***</span></span><br><span class="line">	<span class="function"><span class="keyword">boolean</span> <span class="title">remove</span><span class="params">(Object o)</span></span>;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">boolean</span> <span class="title">contains</span><span class="params">(Object o)</span></span>;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span></span>;</span><br><span class="line">	</span><br><span class="line">	<span class="function">Iterator&lt;E&gt; <span class="title">iterator</span><span class="params">()</span></span>;</span><br><span class="line">	</span><br><span class="line">	<span class="function">Iterator&lt;E&gt; <span class="title">descendingIterator</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="u5256_u6790"><a href="#u5256_u6790" class="headerlink" title="剖析"></a>剖析</h3><p>Deque与Queue方法类似，只不过在Queue方法后添加了相应的First,Last进行对头尾控制。另外还添加了两个方法移除从头开始第一次出现，或从尾开始第一次出现的元素。不过数据结构中的双端队列好像没这个概念。</p>
<p>另外Deque还可以当作Queue，Stack，即是受限的双端队列。不过Deque，Queue都是继承Collection，但Collection实现了Iterator接口，可队列，双端队列好像没有遍历的这个概念，因为遍历就意味着要弹出数据。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>主要介绍了有关于接口Deque的源码，主要包括插入，删除，获取元素方法的解析。Deque即是double ended queue的简称。<br>]]>
    
    </summary>
    
      <category term="java.util" scheme="http://jinpingwang.github.io/tags/java-util/"/>
    
      <category term="java源码" scheme="http://jinpingwang.github.io/tags/java%E6%BA%90%E7%A0%81/"/>
    
      <category term="java.util" scheme="http://jinpingwang.github.io/categories/java-util/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[java源码之Enumeration]]></title>
    <link href="http://jinpingwang.github.io/2015/11/07/javaSourceCode/java.util/Enumeration/"/>
    <id>http://jinpingwang.github.io/2015/11/07/javaSourceCode/java.util/Enumeration/</id>
    <published>2015-11-07T01:21:15.000Z</published>
    <updated>2016-01-06T07:51:00.479Z</updated>
    <content type="html"><![CDATA[<p>介绍了Enumeration接口，并与Iterator进行对比。<br><a id="more"></a></p>
<h3 id="u6E90_u4EE3_u7801"><a href="#u6E90_u4EE3_u7801" class="headerlink" title="源代码"></a>源代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> java.util;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span><br><span class="line"> * 这个接口其实与Iterator是重复了</span><br><span class="line"> * 相比Iterator接口，这个接口少了remove方法</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Enumeration</span>&lt;<span class="title">E</span>&gt; </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">boolean</span> <span class="title">hasMoreElements</span><span class="params">()</span></span>;</span><br><span class="line">	</span><br><span class="line">	<span class="function">E <span class="title">nextElement</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="u89E3_u6790"><a href="#u89E3_u6790" class="headerlink" title="解析"></a>解析</h3><p>这个接口很简单，与Iterator类似。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>介绍了Enumeration接口，并与Iterator进行对比。<br>]]>
    
    </summary>
    
      <category term="java.util" scheme="http://jinpingwang.github.io/tags/java-util/"/>
    
      <category term="java源码" scheme="http://jinpingwang.github.io/tags/java%E6%BA%90%E7%A0%81/"/>
    
      <category term="java.util" scheme="http://jinpingwang.github.io/categories/java-util/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[java源码之Queue]]></title>
    <link href="http://jinpingwang.github.io/2015/11/07/javaSourceCode/java.util/Queue/"/>
    <id>http://jinpingwang.github.io/2015/11/07/javaSourceCode/java.util/Queue/</id>
    <published>2015-11-07T01:18:15.000Z</published>
    <updated>2016-01-20T02:20:16.920Z</updated>
    <content type="html"><![CDATA[<p>主要介绍了有关于接口Queue的源码，主要包括插入，删除，获取元素方法的解析。这三种类型的方法退出都有两种形式：一种是抛出异常，一种是返回特定的值<br><a id="more"></a></p>
<h3 id="u6E90_u4EE3_u7801"><a href="#u6E90_u4EE3_u7801" class="headerlink" title="源代码"></a>源代码</h3><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">package java.util;</span><br><span class="line"></span><br><span class="line">public interface Queue<span class="variable">&lt;E&gt;</span> extends Collection<span class="variable">&lt;E&gt;</span> &#123;</span><br><span class="line">	</span><br><span class="line">	/<span class="keyword">*</span><span class="keyword">*</span></span><br><span class="line">	 <span class="keyword">*</span> 不允许e为null，添加时要判断是否有capacity restrictions</span><br><span class="line">	 <span class="keyword">*</span>/</span><br><span class="line">	boolean add(E e);</span><br><span class="line">	</span><br><span class="line">	/<span class="keyword">*</span><span class="keyword">*</span></span><br><span class="line">	 <span class="keyword">*</span> 同add，只不过add只能返回true</span><br><span class="line">	 <span class="keyword">*</span> 但offer可以返回true或false</span><br><span class="line">	 <span class="keyword">*</span>/</span><br><span class="line">	boolean offer(E e);</span><br><span class="line">	</span><br><span class="line">	/<span class="keyword">*</span><span class="keyword">*</span></span><br><span class="line">	 <span class="keyword">*</span> 如果queue为empty时会抛出异常</span><br><span class="line">	 <span class="keyword">*</span>/</span><br><span class="line">	E remove();</span><br><span class="line">	</span><br><span class="line">	/<span class="keyword">*</span><span class="keyword">*</span></span><br><span class="line">	 <span class="keyword">*</span> 和remove()作用相同</span><br><span class="line">	 <span class="keyword">*</span> 如果queue为empty时返回null</span><br><span class="line">	 <span class="keyword">*</span>/</span><br><span class="line">	E poll();</span><br><span class="line">	</span><br><span class="line">	/<span class="keyword">*</span><span class="keyword">*</span></span><br><span class="line">	 <span class="keyword">*</span> 用于返回第一个元素，如果queue为空会抛出异常</span><br><span class="line">	 <span class="keyword">*</span>/</span><br><span class="line">	E element();</span><br><span class="line">	</span><br><span class="line">	/<span class="keyword">*</span><span class="keyword">*</span></span><br><span class="line">	 <span class="keyword">*</span> 作用同element()，但如果queue为空时返回null</span><br><span class="line">	 <span class="keyword">*</span>/</span><br><span class="line">	E peek();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="u5256_u6790"><a href="#u5256_u6790" class="headerlink" title="剖析"></a>剖析</h3><h4 id="u63D2_u5165"><a href="#u63D2_u5165" class="headerlink" title="插入"></a>插入</h4><p>add(e)会抛出异常<br>offer(e)返回false</p>
<h4 id="u5220_u9664"><a href="#u5220_u9664" class="headerlink" title="删除"></a>删除</h4><p>remove()会抛出异常<br>poll()返回null</p>
<h4 id="u83B7_u53D6"><a href="#u83B7_u53D6" class="headerlink" title="获取"></a>获取</h4><p>element()：如果queue为空，则会抛出异常<br>peek()：如果queue为空，则返回null</p>
<h4 id="u6CE8_u610F"><a href="#u6CE8_u610F" class="headerlink" title="注意"></a>注意</h4><p>对于有capacity restrictions限制的，建议用offer(E e)，而不用add(E e)<br>Queue接口不支持concurrent programming<br>BlockingQueue支持concurrent programming</p>
<p>Queue不允许插入null的元素。一来是不允许；二来像poll()方法失败则会返回null，如果元素为null，则会产生二义性</p>
<p>Queue没定义equals,hashCode方法是因为同样的元素，但如果顺序不同同不相等，所以没办法定义这两个方法</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>主要介绍了有关于接口Queue的源码，主要包括插入，删除，获取元素方法的解析。这三种类型的方法退出都有两种形式：一种是抛出异常，一种是返回特定的值<br>]]>
    
    </summary>
    
      <category term="java.util" scheme="http://jinpingwang.github.io/tags/java-util/"/>
    
      <category term="java源码" scheme="http://jinpingwang.github.io/tags/java%E6%BA%90%E7%A0%81/"/>
    
      <category term="java.util" scheme="http://jinpingwang.github.io/categories/java-util/"/>
    
  </entry>
  
</feed>
